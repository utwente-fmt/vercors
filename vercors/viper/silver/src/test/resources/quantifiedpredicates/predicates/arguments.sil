
field f: Int
field g: Int
field unrelatedField: Int

method unrelated(this: Ref)
    requires acc(this.unrelatedField, write)
    ensures acc(this.unrelatedField, write)
{}

predicate valid(this: Ref, b: Bool) {
    b ? acc(this.f, write) : acc(this.g, write)
}

method t1_1(this: Ref, xs : Seq[Ref], b: Bool)
    requires this in xs
    requires forall x: Ref :: x in xs ==> acc(x.unrelatedField, write)
    requires acc(valid(this, b), write)
    ensures acc(valid(this, b), write)
{
    unfold acc(valid(this, b), write)
    if (b) {
        this.f := 1
    } else {
        this.g := 2
    }
    fold acc(valid(this, b), write)
    unrelated(this)
}

method t1_2(this: Ref, xs : Seq[Ref], b: Bool)
    requires this in xs
    requires forall x: Ref :: x in xs ==> acc(x.unrelatedField, write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, b), write)
    ensures acc(valid(this, b), write)
{
    unfold acc(valid(this, b), write)
    if (b) {
        this.f := 1
    } else {
        this.g := 2
    }
    fold acc(valid(this, b), write)
    unrelated(this)
}

method t1_3(this: Ref, xs : Seq[Ref], b: Bool)
    requires this in xs
    requires forall x: Ref :: x in xs ==> acc(x.unrelatedField, write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, b), write)
    ensures forall x: Ref :: x in xs ==> acc(valid(x, b), write)
{
    unfold acc(valid(this, b), write)
    if (b) {
        this.f := 1
    } else {
        this.g := 2
    }
    fold acc(valid(this, b), write)
    unrelated(this)
}

method t1_4(this: Ref, xs : Seq[Ref], b: Bool)
    requires this in xs
    requires acc(this.unrelatedField, write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, b), write)
    ensures acc(valid(this, b), write)
{
    unfold acc(valid(this, b), write)
    if (b) {
        this.f := 1
    } else {
        this.g := 2
    }
    fold acc(valid(this, b), write)
    unrelated(this)
}

method t2(x1: Ref, x2:Ref)
    requires acc(x1.unrelatedField, write)
    requires x1 != x2
    requires forall x:Ref :: x in Set(x1, x2) ==> acc(x.f, write)
    ensures forall x:Ref :: x in Set(x1, x2) ==> acc(valid(x, true), write)
{
    fold acc(valid(x1, true), write)
    fold acc(valid(x2, true), write)
    unrelated(x1)
}

method t2_b(x1: Ref, x2:Ref)
    requires acc(x1.unrelatedField, write)
    requires forall x:Ref :: x in Set(x1, x2) ==> acc(x.f, write)
    ensures forall x:Ref :: x in Set(x1, x2) ==> acc(valid(x, true), write)
{
    //:: ExpectedOutput(fold.failed:insufficient.permission)
    fold acc(valid(x2, false), write)
}

method t3_1(this: Ref, xs: Seq[Ref], b: Bool)
    requires this in xs
    requires acc(this.unrelatedField, write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, b), write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, !b), write)
    requires (unfolding acc(valid(this, false), write) in ((this.g) == 2))
    ensures acc(valid(this, b), write)
    ensures acc(valid(this, !b), write)
    ensures (unfolding acc(valid(this, false), write) in ((this.g) == 2))
{
    unfold acc(valid(this, true), write)
    this.f := 1
    fold acc(valid(this, true), write)
}

method t3a(this: Ref, xs:Seq[Ref], b: Bool)
    requires this in xs
    requires acc(this.unrelatedField, write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, b), write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, !b), write)
    requires (unfolding acc(valid(this, false), write) in ((this.g) == 2))
    ensures acc(valid(this, b), write)
    ensures acc(valid(this, !b), write)
    ensures (unfolding acc(valid(this, false), write) in ((this.g) == 2))
{
    unfold acc(valid(this, true), write)
    this.f := 1
    fold acc(valid(this, true), write)
    unrelated(this)
}

method t3b(this: Ref, xs: Seq[Ref], b: Bool)
    requires this in xs
    requires forall x: Ref :: x in xs ==> acc(valid(x, b), write)
    requires forall x: Ref :: x in xs ==> acc(valid(x, !b), write)
{
    unfold acc(valid(this, true), write)
    this.f := 1
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    this.g := 1
}