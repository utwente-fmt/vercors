field val:Int
field next:Ref

predicate list(r: Ref, i:Int)
{
    i > 0 ==> acc(r.val) && acc(r.next) && acc(list(r.next, i-1))
}


function allSet(r: Ref, i: Int, v:Int): Bool
  requires acc(list(r, i))
  //ensures acc(list(r, i))
{
  (i <= 0) ? true :
                unfolding acc(list(r, i)) in (
                    (r.val == v) && allSet(r.next, i-1, v)
                )
}

method m1(lists: Set[Ref], length:Int, v:Int)
requires length > 0
requires forall r: Ref :: r in lists ==> acc(list(r, length))
ensures forall r: Ref :: r in lists ==> acc(list(r, length)) && allSet(r, length, v)
{
    var s: Set[Ref] := lists
    var sNext: Set[Ref] := Set[Ref]()
    while (|s| > 0)
    invariant forall r: Ref :: r in s ==> acc(list(r, length))
    invariant forall r: Ref :: r in lists && !(r in s) ==> acc(r.next)
    invariant forall r: Ref :: r in sNext ==> acc(list(r, length-1))
    invariant forall r: Ref :: r in lists && !(r in s) ==> acc(r.val) && r.val == v
    invariant forall r: Ref :: r in lists && !(r in s) ==> r.next in sNext
    invariant forall r1: Ref, r2: Ref :: r1 in lists && !(r1 in s) && r2 in lists && !(r2 in s) && r1 != r2 ==> r1.next != r2.next
    {
        var l:Ref
        assume l in s
        unfold list(l, length)
        assume forall r: Ref :: r in lists && !(r in s) ==> r.next != l.next

        s := s setminus Set(l)
        sNext := sNext union Set(l.next)
        l.val := v
    }
    if (length -1 > 0) {
        m1(sNext, length-1, v)
    }
    s := lists
    while (|s| > 0)
        invariant forall r: Ref :: r in lists && !(r in s) ==> acc(list(r, length)) //&& unfolding list(r, length) in (r.val == v)
        invariant forall r: Ref :: r in lists && !(r in s) ==>  allSet(r, length, v)
        invariant forall r: Ref :: r in s ==> acc(r.val) && r.val == v && acc(r.next)
        invariant forall r1: Ref, r2: Ref :: r1 in s && r2 in s && r1 != r2 ==> r1.next != r2.next
        invariant forall r: Ref :: r in s ==>  acc(list(r.next, length-1))
        invariant forall r: Ref :: r in s ==>  allSet(r.next, length-1, v)
        {
            var l2:Ref
            assume l2 in s
            fold list(l2, length)
            s := s setminus Set(l2)
        }
        //:: ExpectedOutput(assert.failed:assertion.false)
        assert false
}