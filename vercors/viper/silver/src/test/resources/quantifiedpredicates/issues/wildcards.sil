predicate P(x: Ref, idx: Int)

method test01(x: Ref)
  requires acc(P(x, 0), wildcard)
{
  inhale forall d: Ref :: false ==> acc(P(d, 0), none)

  assert acc(P(x, 0), wildcard)
}

method test02(x: Ref)
  requires acc(P(x, 0), wildcard)
{
  inhale forall d: Ref :: false ==> acc(P(d, 0), none)

  var xs: Set[Ref]

  //:: UnexpectedOutput(exhale.failed:negative.permission, /carbon/issue/180/)
  exhale forall r: Ref :: r in xs ==> acc(P(r, 0), perm(P(r, 0)))
}

