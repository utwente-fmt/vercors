//:: IgnoreFile(/silicon/issue/266/)
//:: IgnoreFile(/carbon/issue/176/)

predicate access(a:IArray, i:Int) {
    (i % 2 == 0)  ==> acc(loc(a, i).val) && acc(loc(a, i+1).val)
}


method readTwo(a:IArray, i:Int) returns (sum:Int)
requires acc(access(a, i)) && (i%2 == 0)
{
    unfold access(a,i)
    sum := loc(a, i).val + loc(a, i+1).val
}


method totalSum(a:IArray, i:Int) returns (sum:Int)
requires i >= 0 && i + 1 < len(a)
requires i % 2 == 0
requires forall j:Int :: (j >= 0 && j < len(a) && (j%2 ==0)) ==> acc(access(a,j))
ensures i >= 0 && i <= len(a)
ensures forall j:Int :: j >= 0 && j < len(a) && (j%2 ==0) ==> acc(access(a,j))
{
    if (i + 3 < len(a)) {
        sum:= totalSum(a, i+2)
        unfold access(a, i)
        sum := sum + loc(a, i).val + loc(a, i+1).val
        fold access(a, i)
    } else {
        unfold access(a, i)
        sum := loc(a, i).val + loc(a, i+1).val
        fold access(a, i)
    }

}


method setVal(a:IArray, i:Int, newVal:Int)
requires i >= 0 && i < len(a)
requires i % 2 == 0
requires len(a)%2 == 0
requires forall j:Int :: j >= 0 && j < len(a) && (j%2 ==0) ==> acc(access(a,j))
ensures i >= 0 && i < len(a)
ensures len(a)%2 == old(len(a)%2)
ensures forall j:Int :: j >= 0 && j < len(a) && (j%2 ==0) ==> acc(access(a,j))
//:: UnexpectedOutput(postcondition.violated:assertion.false, /Silicon/issue/158/)
ensures forall j:Int :: j >= 0 && j < i && (j%2 ==0) ==> (unfolding acc(access(a,j)) in  loc(a, j).val) == old(unfolding acc(access(a,j)) in  loc(a, j).val)
ensures forall j:Int :: j >= 0 && j < i && (j%2 ==0) ==> (unfolding acc(access(a,j)) in  loc(a, j+1).val) == old(unfolding acc(access(a,j)) in  loc(a, j+1).val)
ensures (unfolding acc(access(a,i)) in  (loc(a, i).val == newVal)) && (unfolding acc(access(a,i)) in  (loc(a, i+1).val == newVal))
//ensures forall j:Int :: j >= i && j < len(a) && (j%2 ==0) ==> (unfolding acc(access(a,j)) in  (loc(a, j).val == newVal)) && (unfolding acc(access(a,j)) in  (loc(a, j+1).val == newVal))
{
    unfold access(a,i)
    loc(a,i).val := newVal
	loc(a,i+1).val := newVal
	fold access(a,i)

    if (i + 2 < len(a)) {
             setVal(a, i+2, newVal)
             assert (unfolding acc(access(a,i+2)) in  (loc(a, i+2).val == newVal)) && (unfolding acc(access(a,i+2)) in  (loc(a, i+3).val == newVal))
    }
    assert (unfolding acc(access(a,i)) in  (loc(a, i).val == newVal)) && (unfolding acc(access(a,i)) in  (loc(a, i+1).val == newVal))
}


method setVal2(a:IArray, i:Int, newVal:Int)
requires i >= 0 && i < len(a)
requires forall j:Int :: j >= 0 && j < len(a) ==> acc(loc(a,j).val)
ensures i >= 0 && i < len(a)
ensures forall j:Int :: j >= 0 && j < len(a) ==> acc(loc(a,j).val)
ensures forall j:Int :: j >= 0 && j < len(a) && j < i ==> old(loc(a, j).val) == loc(a, j).val
{
    var k:Int
    assume k >= 0 && k < len(a) && (k%2 == 0) && k!= i
    loc(a,i).val := newVal

	if (i + 2 < len(a)) {
        setVal2(a, i+1, newVal)
    }

}

/* Encoding of arrays */

field val: Int

domain IArray {
  function loc(a: IArray, i: Int): Ref
  function len(a: IArray): Int
  function first(r: Ref): IArray
  function second(r: Ref): Int

  axiom all_diff {
    forall a: IArray, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom len_nonneg {
    forall a: IArray :: len(a) >= 0
  }
}
