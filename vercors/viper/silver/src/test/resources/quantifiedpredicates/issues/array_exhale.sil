field val: Int

domain IArray {
  function loc(a: IArray, i: Int): Ref
  function loc_limited(a: IArray, i: Int): Ref
  function len(a: IArray): Int
  function first(r: Ref): IArray
  function second(r: Ref): Int

  axiom limited {
    forall a: IArray, i: Int :: {loc(a, i)}
      loc(a,i) == loc_limited(a,i)
  }

  axiom all_diff {
    forall a: IArray, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: IArray :: len(a) >= 0
  }
}

predicate p(a: IArray, i:Int)
{
	acc(loc(a, i).val)
}

method m1(a: IArray, n: Int, i1: Int, i2:Int)
  requires n > 3
  requires forall i: Int :: i > 0 && i < n ==> acc(p(a, i+1))
   //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/251/)
  ensures  forall i: Int :: i > 0 && i < n  ==> acc(p(a,i+1))
{}

method m2(a: IArray, n: Int, i1: Int, i2:Int)
  requires n > 3
  requires forall i: Int :: i > 0 && i < n ==> acc(loc(a, i+1).val)
  ensures  forall i: Int :: i > 0 && i < n  ==> acc(loc(a, i+1).val)
{}

method m3(a: IArray, n: Int, i1: Int, i2:Int)
  requires n > 3
  requires forall i: Int :: i in [0..n) ==> acc(p(a, i+1))
   //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Carbon/issue/159/)
   //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/251/)
  ensures  acc(p(a, 1))
{}

method m4(a: IArray, n: Int, i1: Int, i2:Int)
  requires n > 3
  requires forall i: Int :: i in [0..n) ==> acc(loc(a, i+1).val)
   //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Carbon/issue/159/)
   //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/251/)
  ensures  acc(loc(a, 1).val)
{}

method m5(a: IArray, n: Int, i1: Int, i2:Int)
  requires n > 3
  requires forall i: Int :: i in [0..n) ==> acc(p(a, i+1))
   //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Carbon/issue/159/)
   //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/251/)
  ensures  forall i: Int :: i in [1..n+1) ==> acc(p(a, i))
{}

method m6(a: IArray, n: Int, i1: Int, i2:Int)
  requires n > 3
  requires forall i: Int :: i in [0..n) ==> acc(loc(a, i+1).val)
   //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Carbon/issue/159/)
   //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/251/)
  ensures  forall i: Int :: i in [1..n+1) ==> acc(loc(a, i).val)
{}

method m7(a: IArray, n: Int, i1: Int, i2:Int)
  requires n > 3
  requires forall i: Int :: i in [1..n+1) ==> acc(p(a, i))
  ensures  forall i: Int :: i in [0..n) ==> acc(p(a, i+1))
{}

method m8(a: IArray, n: Int, i1: Int, i2:Int)
  requires n > 3
  requires forall i: Int :: i in [1..n+1) ==> acc(loc(a, i).val)
  ensures  forall i: Int :: i in [0..n) ==> acc(loc(a, i+1).val)
{}

method m9(a: IArray, n: Int)
  requires n > 5
  requires forall i: Int :: i in [0..n) ==> acc(p(a, i))
  ensures forall i: Int :: i in [4..n) ==> acc(p(a, i))
  ensures forall i: Int :: i in [0..4) ==> acc(p(a, i))
{}

method m10(a: IArray, n: Int)
  requires n > 5
  requires forall i: Int :: i in [0..n) ==> acc(loc(a, i).val)
  ensures forall i: Int :: i in [4..n) ==> acc(loc(a, i).val)
  ensures forall i: Int :: i in [0..4) ==> acc(loc(a, i).val)
{}