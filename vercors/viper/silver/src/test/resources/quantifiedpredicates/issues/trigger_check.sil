field f:Int

function e(x: Ref) : Ref

predicate p(r:Ref, i:Int)
{ acc(r.f) && (r.f == i)}

method m(xs: Seq[Ref])
requires forall x:Ref :: x in xs ==> acc(e(x).f)
ensures forall x:Ref :: x in xs ==> acc(e(x).f)
{}

method m2(xs: Seq[Ref], i:Int)
requires forall x:Ref :: x in xs ==> acc(p(e(x), i+1))
ensures forall x:Ref :: x in xs ==> acc(p(e(x), i+1))
{}
