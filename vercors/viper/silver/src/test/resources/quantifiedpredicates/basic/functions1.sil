predicate P(x: Ref)

function fun_P(xs: Seq[Ref], j: Int): Int
  requires forall i: Int :: 0 <= i && i < |xs| ==> P(xs[i])
  requires 0 <= j && j < |xs|
{ get_P(xs[j]) }

function get_P(x: Ref): Int
  requires P(x)

method test_P() {
  var ys: Seq[Ref]
  var k: Int
  assume 0 <= k && k < |ys|

  inhale forall i: Int :: 0 <= i && i < |ys| ==> P(ys[i])
  inhale fun_P(ys, k) == 0
  exhale get_P(ys[k]) == 0
}



field f: Int

function fun_f(xs: Seq[Ref], j: Int): Int
  requires forall i: Int :: 0 <= i && i < |xs| ==> acc(xs[i].f)
  requires 0 <= j && j < |xs|
{ get_f(xs[j]) }

function get_f(x: Ref): Int
  requires acc(x.f)

method test_f() {
  var ys: Seq[Ref]
  var k: Int
  assume 0 <= k && k < |ys|

  inhale forall i: Int :: 0 <= i && i < |ys| ==> acc(ys[i].f)
  inhale fun_f(ys, k) == 0
  exhale get_f(ys[k]) == 0
}
