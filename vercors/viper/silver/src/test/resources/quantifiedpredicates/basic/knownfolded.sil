field f: Int
field g: Bool

predicate P(x: Ref, b: Bool) {
  b ? acc(x.f) : acc(x.g)
}

method test1(x: Ref, xs: Set[Ref], b: Bool)
  requires forall y:Ref :: y in xs ==>  acc(P(y, b))
  requires x in xs
  ensures b ? acc(x.f) && x.f == 0 : acc(x.g) && x.g
{
  unfold acc(P(x, b))

  if (b) {
    x.f := 0
  } else {
    x.g := true
  }
}



method test2(x: Ref, xs: Set[Ref], b: Bool)
  requires forall y:Ref :: y in xs ==>  acc(P(y, b))
  requires x in xs
  ensures acc(P(x, b))
  ensures unfolding P(x, b) in (b ? x.f == 0 : x.g)
{
  unfold acc(P(x, b))

  if (b) {
    x.f := 0
  } else {
    x.g := true
  }
  fold acc(P(x, b))
}