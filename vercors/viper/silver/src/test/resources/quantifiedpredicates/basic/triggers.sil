field f: Int
field g: Int

predicate pred(r:Ref) {
	acc(r.f)
}

function fun(r:Ref, i:Int) : Ref
{r}

function fun2(r:Ref) : Ref
{r}

method t3(xs:Seq[Ref], r: Ref, i:Int)
    requires forall x:Ref ::  x in xs ==> acc(pred(fun(x, i)))
    ensures forall x:Ref :: x in xs ==> acc(pred(fun2(x)))
{
    assert forall x: Ref :: fun(x, i) == fun2(x)
}

method t4a(xs:Seq[Ref], r: Ref, i:Int) {
  inhale forall x:Ref :: {fun2(x)} x in xs ==> acc(pred(fun(x, i)))
  exhale forall y:Ref :: {fun(y, i)} y in xs ==> acc(pred(fun2(y)))
}

method t4b(xs:Seq[Ref], r: Ref, i:Int)
  requires forall x:Ref :: {fun2(x)} x in xs ==> acc(pred(fun(x, i)))
  ensures  forall y:Ref :: {fun(y, i)} y in xs ==> acc(pred(fun2(y)))
{}

method t5b(xs:Seq[Ref], r: Ref, i:Int)
  requires forall x:Ref :: {fun2(x)} x in xs ==> acc(fun(x, i).f)
  ensures  forall y:Ref :: {fun(y, i)} y in xs ==> acc(fun2(y).f)
{}

