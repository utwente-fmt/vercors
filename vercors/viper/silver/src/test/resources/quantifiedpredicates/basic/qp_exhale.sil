field f:Int
field g:Int


predicate p1()
{
	true
}

predicate p2(r:Ref)
{
    acc(r.f)
}

predicate p3(r:Ref)
{
	acc(r.f) && r.f == 0
}

predicate p4(r:Ref, i:Int)
{
    acc(r.f)
}

predicate p5(r:Ref, i:Int)
{
    acc(r.f) && r.f == i
}

method m1(x:Ref, y:Ref, z:Ref)
requires acc(p2(x))
requires acc(p2(y))
requires acc(p2(z))
ensures forall r:Ref :: r in Set(x, y, z) ==> acc(p2(r))
{}

method m2(x:Ref, y:Ref, z:Ref)
requires acc(p2(x))
requires acc(p2(y))
requires acc(p2(z))
ensures acc(p2(z))
ensures forall r:Ref :: r in Set(x, y) ==> acc(p2(r))
{}

method m3(x:Ref, y:Ref, z:Ref)
requires acc(p2(x))
requires acc(p2(y))
requires acc(p2(z))
ensures forall r:Ref :: r in Set(x, y) ==> acc(p2(r))
ensures acc(p2(z))
{}


method m4(x:Ref, y:Ref, z:Ref)
requires acc(p2(x))
requires acc(p2(y))
//:: ExpectedOutput(postcondition.violated:insufficient.permission)
ensures forall r:Ref :: r in Set(x, y, z) ==> acc(p2(r))
{}


method m5(x:Ref, y:Ref, z:Ref)
requires acc(p2(y))
requires acc(p2(z))
//:: ExpectedOutput(postcondition.violated:insufficient.permission)
ensures forall r:Ref :: r in Set(x, y, z) ==> acc(p2(r))
{}