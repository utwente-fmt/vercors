field val:Int
field next:Ref

predicate list(r: Ref, i:Int)
{
    i > 0 ==> acc(r.val) && acc(r.next) && acc(list(r.next, i-1))
}

method m1(r:Ref, length:Int, v:Int)
requires length > 0
requires acc(list(r, length))
ensures acc(list(r, length))
ensures unfolding list(r, length) in (r.val == v)
{
    unfold list(r, length)
    r.val := v
    if (length -1 > 0) {
        m1(r.next, length-1, v)
    }
    fold list(r, length)
}

method m2(l1:Ref, l2:Ref, length:Int, v:Int)
requires length > 0
requires l1 != l2
requires forall l:Ref :: l in Set(l1, l2) ==> acc(list(l, length))
ensures  acc(list(l1, length))
ensures  acc(list(l2, length))
ensures unfolding list(l1, length) in (l1.val == v)
{
    unfold list(l1, length)
    l1.val := v
    if (length -1 > 0) {
        m1(l1.next, length-1, v)
    }
    fold list(l1, length)
}