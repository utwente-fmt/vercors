field f:Int
field g:Int


predicate p1()
{
	true
}

predicate p2(r:Ref)
{
    acc(r.f)
}

predicate p3(r:Ref)
{
	acc(r.f) && r.f == 0
}

predicate p4(r:Ref, i:Int)
{
    acc(r.f)
}

predicate p5(r:Ref, i:Int)
{
    acc(r.f) && r.f == i
}

//this might be a problem....
method m1(x: Ref, xs: Seq[Ref])
requires x in xs
requires forall r:Ref :: r in xs ==> acc(p2(r))
ensures acc(p2(x))
ensures unfolding p2(x) in (x.f == 4)
{
    unfold acc(p2(x))
    x.f := 4
    fold acc(p2(x))
    unfold acc(p2(x))
    assert (x.f ==4)
    fold acc(p2(x))
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert (x.f ==4)
}


method m2(x: Ref, xs: Seq[Ref])
requires x in xs
requires forall r:Ref :: r in xs ==> acc(p3(r))
{
    unfold acc(p3(x))
    assert(x.f == 0)
    x.f := 4
    //:: ExpectedOutput(fold.failed:assertion.false)
    fold acc(p3(x))
}

method m3(x: Ref, xs: Seq[Ref])
requires x in xs
requires forall r:Ref :: r in xs ==> acc(p3(r))
ensures acc(p3(x))
{
    unfold acc(p3(x))
    assert(x.f == 0)
    fold acc(p3(x))
}

method m4(x: Ref, i:Int, xs: Seq[Ref])
requires x in xs
requires forall r:Ref :: r in xs ==> acc(p4(r, i))
ensures forall r:Ref :: r in xs ==> acc(p4(r, i))
{
    unfold acc(p4(x, i))
    x.f := 4
    fold acc(p4(x, i))
}

method m5(x: Ref, i:Int, xs: Seq[Ref])
requires x in xs
requires forall r:Ref :: r in xs ==> acc(p5(r, i))
{
    unfold acc(p5(x, i))
    assert (x.f == i)
    x.f := 4
    fold acc(p5(x, 4))
    //:: ExpectedOutput(fold.failed:insufficient.permission)
    fold acc(p5(x, 4))
}

method m6(x: Ref, i:Int, xs: Seq[Ref])
requires x in xs
requires forall r:Ref :: r in xs ==> acc(p5(r, i))
{
    unfold acc(p5(x, i))
    assert (x.f == i)
    x.f := 4
    //:: ExpectedOutput(fold.failed:assertion.false)
    fold acc(p5(x, i))
}

method m7(x: Ref, i:Int, xs: Seq[Ref])
requires x in xs
requires forall r:Ref :: r in xs ==> acc(p5(r, i))
{
    //:: ExpectedOutput(fold.failed:insufficient.permission)
    fold acc(p5(x, i))
}