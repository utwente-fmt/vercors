field f:Int
field g:Int


predicate p1()
{
	true
}

predicate p2(r:Ref)
{
    acc(r.f)
}

predicate p3(r:Ref)
{
	acc(r.f) && r.f == 0
}

predicate p4(r:Ref, i:Int)
{
    acc(r.f)
}

predicate p5(r:Ref, i:Int)
{
    acc(r.f) && r.f == i
}

method m2(x: Ref, xs: Seq[Ref])
requires forall r:Ref :: r in xs ==> acc(p2(r))
{}

method m3(x: Ref, xs: Seq[Ref])
requires forall r:Ref :: r in xs ==> acc(p3(r))
{}

method m4(x: Ref, i:Int, xs: Seq[Ref])
requires forall r:Ref :: r in xs ==> acc(p4(r, i))
{}

method m5(x: Ref, i:Int, xs: Seq[Ref])
requires forall r:Ref :: r in xs ==> acc(p5(r, i))
{}