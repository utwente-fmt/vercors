field f: Int


predicate p1(r:Ref)
{
    acc(r.f)
}

predicate p2(r:Ref)
{
    acc(r.f) && r.f == 5
}


predicate p3(r:Ref, i:Int)
{
    acc(r.f) && i > 0
}

method m1(xs:Set[Ref])
requires forall r:Ref :: r in xs ==> acc(p1(r))
{
    assume forall r:Ref :: r in xs ==> unfolding p1(r) in r.f == 4
    assert forall r:Ref :: r in xs ==> unfolding p1(r) in r.f == 4

}

method m2(xs:Set[Ref])
requires forall r:Ref :: r in xs ==> acc(p2(r))
{
    //:: UnexpectedOutput(assert.failed:assertion.false, /Carbon/issue/158/)
    assert forall r:Ref :: r in xs ==> unfolding p2(r) in r.f == 5
}

method m3(xs:Set[Ref], i:Int)
requires forall r:Ref :: r in xs ==> acc(p3(r, i))
{
    assume forall r:Ref :: r in xs ==> unfolding p3(r, i) in r.f == i+1
    assert forall r:Ref :: r in xs ==> unfolding p3(r, i) in r.f == i+1
}

method m4(xs:Set[Ref], i:Int)
requires forall r:Ref :: r in xs ==> acc(p3(r, i))
{
   assume forall r:Ref :: r in xs ==> unfolding p3(r, i) in r.f == i+1
   //:: ExpectedOutput(assert.failed:assertion.false)
   assert forall r:Ref :: r in xs ==> unfolding p3(r, i) in r.f == i
}