
domain Edge {
    function edge_pred(e:Edge): Ref
    function edge_succ(e:Edge): Ref

    function create_edge(p:Ref, s:Ref): Edge
    function create_edge_(p:Ref, s:Ref): Edge

    axiom edge_injectivity {
        forall p:Ref, s:Ref ::
            { create_edge(p,s) }
                edge_pred( create_edge(p,s) ) == p &&
                edge_succ( create_edge(p,s) ) == s
    }
}

domain TrClo {

    function exists_path(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_path_(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_spath(EG:Set[Edge], from:Set[Ref], to:Ref): Bool

    /// U is the universe;
    /// EG is the edge graph (specifies the edge relation)
    /// A is the color predicate
    /// M is the marker
    function apply_noExit(EG:Set[Edge], U:Set[Ref], M:Set[Ref]): Bool
    //function apply_goOut(EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref]): Bool
    //function apply_newStart(U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge]): Bool

    /** axiomatization of the set for instantiating color axioms with unary reachability */
    function inst_uReach(EG:Set[Edge], x:Ref): Set[Ref]
    function inst_uReach_rev(EG:Set[Edge], x:Ref): Set[Ref]

    /** The properties of the edge relation. */
    function acyclic_graph(EG:Set[Edge]): Bool
    function unshared_graph(EG:Set[Edge]): Bool
    function func_graph(EG:Set[Edge]): Bool


    function edge(EG:Set[Edge], p:Ref, s:Ref): Bool
    function edge_(EG:Set[Edge], p:Ref, s:Ref): Bool

    function succs(EG:Set[Edge], pred:Ref): Set[Ref]

    axiom ax_Succs {
        forall EG:Set[Edge], pred:Ref, succ:Ref ::
            { succ in succs(EG,pred) }
                succ in succs(EG,pred) <==> edge_(EG,pred,succ)
    }

    axiom ax_EdgeSynonim {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { edge(EG,p,s) }
                edge(EG,p,s) <==> edge_(EG,p,s)
    }
    axiom ax_Edge {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { create_edge(p,s) in EG }
            { edge(EG,p,s) }
                edge_(EG,p,s) <==> create_edge(p,s) in EG
    }

    // The first color axiom from the paper. (Via Refs)
    axiom ax_NoExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }

    /*
    axiom ax_NoTCExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noTCExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noTCExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }
    */
    /*
    // TODO: revise the triggers!
    axiom ax_GoOut {
        forall EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref] :: { apply_goOut(EG,U,A,B) }
        // apply_goOut(EG,U,A,B) &&
        ( apply_goOut(EG,U,A,B) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in A, v in A }{ u in A, v in B } (u in A) && (v in U) && !(v in A) && edge(EG,u,v) ==> v in B ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in A, v in A }            (u in A) && (v in U) && !(v in A) && exists_path(EG,u,v) ==> exists w:Ref :: w in B && exists_path(EG,u,w) && exists_path(EG,w,v) )
        ) )
    }

    axiom ax_NewStart {
        forall U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge] :: { apply_newStart(U,A,EG1,EG2) }
        // apply_newStart(U,A,EG1,EG2) &&
        ( apply_newStart(U,A,EG1,EG2) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG1,u,v) }{ u in A, v in A } (u in A) && (v in A) && edge(EG2,u,v) ==> edge(EG1,u,v) )  ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG1,u,v) }{ exists_path(EG2,u,v) } exists_path(EG2,u,v) && !exists_path(EG1,u,v) ==> exists w:Ref :: (w in U) && !(w in A) && exists_path(EG2,u,w) && exists_path(EG2,w,v) )
        ) )
    }
    */

    axiom ax_instantiation_uReach {
        forall EG:Set[Edge], x:Ref, v: Ref ::
            { v in inst_uReach(EG,x) }
            { exists_path(EG,x,v) }
                v in inst_uReach(EG,x) <==> exists_path(EG,x,v)
    }

    axiom ax_instantiation_uReach_rev {
        forall EG:Set[Edge], u: Ref, y:Ref ::
            { u in inst_uReach_rev(EG,y) }
            { exists_path(EG,u,y) }
                u in inst_uReach_rev(EG,y) <==> exists_path(EG,u,y)
    }

    axiom ax_Alias {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
                exists_path(EG,start,end) <==> exists_path_(EG,start,end)
    }

    /** T1 -- Ref-oriented encoding */
    axiom ax_ExistsPath {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_(EG,start,end) <==>
                    start == end
                    //|| ( succs(EG,start) intersection inst_uReach_rev(EG,end) != Set() )
                    || exists w:Ref :: edge(EG,start,w) && exists_path_(EG,w,end)
    }

    /** Follows from T1 && IND */
    axiom ax_ExistsPathTrans {
        forall EG:Set[Edge], u:Ref, v:Ref, w:Ref ::
            { exists_path(EG,u,w), exists_path(EG,w,v) }
                exists_path_(EG,u,w) && exists_path_(EG,w,v) ==> exists_path_(EG,u,v)
    }

    axiom ax_AcyclicGraph {
        forall EG:Set[Edge] ::
            { acyclic_graph(EG) }
                acyclic_graph(EG) <==>
                    forall v1:Ref, v2:Ref ::
                        { edge(EG,v1,v2) }
                        { exists_path(EG,v2,v1) }
                            !edge(EG,v1,v2) || !exists_path(EG,v2,v1)
    }

    axiom ax_UnsharedGraph {
        forall EG:Set[Edge] ::
            { unshared_graph(EG) }
                unshared_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        { edge(EG,v1,v), edge(EG,v2,v) }
                            edge(EG,v1,v) && edge(EG,v2,v) ==> v1 == v2
    }

    axiom ax_FuncGraph {
        forall EG:Set[Edge] ::
            { func_graph(EG) }
                func_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        //{ edge(EG,v1,v), edge(EG,v2,v) }
                        { edge(EG,v,v1), edge(EG,v,v2) }
                            edge(EG,v,v1) && edge(EG,v,v2) ==> v1 == v2
    }
}

field next:Ref

// Purification of the entire (edge) graph.
function $$(refs:Set[Ref]): Set[Edge]
    requires forall n:Ref :: {n.next} n in refs ==> acc(n.next,1/2)
    //requires GRAPH(refs)
    ensures forall p:Ref, s:Ref ::
        { create_edge(p,s) }
        //{ p in refs, s in refs }
            p in refs && s in refs && p.next == s
            <==> create_edge(p,s) in result
    // This is wisdom_PathStartEndMustRemainInGraph
    // TODO: why is this sound?

    ensures forall p:Ref, s:Ref ::
        { p in refs, s in refs, exists_path(result,p,s) }
            p in refs && exists_path(result,p,s) ==> s in refs
    ensures forall p:Ref, s:Ref ::
        { p in refs, s in refs, exists_path(result,p,s) }
            s in refs && exists_path(result,p,s) ==> p in refs

define GRAPH(nodes)
    !(null in nodes)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes && n.next != null ==> n.next in nodes )

define PROTECTED_GRAPH(nodes, mutable_node)
    !(null in nodes)
    && ( mutable_node in nodes )
    && acc(mutable_node.next, write)
    && ( forall n:Ref :: {n.next} n in nodes && n != mutable_node ==> acc(n.next,1/2) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes && n.next != null ==> n.next in nodes )

define READONLY_GRAPH(nodes)
    !(null in nodes)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next,1/2) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes && n.next != null ==> n.next in nodes )

define disjoint_sets(g0, g1)
    ( forall r:Ref :: { r in g0, r in g1 } r in g0 ==> !(r in g1) ) &&
    ( forall r:Ref :: { r in g0, r in g1 } r in g1 ==> !(r in g0) )

define is_global_root(g,root)
    forall n:Ref :: { exists_path($$(g),root,n) } n in g ==> exists_path($$(g),root,n)

define is_global_sroot(g,roots)
    forall n:Ref :: { exists_spath($$(g),roots,n), n in g } n in g ==> exists_spath($$(g),roots,n)

define is_global_sink(g,sink)
    forall n:Ref :: { exists_path($$(g),n,sink) } n in g ==> exists_path($$(g),n,sink)

define acyclic_list_segment(g)
    acyclic_graph($$(g)) &&
    func_graph($$(g)) &&
    unshared_graph($$(g))


function apply_TCFraming(g0:Set[Ref], g1:Set[Ref]): Bool
    //requires GRAPH(g0) && GRAPH(g1)
    requires forall n:Ref :: {n.next} n in g0 ==> acc(n.next, 1/2)
    requires forall n:Ref :: {n.next} n in g1 ==> acc(n.next, 1/2)

    requires g1 intersection g0 == Set()

    // needed for triggering
    ensures g0 union g1 == g1 union g0

    // FIXME: Triggers in the following formulas are under question.
    ensures forall u:Ref, v:Ref :: { exists_path($$(g0),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g0 && v in g0 && exists_path($$(g0),u,v) ==> exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g1),u,v) }{ exists_path($$(g1 union g0),u,v) } u in g1 && v in g1 && exists_path($$(g1),u,v) ==> exists_path($$(g1 union g0),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g0),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g0 && v in g0 && !exists_path($$(g0),u,v) ==> !exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g1),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g1 && v in g1 && !exists_path($$(g1),u,v) ==> !exists_path($$(g1 union g0),u,v)

method link(g:Set[Ref], x:Ref, y:Ref)
    requires x in g
    requires y != null ==> y in g
    requires PROTECTED_GRAPH(g,x)
    requires x.next == null
    ensures PROTECTED_GRAPH(g,x)
    ensures x.next == y
    ensures y == null ==> $$(g) == old($$(g))
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { edge(old($$(g)),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) || (v1==x && v2==y)
    ensures y != null ==> (forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
            (v1 != v2) ==> (
                exists_path($$(g),v1,v2) <==>
                    exists_path(old($$(g)),v1,v2) || (exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),y,v2))))

method unlink(g:Set[Ref], x:Ref)
    requires x in g
    requires PROTECTED_GRAPH(g,x)
    ensures PROTECTED_GRAPH(g,x)
    ensures x.next == null
    ensures old(x.next) == null ==> $$(g) == old($$(g))
    ensures old(x.next) != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) && !(v1==x && v2==old(x.next))
    ensures old(x.next) != null ==> (forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
            (v1 != v2) ==> (
                exists_path($$(g),v1,v2) <==>
                    exists_path(old($$(g)),v1,v2) && !(exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),old(x.next),v2))))


method swap(g:Set[Ref], x:Ref, i:Int, j:Int)
    // value parameters
    requires 0 <= i && i < j

    // memory safety
    requires x in g
    requires GRAPH(g)

    // reachability
    requires acyclic_list_segment(g)
    requires is_global_root(g,x)
{
    var count:Int := 0

    var prev_node:Ref := x
    var node:Ref := x.next

    var prev_i:Ref := null
    var node_i:Ref := null

    while ( node != null && count <= j )
        // value parameters
        invariant 0 <= i && i < j

        // counter variables
        invariant 0 <= count

        // memory safety
        invariant x in g
        invariant GRAPH(g)

        // nodes
        invariant node != null ==> node in g
        invariant count <= j ==> prev_node in g
        invariant i < count ==> node_i in g && prev_i in g
        invariant count <= j ==> prev_node.next == node

        // triggering
        //invariant node != null ==> exists_path($$(g),node,node) && exists_path($$(g),prev_node,node)


        // reachability
        invariant acyclic_list_segment(g)
        invariant is_global_root(g,x)

        invariant node_i != null ==> exists_path($$(g),prev_i,node_i)
        invariant node_i != null ==> exists_path($$(g),node_i,prev_node)
        invariant node != null ==> exists_path($$(g),prev_node,node)
    {

        //assert false


        // phase i: count < i
        if ( count == i )
        {
            // phase ii: count == i
            node_i := node
            prev_i := prev_node
        }
        // phase iii: i < count < j
        if ( count == j )
        {
            // phase iv: count == j
            var node_j:Ref := node
            var prev_j:Ref := prev_node
            var exit:Ref := node_j.next

            // -- swap node_i and node_j --

            //prev_i.next := node_j
            unlink(g,prev_i)
            link(g,prev_i,node_j)
            if ( node_i.next != node_j ) {
                // node_j.next := node_i.next
                unlink(g,node_j)
                link(g,node_j,node_i.next)
                // prev_j.next := node_i
                unlink(g,prev_j)
                link(g,prev_j,node_i)

            } else { // node_i == prev_j
                //node_j.next := node_i
                unlink(g,node_j)
                  link(g,node_j,node_i)
            }
            //node_i.next := exit
            unlink(g,node_i)
              link(g,node_i,exit)
        }

        prev_node := node
        node := node.next
        count := count + 1

        // why can this not be moved to the invariant? :-(
        // or it can be moved, but with 3x perf drop
        assert node != null ==> exists_path($$(g),node,node) && exists_path($$(g),prev_node,node)
    }
}