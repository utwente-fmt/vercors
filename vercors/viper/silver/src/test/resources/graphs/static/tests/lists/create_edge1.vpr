domain Edge {
    function edge_pred(e:Edge): Ref
    function edge_succ(e:Edge): Ref

    function create_edge(p:Ref, s:Ref): Edge
    function create_edge_(p:Ref, s:Ref): Edge

    axiom edge_injectivity {
        forall p:Ref, s:Ref ::
            { create_edge(p,s) }
                edge_pred( create_edge(p,s) ) == p &&
                edge_succ( create_edge(p,s) ) == s
    }
}

domain TrClo {

    function exists_path(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_path_(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_spath(EG:Set[Edge], from:Set[Ref], to:Ref): Bool

    /// U is the universe;
    /// EG is the edge graph (specifies the edge relation)
    /// A is the color predicate
    /// M is the marker
    function apply_noExit(EG:Set[Edge], U:Set[Ref], M:Set[Ref]): Bool
    //function apply_goOut(EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref]): Bool
    //function apply_newStart(U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge]): Bool

    /** axiomatization of the set for instantiating color axioms with unary reachability */
    function inst_uReach(EG:Set[Edge], x:Ref): Set[Ref]

    /** The properties of the edge relation. */
    function acyclic_graph(EG:Set[Edge]): Bool
    function unshared_graph(EG:Set[Edge]): Bool
    function func_graph(EG:Set[Edge]): Bool


    function edge(EG:Set[Edge], p:Ref, s:Ref): Bool
    function edge_(EG:Set[Edge], p:Ref, s:Ref): Bool

    axiom ax_EdgeSynonim {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { edge(EG,p,s) }
                edge(EG,p,s) <==> edge_(EG,p,s)
    }
    axiom ax_Edge {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { create_edge(p,s) in EG }
            { edge(EG,p,s) }
                edge_(EG,p,s) <==> create_edge(p,s) in EG
    }

    // The first color axiom from the paper. (Via Refs)
    axiom ax_NoExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }

    /*
    axiom ax_NoTCExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noTCExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noTCExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }
    */
    /*
    // TODO: revise the triggers!
    axiom ax_GoOut {
        forall EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref] :: { apply_goOut(EG,U,A,B) }
        // apply_goOut(EG,U,A,B) &&
        ( apply_goOut(EG,U,A,B) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in A, v in A }{ u in A, v in B } (u in A) && (v in U) && !(v in A) && edge(EG,u,v) ==> v in B ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in A, v in A }            (u in A) && (v in U) && !(v in A) && exists_path(EG,u,v) ==> exists w:Ref :: w in B && exists_path(EG,u,w) && exists_path(EG,w,v) )
        ) )
    }

    axiom ax_NewStart {
        forall U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge] :: { apply_newStart(U,A,EG1,EG2) }
        // apply_newStart(U,A,EG1,EG2) &&
        ( apply_newStart(U,A,EG1,EG2) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG1,u,v) }{ u in A, v in A } (u in A) && (v in A) && edge(EG2,u,v) ==> edge(EG1,u,v) )  ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG1,u,v) }{ exists_path(EG2,u,v) } exists_path(EG2,u,v) && !exists_path(EG1,u,v) ==> exists w:Ref :: (w in U) && !(w in A) && exists_path(EG2,u,w) && exists_path(EG2,w,v) )
        ) )
    }
    */

    axiom ax_instantiation_uReach {
        forall EG:Set[Edge], x:Ref, v: Ref ::
            { v in inst_uReach(EG,x) }
            { exists_path(EG,x,v) }
                v in inst_uReach(EG,x) <==> exists_path(EG,x,v)
    }

    axiom ax_Alias {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
                exists_path(EG,start,end) <==> exists_path_(EG,start,end)
    }

    /** T1 -- Ref-oriented encoding */
    axiom ax_ExistsPath {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_(EG,start,end) <==>
                    start == end
                    || exists w:Ref :: edge(EG,start,w) && exists_path_(EG,w,end)
    }

    /** Follows from T1 && IND */
    axiom ax_ExistsPathTrans {
        forall EG:Set[Edge], u:Ref, v:Ref, w:Ref ::
            { exists_path(EG,u,w), exists_path(EG,w,v) }
                exists_path_(EG,u,w) && exists_path_(EG,w,v) ==> exists_path_(EG,u,v)
    }

    axiom ax_AcyclicGraph {
        forall EG:Set[Edge] ::
            { acyclic_graph(EG) }
                acyclic_graph(EG) <==>
                    forall v1:Ref, v2:Ref ::
                        { edge(EG,v1,v2) }
                        { exists_path(EG,v2,v1) }
                            !edge(EG,v1,v2) || !exists_path(EG,v2,v1)
    }

    axiom ax_UnsharedGraph {
        forall EG:Set[Edge] ::
            { unshared_graph(EG) }
                unshared_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        { edge(EG,v1,v), edge(EG,v2,v) }
                            edge(EG,v1,v) && edge(EG,v2,v) ==> v1 == v2
    }

    axiom ax_FuncGraph {
        forall EG:Set[Edge] ::
            { func_graph(EG) }
                func_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        //{ edge(EG,v1,v), edge(EG,v2,v) }
                        { edge(EG,v,v1), edge(EG,v,v2) }
                            edge(EG,v,v1) && edge(EG,v,v2) ==> v1 == v2
    }
}

domain FramingWisdoms {
    // This axiom is needed exclusively for the purpose of triggering.
    /*
    axiom ax_SetIntersection {
        forall g0:Set[Ref], g1:Set[Ref] ::
            { g0 intersection g1 }
                g0 intersection g1 == Set() ==> forall r:Ref :: { r in g0, r in g1 } r in g0 && r in g1 ==> r in Set()
    }
    */

    // This axiom is needed exclusively for the purpose of triggering.
    /*
    axiom ax_EdgeReverse {
        forall g:Set[Edge], e:Edge ::
            { e in g }
                e in g ==> create_edge(edge_pred(e), edge_succ(e)) == e
    }
    */
}

field next:Ref

/*
// Purification of the entire (edge) graph.
function $$(refs:Set[Ref]): Set[Edge]
    requires forall n:Ref :: {n.next} n in refs ==> acc(n.next,1/2)
    //requires GRAPH(refs)
    ensures forall p:Ref, s:Ref ::
        { create_edge(p,s) }
        //{ p in refs, s in refs }
            p in refs && s in refs && p.next == s
            <==> create_edge(p,s) in result
    // This is wisdom_PathStartEndMustRemainInGraph
    // TODO: why is this sound?
    ensures forall p:Ref, s:Ref ::
        { p in refs, s in refs, exists_path(result,p,s) }
            p in refs && exists_path(result,p,s) ==> s in refs
    ensures forall p:Ref, s:Ref ::
        { p in refs, s in refs, exists_path(result,p,s) }
            s in refs && exists_path(result,p,s) ==> p in refs
*/
// Purification of the entire (edge) graph.
function $$(refs:Set[Ref]): Set[Edge]
    requires forall n:Ref :: {n.next} n in refs ==> acc(n.next,1/2)
    //requires GRAPH(refs)
    ensures forall p:Ref, s:Ref ::
        { create_edge(p,s) }
        //{ p in refs, s in refs }
            p in refs && s in refs && p.next == s
            <==> create_edge(p,s) in result
    // This is wisdom_PathStartEndMustRemainInGraph
    // TODO: why is this sound?
    ensures forall p:Ref, s:Ref ::
        { p in refs, s in refs, exists_path(result,p,s) }
            p in refs && exists_path(result,p,s) ==> s in refs
    ensures forall p:Ref, s:Ref ::
        { p in refs, s in refs, exists_path(result,p,s) }
            s in refs && exists_path(result,p,s) ==> p in refs


define GRAPH(nodes)
    !(null in nodes)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes && n.next != null ==> n.next in nodes )

define disjoint_sets(g0, g1)
    ( forall r:Ref :: { r in g0, r in g1 } r in g0 ==> !(r in g1) ) &&
    ( forall r:Ref :: { r in g0, r in g1 } r in g1 ==> !(r in g0) )

define is_global_root(g,root)
    forall n:Ref :: { exists_path($$(g),root,n) } n in g ==> exists_path($$(g),root,n)

define is_global_sroot(g,roots)
    forall n:Ref :: { exists_spath($$(g),roots,n), n in g } n in g ==> exists_spath($$(g),roots,n)

define acyclic_list_segment(g)
    acyclic_graph($$(g)) &&
    func_graph($$(g)) &&
    unshared_graph($$(g))


function apply_TCFraming(g0:Set[Ref], g1:Set[Ref]): Bool
    //requires GRAPH(g0) && GRAPH(g1)
    requires forall n:Ref :: {n.next} n in g0 ==> acc(n.next)
    requires forall n:Ref :: {n.next} n in g1 ==> acc(n.next)

    requires g1 intersection g0 == Set()

    // needed for triggering
    ensures g0 union g1 == g1 union g0

    // FIXME: Triggers in the following formulas are under question.
    ensures forall u:Ref, v:Ref :: { exists_path($$(g0),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g0 && v in g0 && exists_path($$(g0),u,v) ==> exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g1),u,v) }{ exists_path($$(g1 union g0),u,v) } u in g1 && v in g1 && exists_path($$(g1),u,v) ==> exists_path($$(g1 union g0),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g0),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g0 && v in g0 && !exists_path($$(g0),u,v) ==> !exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g1),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g1 && v in g1 && !exists_path($$(g1),u,v) ==> !exists_path($$(g1 union g0),u,v)


define PROTECTED_GRAPH(nodes, mutable_node)
    !(null in nodes)
    && ( mutable_node in nodes )
    && acc(mutable_node.next, write)
    && ( forall n:Ref :: {n.next} n in nodes && n != mutable_node ==> acc(n.next,1/2) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes && n.next != null ==> n.next in nodes )

/*
method link(g:Set[Ref], x:Ref, y:Ref)
    requires x in g
    requires y != null ==> y in g
    requires PROTECTED_GRAPH(g,x)
    requires x.next == null
    ensures PROTECTED_GRAPH(g,x)
    ensures x.next == y
    ensures y == null ==> $$(g) == old($$(g))
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { edge(old($$(g)),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) || (v1==x && v2==y)
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
            exists_path($$(g),v1,v2) <==> exists_path(old($$(g)),v1,v2) || (exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),y,v2))
*/

define PROTECTED_GRAPH(nodes, mutable_node)
    !(null in nodes)
    && ( mutable_node in nodes )
    && acc(mutable_node.next, write)
    && ( forall n:Ref :: {n.next} n in nodes && n != mutable_node ==> acc(n.next,1/2) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes && n.next != null ==> n.next in nodes )

method link(g:Set[Ref], x:Ref, y:Ref)
    requires x in g
    requires y != null ==> y in g
    requires PROTECTED_GRAPH(g,x)
    requires x.next == null
    ensures PROTECTED_GRAPH(g,x)
    ensures x.next == y
    ensures y == null ==> $$(g) == old($$(g))
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { edge(old($$(g)),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) || (v1==x && v2==y)
    ensures y != null ==> (forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
            (v1 != v2) ==> (
                exists_path($$(g),v1,v2) <==>
                    exists_path(old($$(g)),v1,v2) || (exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),y,v2))))

method unlink(g:Set[Ref], x:Ref)
    requires x in g
    requires PROTECTED_GRAPH(g,x)
    ensures PROTECTED_GRAPH(g,x)
    ensures x.next == null
    ensures old(x.next) == null ==> $$(g) == old($$(g))
    ensures old(x.next) != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) && !(v1==x && v2==old(x.next))
    ensures old(x.next) != null ==> (forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
            (v1 != v2) ==> (
                exists_path($$(g),v1,v2) <==>
                    exists_path(old($$(g)),v1,v2) && !(exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),old(x.next),v2))))


method join(g0:Set[Ref], g1:Set[Ref], x0:Ref, x1:Ref) returns (x:Ref, last:Ref)
    requires GRAPH(g0)
    requires x0 in g0

    requires GRAPH(g1)
    requires x1 in g1

    requires disjoint_sets(g0,g1)

    requires acyclic_list_segment(g0)
    requires acyclic_list_segment(g1)

    requires is_global_root(g0,x0)
    requires is_global_root(g1,x1)

    ensures GRAPH(g0 union g1)
    ensures forall u:Ref :: exists_path($$(g0 union g1),x,u) <==> exists_path(old($$(g0)),x0,u) || exists_path(old($$(g1)),x1,u)
    ensures forall u:Ref, v:Ref :: edge($$(g0 union g1),u,v) <==> edge(old($$(g0)),u,v) || edge(old($$(g1)),u,v) || (u==last && v==x1)
    ensures acyclic_list_segment(g0 union g1)
{
    last := x0
    if ( last == null ) {
        x := x1
    } else {
        while ( last.next != null )
            // Preserving the info from the precondition:
            invariant GRAPH(g0)
            invariant x0 in g0

            invariant GRAPH(g1)
            invariant x1 in g1

            invariant disjoint_sets(g0,g1)

            invariant acyclic_list_segment(g0)
            invariant acyclic_list_segment(g1)

            invariant is_global_root(g0,x0)
            invariant is_global_root(g1,x1)

            // Counter variable:
            invariant last in g0

            // The loop does not mutate the graph's edges
            invariant $$(g0) == old($$(g0))
            invariant $$(g1) == old($$(g1))
        {
            last := last.next
        }

        // The NoExit axiom applications can be inlined:
        //assume apply_noExit($$(g0 union g1), g0 union g1, g0)
        //assume apply_noExit($$(g0 union g1), g0 union g1, g1)
        assume forall u:Ref,v:Ref :: { exists_path($$(g0 union g1),u,v), u in g0, v in g0 } u in g0 && !(v in g0) ==> !exists_path($$(g0 union g1),u,v)
        assume forall u:Ref,v:Ref :: { exists_path($$(g0 union g1),u,v), u in g1, v in g1 } u in g1 && !(v in g1) ==> !exists_path($$(g0 union g1),u,v)
        assume apply_TCFraming(g0,g1)

        link(g0 union g1,last,x1)
    }
    x := x0
}
