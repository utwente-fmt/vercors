/**

    Transitive Closure Example #2: the list-append method.

    Based on SIMULATING REACHABILITY USING FIRST-ORDER LOGIC

    https://arxiv.org/pdf/0904.4902.pdf

    Oct 21, 2017

 */

domain Edge {
    function edge_pred(e:Edge): Ref
    function edge_succ(e:Edge): Ref

    function create_edge(p:Ref, s:Ref): Edge
    function create_edge_(p:Ref, s:Ref): Edge

    axiom edge_injectivity {
        forall p:Ref, s:Ref ::
            { create_edge(p,s) }
                edge_pred( create_edge(p,s) ) == p &&
                edge_succ( create_edge(p,s) ) == s
    }
}

/** Establishing the edge relation. */
//define edge(EG,p,s) ( create_edge(p,s) in EG )

domain TrClo {

    function exists_path(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_path_(EG:Set[Edge], start:Ref, end:Ref): Bool

    function exists_path_2(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_path_2_(EG:Set[Edge], start:Ref, end:Ref): Bool

    function is_on_path(EG:Set[Edge], start:Ref, w:Ref, end:Ref): Bool

    /// U is the universe;
    /// EG is the edge graph (specifies the edge relation)
    /// A is the color predicate
    /// M is the marker
    function apply_IND(EG:Set[Edge], Z:Set[Ref], P:Set[Ref]): Bool
    function apply_IND_2(EG:Set[Edge], Z:Set[Ref], P:Set[Ref]): Bool
    function apply_noExit(EG:Set[Edge], U:Set[Ref], M:Set[Ref]): Bool
    function apply_goOut(EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref]): Bool
    function apply_newStart(U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge]): Bool

    /** axiomatization of the set for instantiating color axioms with unary reachability */
    function inst_uReach(EG:Set[Edge], x:Ref): Set[Ref]

    function inst_uReach_2(EG:Set[Edge], x:Ref): Set[Ref]

    function inst_uReach_rev(EG:Set[Edge], x:Ref): Set[Ref]

    /** The properties of the edge relation. */
    function acyclic_graph(EG:Set[Edge]): Bool
    function unshared_graph(EG:Set[Edge]): Bool
    function func_graph(EG:Set[Edge]): Bool


    function edge(EG:Set[Edge], p:Ref, s:Ref): Bool
    function edge_(EG:Set[Edge], p:Ref, s:Ref): Bool

    axiom ax_EdgeSynonim {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { edge(EG,p,s) }
                edge(EG,p,s) <==> edge_(EG,p,s)
    }
    axiom ax_Edge {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { create_edge(p,s) in EG }
            { edge(EG,p,s) }
                edge_(EG,p,s) <==> create_edge(p,s) in EG
    }

    /*
    // The first color axiom from the paper. (Via Refs)
    axiom ax_NoExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }

    // TODO: revise the triggers!
    axiom ax_GoOut {
        forall EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref] :: { apply_goOut(EG,U,A,B) }
        // apply_goOut(EG,U,A,B) &&
        ( apply_goOut(EG,U,A,B) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in A, v in A }{ u in A, v in B } (u in A) && (v in U) && !(v in A) && edge(EG,u,v) ==> v in B ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in A, v in A }            (u in A) && (v in U) && !(v in A) && exists_path(EG,u,v) ==> exists w:Ref :: w in B && exists_path(EG,u,w) && exists_path(EG,w,v) )
        ) )
    }

    axiom ax_NewStart {
        forall U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge] :: { apply_newStart(U,A,EG1,EG2) }
        // apply_newStart(U,A,EG1,EG2) &&
        ( apply_newStart(U,A,EG1,EG2) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG1,u,v) }{ u in A, v in A } (u in A) && (v in A) && edge(EG2,u,v) ==> edge(EG1,u,v) )  ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG1,u,v) }{ exists_path(EG2,u,v) } exists_path(EG2,u,v) && !exists_path(EG1,u,v) ==> exists w:Ref :: (w in U) && !(w in A) && exists_path(EG2,u,w) && exists_path(EG2,w,v) )
        ) )
    }*/

    // IND -- Ref-oriented encoding
    axiom ax_InductionPrinciple {
        forall EG:Set[Edge], Z:Set[Ref], P:Set[Ref] :: { apply_IND(EG,Z,P) }
        // apply_IND(EG,Z,P) &&
        ( apply_IND(EG,Z,P) ==> (

                ( ( forall z:Ref:: { z in Z }{ z in P } (z in Z) ==> (z in P) ) && ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in P, v in P } (u in P) && edge(EG,u,v) ==> (v in P) ) ) ==>
                ( forall u:Ref,z:Ref :: {exists_path(EG,z,u)}{z in Z, u in P} (z in Z) && exists_path(EG,z,u) ==> (u in P) )
        ) )
    }

   axiom ax_InductionPrinciple_2 {
        forall EG:Set[Edge], Z:Set[Ref], P:Set[Ref] :: { apply_IND_2(EG,Z,P) }
        // apply_IND_2(EG,Z,P) &&
        ( apply_IND_2(EG,Z,P) ==> (

                ( ( forall z:Ref:: { z in Z }{ z in P } (z in Z) ==> (z in P) ) && ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in P, v in P } edge(EG,u,v) && (v in P) ==> (u in P) ) ) ==>
                ( forall u:Ref,z:Ref :: {exists_path_2(EG,z,u)}{z in Z, u in P} (z in Z) && exists_path_2(EG,u,z) ==> (u in P) )
        ) )
    }

    axiom ax_instantiation_uReach_rev {
        forall EG:Set[Edge], u: Ref, y:Ref ::
            { u in inst_uReach_rev(EG,y) }
            { exists_path(EG,u,y) }
                u in inst_uReach_rev(EG,y) <==> exists_path(EG,u,y)
    }

    axiom ax_instantiation_uReach_2 {
        forall EG:Set[Edge], x:Ref, v: Ref ::
            { v in inst_uReach_2(EG,x) }
            { exists_path_2(EG,x,v) }
                v in inst_uReach_2(EG,x) <==> exists_path_2(EG,x,v)
    }

    axiom ax_instantiation_uReach {
        forall EG:Set[Edge], x:Ref, v: Ref ::
            { v in inst_uReach(EG,x) }
            { exists_path(EG,x,v) }
                v in inst_uReach(EG,x) <==> exists_path(EG,x,v)
    }

    axiom ax_Alias {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
                exists_path(EG,start,end) <==> exists_path_(EG,start,end)
    }

    axiom ax_Alias_2 {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path_2(EG,start,end) }
                exists_path_2(EG,start,end) <==> exists_path_2_(EG,start,end)
    }

    /*
    axiom ax_IsOnPath {
        forall EG:Set[Edge], start:Ref, mid:Ref, end:Ref ::
            { is_on_path(EG,start,mid,end) }
            { edge(EG,start,mid), exists_path_(EG,mid,end) }
                is_on_path(EG,start,mid,end) <==> edge(EG,start,mid) && exists_path_(EG,mid,end)
    }*/

    /** T1 -- Ref-oriented encoding */
    axiom ax_ExistsPath {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_(EG,start,end) <==>
                    start == end
                    || exists w:Ref :: edge(EG,start,w) && exists_path_(EG,w,end)
    }

    axiom ax_ExistsPath_2 {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path_2(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_2_(EG,start,end) <==>
                    start == end
                    || exists w:Ref :: exists_path_2_(EG,start,w) && edge(EG,w,end)
    }

    /* Follows from T1 && IND */
    axiom ax_ExistsPathTrans {
        forall EG:Set[Edge], u:Ref, v:Ref, w:Ref ::
            { exists_path(EG,u,w), exists_path(EG,w,v) }
                exists_path_(EG,u,w) && exists_path_(EG,w,v) ==> exists_path_(EG,u,v)
    }

    axiom ax_FuncGraph {
        forall EG:Set[Edge] ::
            { func_graph(EG) }
                func_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        //{ edge(EG,v1,v), edge(EG,v2,v) }
                        { edge(EG,v,v1), edge(EG,v,v2) }
                            edge(EG,v,v1) && edge(EG,v,v2) ==> v1 == v2
    }

    axiom ax_UnsharedGraph {
        forall EG:Set[Edge] ::
            { unshared_graph(EG) }
                unshared_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        { edge(EG,v1,v), edge(EG,v2,v) }
                            edge(EG,v1,v) && edge(EG,v2,v) ==> v1 == v2
    }

    axiom ax_AcyclicGraph {
        forall EG:Set[Edge] ::
            { acyclic_graph(EG) }
                acyclic_graph(EG) <==>
                    forall v1:Ref, v2:Ref ::
                        { edge(EG,v1,v2) }
                        { exists_path(EG,v2,v1) }
                            !edge(EG,v1,v2) || !exists_path(EG,v2,v1)
    }



    /*
    axiom ax_ReachabilityFramingDel {
        forall EG1:Set[Edge], EG2:Set[Edge], p:Ref, s:Ref ::
            { exists_path(EG1 setminus EG2,p,s) }
                exists_path_(EG1 setminus EG2,p,s) ==> exists_path_(EG1,p,s)
    }

    axiom ax_ReachabilityFraming {
        forall EG1:Set[Edge], EG2:Set[Edge], p:Ref, s:Ref ::
            { exists_path(EG1 union EG2,p,s) }
                exists_path_(EG1,p,s) ==> exists_path_(EG1 union EG2,p,s)
    }*/
}



/*
define acyclic_graph(EG)
    ( forall v1:Ref, v2:Ref ::
        { edge(EG,v1,v2) }
        { exists_path(EG,v2,v1) }
            !edge(EG,v1,v2) || !exists_path(EG,v2,v1) )*/
/*
define unshared_graph(EG)
    ( forall v1:Ref, v2:Ref, v:Ref ::
        { edge(EG,v1,v), edge(EG,v2,v) }
            edge(EG,v1,v) && edge(EG,v2,v) ==> v1 == v2 )
*/


field next:Ref

// Purification of the entire (edge) graph.
function $$(refs:Set[Ref]): Set[Edge]
    requires forall n:Ref :: {n.next} n in refs ==> acc(n.next)
    ensures forall p:Ref, s:Ref ::
        { create_edge(p,s) }
        //{ edge(result,p,s) }
            p in refs && s in refs && p.next == s
            <==> create_edge(p,s) in result

define GRAPH(nodes)
    !(null in nodes)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes && n.next != null ==> n.next in nodes )


method link(g:Set[Ref], x:Ref, y:Ref)
    requires x in g
    requires y != null ==> y in g
    requires GRAPH(g)
    ensures GRAPH(g)
    ensures x.next == y
    ensures y == null ==> $$(g) == old($$(g))
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { edge(old($$(g)),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) || (v1==x && v2==y)
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
            exists_path($$(g),v1,v2) <==> exists_path(old($$(g)),v1,v2) || (exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),y,v2))




method lemma_T2_a(g:Set[Ref], u:Ref, v:Ref)
    requires GRAPH(g)
    requires u in g && v in g
    requires exists_path($$(g),u,v)
    ensures GRAPH(g)
    ensures exists_path_2($$(g),u,v)
{
    assume apply_IND($$(g), Set(u), inst_uReach_2($$(g),u))
}

method lemma_T2_b(g:Set[Ref], u:Ref, v:Ref)
    requires GRAPH(g)
    requires u in g && v in g
    requires exists_path_2($$(g),u,v)
    ensures GRAPH(g)
    ensures exists_path($$(g),u,v)
{
    assume apply_IND_2($$(g), Set(v), inst_uReach_rev($$(g),v))
}

method test_trans(g:Set[Ref], u:Ref, w:Ref, v:Ref)
    requires GRAPH(g)
    requires u in g && w in g && v in g
    requires exists_path($$(g),u,w) && exists_path($$(g),w,v)
    ensures GRAPH(g)
    ensures exists_path($$(g),u,v)
{
    TRANSITIVITY_WISDOM(g,u,w,v)
}

define TRANSITIVITY_WISDOM(g,u,w,v) {
    assume apply_IND_2($$(g), Set(w), inst_uReach_rev($$(g),v))
    assume apply_IND($$(g), Set(u), inst_uReach_2($$(g),u))
}



method append(g:Set[Ref], x:Ref, y:Ref) returns (res:Ref, last:Ref)

    requires GRAPH(g)
    requires x in g && y in g && x != y

    requires forall n:Ref :: n in g ==> ( exists_path($$(g),x,n) ||  exists_path($$(g),y,n))
    requires forall n:Ref :: n in g ==> (!exists_path($$(g),x,n) || !exists_path($$(g),y,n))


    requires acyclic_graph($$(g))
    requires func_graph($$(g))
    requires unshared_graph($$(g))
{
    var old_g:Set[Edge] := $$(g)

    //assert false

    last := x

    //assume last.next != null ==> apply_IND_2($$(g), Set(last), inst_uReach_rev($$(g),last.next))
    //assume last.next != null ==> apply_IND(  $$(g), Set(x), inst_uReach_2($$(g),x))

    if ( last == null ) {

        res := y

    } else {

        while ( last.next != null )
            invariant GRAPH(g)
            invariant last in g
            invariant x in g && y in g

            invariant forall n:Ref :: n in g ==> ( exists_path($$(g),x,n) ||  exists_path($$(g),y,n))
            invariant forall n:Ref :: n in g ==> (!exists_path($$(g),x,n) || !exists_path($$(g),y,n))

            invariant acyclic_graph($$(g))
            //invariant func_graph($$(g))
            invariant unshared_graph($$(g))

            invariant $$(g) == old_g

            // Introducing the whitnesses for the existential quantifiers:
            invariant exists_path($$(g),x,last)
                      && ( last.next != null ==> edge($$(g),last,last.next) && exists_path($$(g),last.next,last.next) ==> exists_path($$(g),last,last.next) )
        {
            assume last.next != null ==> apply_IND_2($$(g), Set(last), inst_uReach_rev($$(g),last.next))
            assume last.next != null ==> apply_IND(  $$(g), Set(x), inst_uReach_2($$(g),x))
            last := last.next
            //assert false
        }


        //last.next := y
        link(g,last,y)

        //assert edge($$(g),last,y)

        //assume forall n:Ref :: {n in g} n in g ==> ( exists_path($$(g),x,n) ||  exists_path($$(g),y,n))
        //assume forall n:Ref :: {n in g} n in g ==> (!exists_path($$(g),x,n) || !exists_path($$(g),y,n))

        /*
        assert func_graph($$(g))
        assert forall v1:Ref, v2:Ref :: exists_path($$(g),v1,v2) <==> exists_path(old_g,v1,v2) || (exists_path(old_g,v1,last) && exists_path(old_g,y,v2))

        assert forall n:Ref :: n in g ==> (!exists_path(old_g,x,n) || !exists_path(old_g,y,n))
        assert forall n:Ref :: n in g ==> (exists_path(old_g,y,n) ==> !exists_path(old_g,x,n))

        assert exists_path(old_g,x,last)
        assert !exists_path(old_g,y,last)

        var v_:Ref
        //assume exists_path(old_g,y,v_)
        //TRANSITIVITY_WISDOM(g,y,v_,last)
        */

        //assert false

        //assert forall v1:Ref :: v1 in g ==> (exists_path(old_g,y,v1) ==> !exists_path(old_g,v1,last))

        ///assume apply_IND_2($$(g), Set(last), inst_uReach_rev($$(g),y))
        ///assume apply_IND(  $$(g), Set(x), inst_uReach_2($$(g),x))

        ///assume apply_IND_2(old_g, Set(last), inst_uReach_rev(old_g,y))
        ///assume apply_IND(  old_g, Set(x), inst_uReach_2(old_g,x))


        //assert forall v1:Ref, v2:Ref, v:Ref :: edge(old_g,v1,v) && edge(old_g,v2,v) ==> v1 == v2

        /*
        assert forall v1:Ref, v2:Ref :: exists_path(old_g,v1,v2) <==> v1==v2 || ( exists w:Ref :: edge(old_g,v1,w) && exists_path(old_g,w,v2) )


        assert forall v1:Ref, v2:Ref, v:Ref :: v != y && v1 != last && v2 != last && edge($$(g),v1,v) && edge($$(g),v2,v) ==> v1 == v2

        assert edge($$(g),last,y)
        */

        //assert edge($$(g),last,y)

        //assert exists_path($$(g),last,y)


        //assert forall n:Ref :: n in g ==> ( exists_path(old_g,x,n) ||  exists_path(old_g,y,n))
        //assert forall n:Ref :: n in g ==> (!exists_path(old_g,x,n) || !exists_path(old_g,y,n))

        //assert exists_path(old_g,y,y)
        //assert !exists_path(old_g,x,y)

        //assert exists_path(old_g,x,last)

        //assert !edge(old_g,last,y)
        //assert  edge($$(g),last,y)

        //assert forall v1:Ref :: !edge(old_g,v1,y)

        //assert forall v1:Ref, v2:Ref :: edge($$(g),v1,v2) <==> edge(old_g,v1,v2) || (v1==last && v2==y)
        //assert forall v1:Ref, v2:Ref :: edge(old_g,v1,v2) || (v1==last && v2==y) ==> edge($$(g),v1,v2)
        //assert forall v1:Ref, v2:Ref :: !edge(old_g,v1,v2) && (v1!=last || v2!=y) || edge($$(g),v1,v2)
        //assert forall v1:Ref, v2:Ref :: !edge(old_g,v1,v2) && (v1!=last || v2!=y) || edge($$(g),v1,v2)

        //assert forall v1:Ref, v2:Ref :: !edge(old_g,v1,y) && v1!=last <==> !edge($$(g),v1,y)
        //assert forall v1:Ref, v2:Ref :: !edge($$(g),v1,y) <==> !edge(old_g,v1,y) && v1!=last
        //assert forall v1:Ref, v2:Ref :: edge($$(g),v1,y) <==> edge(old_g,v1,y) || v1==last
        //assert forall v1:Ref, v2:Ref :: edge($$(g),v1,y) && !edge(old_g,v1,y) ==>  v1==last

        //assert forall v1:Ref         :: !exists_path(old_g,v1,y) ==> !edge(old_g,v1,y)

        // Negated definition of TC[f] and the follow-up lemma
        assert forall u:Ref, v:Ref :: !exists_path($$(g),u,v) ==> u != v && forall w:Ref :: !edge($$(g),u,w) || !exists_path($$(g),w,v)
        assert forall u:Ref, v:Ref :: !exists_path($$(g),u,v) ==> !edge($$(g),u,v)

        //assert forall v1:Ref, v2:Ref :: exists_path(old_g,x,v1) ==> !edge(old_g,v1,y)



        //assert forall v1:Ref, v2:Ref :: v1 != last && v2 != last && edge($$(g),v1,y) && edge($$(g),v2,y) ==> v1 == v2
        //assert forall v1:Ref         :: exists_path(old_g,y,v1)  ==> !edge($$(g),v1,y)
        //assert forall v1:Ref         :: exists_path(old_g,x,v1)  && edge($$(g),v1,y)                     ==> v1 == last



        //assert forall v1:Ref, v2:Ref, v:Ref :: edge($$(g),v1,v) && edge($$(g),v2,v) ==> v1 == v2

        ///assert unshared_graph($$(g))


        //assert forall v:Ref :: v in g ==> ( !exists_path(old_g,y,v) ==> exists_path(old_g,x,v) )
        //assert forall u:Ref, v:Ref :: v in g && u in g ==> ( exists_path(old_g,y,u) &&  exists_path(old_g,x,v) ==> !exists_path($$(g),u,v) )


        //assert forall u:Ref, v:Ref :: !exists_path($$(g),u,v) ==> u != v && forall w:Ref :: !edge($$(g),u,w) || !exists_path($$(g),w,v)

        //assert forall u:Ref, v:Ref :: !exists_path($$(g),u,v) ==> !edge($$(g),u,v)
        //assert forall u:Ref, v:Ref :: v in g && u in g ==> ( exists_path(old_g,y,u) &&  exists_path(old_g,x,v) ==> !edge($$(g),u,v) )
        //assert forall u:Ref, v:Ref :: v in g && u in g ==> ( exists_path(old_g,y,u) && !exists_path(old_g,y,v) ==> !edge($$(g),u,v) )

        //assert forall u:Ref, v:Ref :: (u in inst_uReach(old_g,y)) && (v in g) && !(v in inst_uReach(old_g,y)) ==> !edge($$(g),u,v)
        //assert forall u:Ref, v:Ref :: (u in inst_uReach(old_g,y)) && (v in g) && !(v in inst_uReach(old_g,y)) ==> !exists_path($$(g),u,v)
        //assert forall u:Ref, v:Ref :: (u in inst_uReach(old_g,y)) && !(v in inst_uReach(old_g,y)) ==> !exists_path($$(g),u,v)



        //assert forall v1:Ref, v2:Ref :: !edge(old_g,v1,v2) || !exists_path(old_g,v2,v1)
        //assert forall v1:Ref, v2:Ref :: exists_path(old_g,v2,v1) ==> !edge(old_g,v1,v2)



        //assert forall v1:Ref, v2:Ref :: exists_path(old_g,x,v1) && exists_path(old_g,y,v2) && exists_path($$(g),v2,v1) ==> !edge($$(g),v1,v2)
        //assert forall v1:Ref, v2:Ref :: exists_path(old_g,x,v2) && exists_path(old_g,y,v1) && exists_path($$(g),v2,v1) ==> !edge($$(g),v1,v2)
        //assert forall v1:Ref, v2:Ref :: exists_path(old_g,x,v1) && exists_path(old_g,x,v2) && exists_path($$(g),v2,v1) ==> !edge($$(g),v1,v2)


        //assert forall v1:Ref, v2:Ref :: exists_path($$(g),v1,v2) <==> exists_path(old_g,v1,v2) || (exists_path(old_g,v1,last) && exists_path(old_g,y,v2))

        /*
        assert !edge(old_g,last,y)
        assert exists_path(old_g,x,last)
        assert !exists_path(old_g,last,y)
        assert !exists_path(old_g,y,last)
        assert forall v1:Ref :: exists_path(old_g,y,v1) ==> !exists_path(old_g,v1,last)


        assert forall v1:Ref, v2:Ref :: exists_path(old_g,y,v1) && exists_path(old_g,y,v2) && exists_path($$(g),v2,v1) ==> !edge($$(g),v1,v2)

        assert forall v1:Ref, v2:Ref :: exists_path($$(g),v2,v1) ==> !edge($$(g),v1,v2)
        assert forall v1:Ref, v2:Ref :: !edge($$(g),v1,v2) || !exists_path($$(g),v2,v1)
        */

    }
    res := x

    //assert acyclic_graph($$(g))

    // The color axiom. This is one way to dynamically instantiate axioms.
    // Instantiation: NoExit[r_y_f, f']
    //                  r_y_f :<==> inst_uReach(old_g,y)
    //                  f'    :<==> $$(g)
    // Signature: apply_noExit(EG:Set[Edge], U:Set[Ref], M:Set[Ref]): Bool
    //assume apply_noExit($$(g), g, inst_uReach(old_g,y))

    //assume apply_goOut($$(g), g, Set(last), Set(y))
    //assume apply_newStart(g, inst_uReach(old_g,x), old_g, $$(g))
    //assume apply_newStart(g, inst_uReach(old_g,y), old_g, $$(g))
    //assume apply_newStart(g, inst_uReach(old_g,x), $$(g), old_g)
    //assume apply_newStart(g, inst_uReach(old_g,y), $$(g), old_g)


    assert func_graph($$(g))
    assert acyclic_graph($$(g))
    assert unshared_graph($$(g))




    //assert forall u:Ref :: exists_path(old_g,x,u) ==> exists_path($$(g),x,u)
    //assert forall u:Ref :: exists_path(old_g,y,u) ==> exists_path($$(g),x,u)
    //assert x==res
    assert forall u:Ref :: exists_path($$(g),res,u) <==> exists_path(old_g,x,u) || exists_path(old_g,y,u)
    assert forall u:Ref, v:Ref :: edge($$(g),u,v) <==> edge(old_g,u,v) || (u==last && v==y)

    //assert false





}
