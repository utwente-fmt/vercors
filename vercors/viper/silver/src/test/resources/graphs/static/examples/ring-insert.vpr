domain Edge {
    function edge_pred(e:Edge): Ref
    function edge_succ(e:Edge): Ref

    function create_edge(p:Ref, s:Ref): Edge
    function create_edge_(p:Ref, s:Ref): Edge

    axiom edge_injectivity {
        forall p:Ref, s:Ref ::
            { create_edge(p,s) }
                edge_pred( create_edge(p,s) ) == p &&
                edge_succ( create_edge(p,s) ) == s
    }
}

domain TrClo {

    function exists_path(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_path_(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_spath(EG:Set[Edge], from:Set[Ref], to:Ref): Bool

    /// U is the universe;
    /// EG is the edge graph (specifies the edge relation)
    /// A is the color predicate
    /// M is the marker
    function apply_noExit(EG:Set[Edge], U:Set[Ref], M:Set[Ref]): Bool
    //function apply_goOut(EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref]): Bool
    //function apply_newStart(U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge]): Bool

    /** axiomatization of the set for instantiating color axioms with unary reachability */
    function inst_uReach(EG:Set[Edge], x:Ref): Set[Ref]
    function inst_uReach_rev(EG:Set[Edge], x:Ref): Set[Ref]

    /** The properties of the edge relation. */
    function acyclic_graph(EG:Set[Edge]): Bool
    function unshared_graph(EG:Set[Edge]): Bool
    function func_graph(EG:Set[Edge]): Bool


    function edge(EG:Set[Edge], p:Ref, s:Ref): Bool
    function edge_(EG:Set[Edge], p:Ref, s:Ref): Bool

    function succs(EG:Set[Edge], pred:Ref): Set[Ref]

    axiom ax_Succs {
        forall EG:Set[Edge], pred:Ref, succ:Ref ::
            { succ in succs(EG,pred) }
                succ in succs(EG,pred) <==> edge_(EG,pred,succ)
    }

    axiom ax_EdgeSynonim {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { edge(EG,p,s) }
                edge(EG,p,s) <==> edge_(EG,p,s)
    }
    axiom ax_Edge {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { create_edge(p,s) in EG }
            { edge(EG,p,s) }
                edge_(EG,p,s) <==> create_edge(p,s) in EG
    }

    // The first color axiom from the paper. (Via Refs)
    axiom ax_NoExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }

    /*
    axiom ax_NoTCExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noTCExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noTCExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }
    */
    /*
    // TODO: revise the triggers!
    axiom ax_GoOut {
        forall EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref] :: { apply_goOut(EG,U,A,B) }
        // apply_goOut(EG,U,A,B) &&
        ( apply_goOut(EG,U,A,B) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in A, v in A }{ u in A, v in B } (u in A) && (v in U) && !(v in A) && edge(EG,u,v) ==> v in B ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in A, v in A }            (u in A) && (v in U) && !(v in A) && exists_path(EG,u,v) ==> exists w:Ref :: w in B && exists_path(EG,u,w) && exists_path(EG,w,v) )
        ) )
    }

    axiom ax_NewStart {
        forall U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge] :: { apply_newStart(U,A,EG1,EG2) }
        // apply_newStart(U,A,EG1,EG2) &&
        ( apply_newStart(U,A,EG1,EG2) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG1,u,v) }{ u in A, v in A } (u in A) && (v in A) && edge(EG2,u,v) ==> edge(EG1,u,v) )  ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG1,u,v) }{ exists_path(EG2,u,v) } exists_path(EG2,u,v) && !exists_path(EG1,u,v) ==> exists w:Ref :: (w in U) && !(w in A) && exists_path(EG2,u,w) && exists_path(EG2,w,v) )
        ) )
    }
    */

    axiom ax_instantiation_uReach {
        forall EG:Set[Edge], x:Ref, v: Ref ::
            { v in inst_uReach(EG,x) }
            { exists_path(EG,x,v) }
                v in inst_uReach(EG,x) <==> exists_path(EG,x,v)
    }

    axiom ax_instantiation_uReach_rev {
        forall EG:Set[Edge], u: Ref, y:Ref ::
            { u in inst_uReach_rev(EG,y) }
            { exists_path(EG,u,y) }
                u in inst_uReach_rev(EG,y) <==> exists_path(EG,u,y)
    }

    axiom ax_Alias {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
                exists_path(EG,start,end) <==> exists_path_(EG,start,end)
    }

    /** T1 -- Ref-oriented encoding */
    axiom ax_ExistsPath {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_(EG,start,end) <==>
                    start == end
                    //|| ( succs(EG,start) intersection inst_uReach_rev(EG,end) != Set() )
                    || exists w:Ref :: edge(EG,start,w) && exists_path_(EG,w,end) // DEP(EG,start,end,start,w)
    }

    /** Follows from T1 && IND */
    axiom ax_ExistsPathTrans {
        forall EG:Set[Edge], u:Ref, v:Ref, w:Ref ::
            { exists_path(EG,u,w), exists_path(EG,w,v) }
            //{ exists_path(EG,u,v), exists_path(EG,u,w) }
                exists_path(EG,u,w) && exists_path(EG,w,v) ==> exists_path_(EG,u,v)
    }

    axiom ax_AcyclicGraph {
        forall EG:Set[Edge] ::
            { acyclic_graph(EG) }
                acyclic_graph(EG) <==>
                    forall v1:Ref, v2:Ref ::
                        { edge(EG,v1,v2) }
                        { exists_path(EG,v2,v1) }
                            !edge(EG,v1,v2) || !exists_path(EG,v2,v1)
    }

    axiom ax_UnsharedGraph {
        forall EG:Set[Edge] ::
            { unshared_graph(EG) }
                unshared_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        { edge(EG,v1,v), edge(EG,v2,v) }
                            edge(EG,v1,v) && edge(EG,v2,v) ==> v1 == v2
    }

    axiom ax_FuncGraph {
        forall EG:Set[Edge] ::
            { func_graph(EG) }
                func_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        //{ edge(EG,v1,v), edge(EG,v2,v) }
                        { edge(EG,v,v1), edge(EG,v,v2) }
                            edge(EG,v,v1) && edge(EG,v,v2) ==> v1 == v2
    }
}

// Purification of the entire (edge) graph.
function $$(refs:Set[Ref]): Set[Edge]
    requires forall n:Ref :: {n.next} n in refs ==> acc(n.next,1/2)
    //requires GRAPH(refs)
    ensures forall p:Ref, s:Ref ::
        { create_edge(p,s) }
        //{ p in refs, s in refs }
            p in refs && s in refs && p.next == s && p != s
            <==> create_edge(p,s) in result
    // This is wisdom_PathStartEndMustRemainInGraph
    ensures forall p:Ref, s:Ref ::
        { p in refs, s in refs, exists_path(result,p,s) }
            p in refs && exists_path(result,p,s) ==> s in refs
    ensures forall p:Ref, s:Ref ::
        { p in refs, s in refs, exists_path(result,p,s) }
            s in refs && exists_path(result,p,s) ==> p in refs


field next:Ref
field val:Int

 define GRAPH(nodes)
    !(null in nodes)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes && n.next != null ==> n.next in nodes )

define PROTECTED_GRAPH(nodes, mutable_node)
    !(null in nodes)
    && ( mutable_node in nodes )
    && acc(mutable_node.next, write)
    && ( forall n:Ref :: {n.next} n in nodes && n != mutable_node ==> acc(n.next,1/2) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes && n.next != null ==> n.next in nodes )

define RING(nodes)
    !(null in nodes)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes ==> n.next in nodes )

define PROTECTED_RING(nodes, mutable_node)
    !(null in nodes)
    && ( mutable_node in nodes )
    && acc(mutable_node.next, 1/2)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next, 1/2) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes ==> n.next in nodes )


define NODES(nodes)
    !(null in nodes)
    && ( forall n:Ref :: n in nodes ==> acc(n.next) )

define PRETECTED_NODES(nodes, mutable_node)
    !(null in nodes)
    && ( mutable_node in nodes )
    && acc(mutable_node.next, 1/2)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next, 1/2) )


/// TC[f] to DEP+1
/// 1) exists_path(EG,x,u) && edge(EG,u,v) && exists_path(EG,v,y) ==> DEP(EG,x,y,u,v)
/// 2) v==u.next
/// 3) y==u.next
/// ( implies )
/// exists_path(EG,x,u) ==> DEP(EG,x,u.next,u,u.next)

/// TC[f] to 1+DEP
/// 1) exists_path(EG,x,u) && edge(EG,u,v) && exists_path(EG,v,y) ==> DEP(EG,x,y,u,v)
/// 2) u==x
/// 3) v==x.next
/// ( implies )
/// exists_path(EG,x.next,y) ==> DEP(EG,x,y,x,x.next)
/// exists_path(EG,x,y)      ==> DEP(EG,x,y,x,x.next)

/// Assuming exists_path(EG,x,y)...
define TC_to_head_DEP(EG, x, y) DEP(EG,x,y,x,x.next)
define TC_to_tail_DEP(EG, x, y) DEP(EG,x,y.next,y,y.next)

define old__TC_to_head_DEP(lbl, EG, x, y) DEP(old[lbl](EG),x,y,x,old[lbl](x.next))
define old__TC_to_tail_DEP(lbl, EG, x, y) DEP(old[lbl](EG),x,old[lbl](y.next),y,old[lbl](y.next))


domain ZeroOnePathGraphTCs {

    function DEP(EG:Set[Edge], x:Ref, y:Ref, u:Ref, v:Ref): Bool
    function DEP_(EG:Set[Edge], x:Ref, y:Ref, u:Ref, v:Ref): Bool

    axiom ax_DEP_alias {
        forall EG:Set[Edge], x:Ref, y:Ref, u:Ref, v:Ref ::
            { DEP(EG,x,y,u,v) }
                DEP(EG,x,y,u,v) <==> DEP_(EG,x,y,u,v)
    }

    // axiom ax_DEP_0 { -- somehow, it also causes unsoundness...
    //     forall EG:Set[Edge], x:Ref, y:Ref, u:Ref, v:Ref ::
    //         { DEP(EG,x,y,u,v) }
    //         { exists_path(EG,x,u), exists_path(EG,v,y) }
    //             exists_path_(EG,x,u) && edge(EG,u,v) && exists_path_(EG,v,y) ==> DEP_(EG,x,y,u,v)
    // }

    axiom ax_DEP_0_2 {
        forall EG:Set[Edge], x:Ref, y:Ref ::
            { DEP(EG,x,y,x,y) }
            { edge(EG,x,y) }
                edge(EG, x, y) <==> DEP_(EG,x,y,x,y)
    }

    axiom ax_HeadTriangleImposable {
        forall EG:Set[Edge], x:Ref, y:Ref, v:Ref ::
            { DEP(EG,x,y,x,v) }
            { exists_path_(EG,x,y), exists_path(EG,v,y) }
            { edge(EG,x,v), exists_path_(EG,v,y) }
                exists_path_(EG,x,y) && edge(EG,x,v) && exists_path_(EG,v,y) ==> DEP_(EG,x,y,x,v)
    }

    axiom ax_TailTriangleImposable {
        forall EG:Set[Edge], x:Ref, y:Ref, u:Ref ::
            { DEP(EG,x,y,u,y) }
            { exists_path_(EG,x,y), exists_path(EG,x,u) }
            { edge(EG,u,y), exists_path_(EG,x,u) }
                exists_path_(EG,x,y) && exists_path_(EG,x,u) && edge(EG,u,y) ==> DEP_(EG,x,y,u,y)
    }

    axiom ax_NoEdgeNoDEP {
        forall EG:Set[Edge], x:Ref, y:Ref, u:Ref, v:Ref ::
            { DEP(EG,x,y,u,v) }
                !edge(EG,u,v) ==> !DEP_(EG,x,y,u,v)
    }

    /*axiom ax_TriangleImposable_Neg {
        forall EG:Set[Edge], x:Ref, y:Ref, u:Ref, v:Ref ::
            { DEP(EG,x,y,u,v) }
            //{ exists_path_(EG,x,y), exists_path(EG,v,y) }
            //{ edge(EG,x,v), exists_path_(EG,v,y) }
                //BLABLA BLA exists_path_(EG,x,y) && edge(EG,x,v) && exists_path_(EG,v,y) ==> !DEP_(EG,x,y,u,v)
    }*/

    /*
    axiom ax_DEP_0_1 {
        forall EG:Set[Edge], x:Ref, y:Ref, u:Ref, v:Ref ::
            { DEP(EG,x,y,u,v) }
            { exists_path(EG,x,u), exists_path(EG,v,y) }
                exists_path(EG,x,u) && edge(EG,u,v) && exists_path(EG,v,y) ==> DEP(EG,x,y,u,v)
    }*/

    /*axiom ax_DEP_1 { -- incorrect
        forall EG:Set[Edge], x:Ref, y:Ref, u:Ref, v:Ref ::
            { DEP(EG,x,y,u,v) }
            { exists_path(EG,x,u), exists_path(EG,v,y) }
                DEP(EG,x,y,u,v) <==> exists_path(EG,x,u) && edge(EG,u,v) && exists_path(EG,v,y)
    }*/

    /*axiom ax_DEP_2 { -- also incorrect
        forall EG:Set[Edge], x:Ref, y:Ref, u:Ref, v:Ref ::
            { DEP(EG,x,y,u,v) }
            { exists_path(EG,x,y), edge(EG,u,v) }
                DEP(EG,x,y,u,v) <==> exists_path(EG,x,y) && edge(EG,u,v)
    }*/

    // axiom ax_DEP_3 {
    //     forall EG:Set[Edge], x:Ref, y:Ref ::
    //         { exists_path(EG,x,y) }
    //             exists_path_(EG,x,y) <==>
    //                 x == y ||
    //                     !forall u:Ref, v:Ref ::
    //                         { DEP(EG,x,y,u,v) }
    //                         { exists_path(EG,x,y), edge(EG,u,v) }
    //                             !DEP_(EG,x,y,u,v)
    // }
    /*
    axiom ax_DEP_4 {
        forall EG:Set[Edge], x:Ref, y:Ref, u:Ref, v:Ref ::
            //{ DEP(EG,x,y,u,v) }
            { exists_path(EG,x,y), edge(EG,u,v) }
            { exists_path(EG,x,y), exists_path(EG,u,v) }
                DEP_(EG,x,y,u,v) ==> exists_path_(EG,x,y) && edge_(EG,u,v)
    }*/

    /*axiom ax_DEP_5 { less general than ax_DEP_3
        forall EG:Set[Edge], u:Ref, v:Ref ::
            { exists_path(EG,u,v) }
                !exists_path_(EG,u,v) ==> forall x:Ref, y:Ref :: { DEP(EG,x,y,u,v) } !DEP_(EG,x,y,u,v)
    }*/

    axiom ax_DEP_trigger_magic {
        forall EG:Set[Edge], x:Ref, y:Ref, u:Ref, v:Ref ::
            { DEP(EG, x, y, u, v) }
                DEP(EG, x, y, u, v) ==> exists_path(EG, x, y) && edge(EG, u, v)
    }

    axiom ax_DEP_6_head { // could be a cool lemma that needs a cool proof! :-)
        forall EG:Set[Edge], x:Ref, y:Ref, n:Ref ::
            { DEP(EG, y, n, x, y) }
                /*edge(EG, x, y) &&*/ n != y ==> !DEP_(EG, y, n, x, y)
    }

    axiom ax_DEP_6_tail { // could be a cool lemma that needs a cool proof! :-)
        forall EG:Set[Edge], x:Ref, y:Ref, n:Ref ::
            { DEP(EG, n, x, x, y) }
                /*edge(EG, x, y) &&*/ n != x ==> !DEP_(EG, n, x, x, y)
    }

    axiom ax_DEP_7 {
        forall EG:Set[Edge], nu:Ref, n:Ref, mu:Ref, sigma:Ref ::
            { DEP(EG, nu, n, mu, sigma) }
                nu != n && n != sigma && nu != mu && edge(EG, nu, sigma) && edge(EG, mu, sigma)
                    ==> !DEP_(EG, nu, n, mu, sigma)
    }

    /* -- Isn't being triggered without the right term. (Needs manual assertions?)
    axiom ax_UnrollFromHead {
        forall EG:Set[Edge], x:Ref, y:Ref, n:Ref ::
            //{ exists_path(EG, x, n), edge(EG, x, y) }
            { DEP(EG, x, n, x, y) }
                DEP(EG, x, n, x, y) ==> exists_path(EG, x, n)
    }*/
}

method unlink_01PG_next(g:Set[Ref], node:Ref)
    requires node in g
    requires PROTECTED_GRAPH(g,node)
    ensures PROTECTED_GRAPH(g,node)
    ensures node.next == null
    ensures old(node.next) == null ==> $$(g) == old($$(g))
    ensures old(node.next) != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
        { exists_path($$(g),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) && !(v1==node && v2==old(node.next))
    ensures old(node.next) != null ==>
            forall x:Ref, y:Ref, u:Ref, v:Ref ::
                { DEP($$(g), x, y, u, v) }
                { DEP(old($$(g)), x, y, u, v) }
                    //x != y && u != v ==>
                    (
                        DEP(old($$(g)), x, y, u, v) && !DEP(old($$(g)), x, y, node, old(node.next)) ==> DEP($$(g), x, y, u, v)    // trigger wisdom: ax_UnrollFromHead
                    )
    // ensures let from==(node) in let to==(old(node.next)) in (to != null ==>
    //         forall x:Ref, y:Ref, u:Ref, v:Ref ::
    //             { DEP(old($$(g)), x, y, u, v) }
    //             { DEP($$(g), x, y, u, v) }
    //                 (from != to) ==> (
    //                     DEP($$(g), x, y, u, v)
    //                     || (x==from && u==from && y==to && v==to)
    //                     || ( exists w:Ref, z:Ref :: __psi__($$(g), from,to, x,y, u,v, w,z) )
    //                     || ( exists U:Ref, V:Ref :: __psi__($$(g), from,to, x,y, U,V, u,v) )
    //                     || u==from && v==to && ( exists U:Ref, V:Ref, w:Ref, z:Ref :: __psi__($$(g), from,to, x,y, U,V, w,z) )
    //                         ==> DEP(old($$(g)), x, y, u, v)))

    // ensures forall n:Ref :: { DEP($$(g), n, node, n, n.next) }{ exists_path($$(g), n, node) } n in g && n != node ==> __learn_trigger__(DEP(old($$(g)), n, node, n, n.next))
    // ensures forall n:Ref :: { DEP($$(g), n, node, n, n.next) } n in g              ==> __learn_trigger__(exists_path(old($$(g)), n, node))

    // ensures forall n:Ref :: { exists_path($$(g), n, to.next) }{ exists_path($$(g), n, from.next) } n in g && n != from.next ==>  __learn_trigger__(DEP($$(g), n, from.next, from, from.next))
    // ensures forall n:Ref :: { exists_path($$(g), n, to.next) }{ exists_path($$(g), n, from.next) } n in g && n != from.next ==>  __learn_trigger__(DEP($$(g), n, to.next, to, to.next))

    // ensures forall n:Ref :: { exists_path($$(g), n, node) }{ DEP($$(g), n, node, n, n.next) }{ DEP(old($$(g)), n, node, n, n.next) } n in g              ==> __learn_trigger__(exists_path(old($$(g)), n, node))
    // ensures forall n:Ref :: { exists_path($$(g), n, node) }{ DEP($$(g), n, node, n, n.next) }{ DEP(old($$(g)), n, node, n, n.next) } n in g && n != node ==> __learn_trigger__(DEP(old($$(g)), n, node, n, n.next))



/*

    Creating new_edge (alpha→beta).
    Consider path_1 (x..aplha) and path_2 (beta..y).
    new_edge creates path(x..y)

    x ............. u→v ............. alpha→beta ............. w→z ............. y


 */
define __psi__(EG, alpha,beta, x,y,u,v,w,z) (
    ( forall u_:Ref, v_:Ref :: { DEP(EG,x,y,u_,v_) } !DEP(EG,x,y,u_,v_) ) &&  // !exists_path(EG,x,y) -- ?
    ( DEP(EG,x,alpha,u,v) && x!=alpha || (x==u && u==alpha && v==beta) ) &&
    ( DEP(EG,beta,y,w,z)  && beta!=y  || (alpha==w && beta==z && z==y) )
)

domain TriggerWisdoms {

    function __learn_trigger__(bla: Bool): Bool
    function __trigger_ref__(r: Ref): Bool
}

method link_01PG_next(g:Set[Ref], from:Ref, to:Ref)
    requires from in g
    requires to != null
    requires PROTECTED_GRAPH(g,from)
    requires from.next == null
    requires !exists_path($$(g), from, to)
    ensures PROTECTED_GRAPH(g,from)
    ensures from.next == to
    ensures to == null ==> $$(g) == old($$(g))
    ensures to != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
        { exists_path($$(g),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) || (v1==from && v2==to)
    ensures to != null ==>
            forall x:Ref, y:Ref, u:Ref, v:Ref ::
                { DEP($$(g), x, y, u, v) }
                { DEP(old($$(g)), x, y, u, v) }
                    (from != to && u != v && x != y) ==> (
                        DEP(old($$(g)), x, y, u, v)
                        || (x==from && u==from && y==to && v==to)
                        || ( exists w:Ref, z:Ref :: __psi__(old($$(g)), from,to, x,y, u,v, w,z) )
                        || ( exists U:Ref, V:Ref :: __psi__(old($$(g)), from,to, x,y, U,V, u,v) )
                        || u==from && v==to && ( exists U:Ref, V:Ref, w:Ref, z:Ref :: __psi__(old($$(g)), from,to, x,y, U,V, w,z) )

                            ==> DEP($$(g), x, y, u, v) )
    ensures to != null ==>
        forall x:Ref, y:Ref, u:Ref, v:Ref ::
            { DEP($$(g), x, y, u, v) }
            { DEP(old($$(g)), x, y, u, v) }
                // x != y && u != from && v != to ==> (
                    DEP($$(g), x, y, u, v) && !DEP($$(g), x, y, from, to) ==> DEP(old($$(g)), x, y, u, v)
                // )
    //trigge wisdom: UnrollFromHead
    ensures forall n:Ref :: { exists_path($$(g), to, n) }{ exists_path($$(g), from, n) } n in g && n != from ==> __learn_trigger__(DEP($$(g), from, n, from, from.next))
    ensures forall n:Ref :: { exists_path($$(g), to, n) }{ exists_path($$(g), from, n) } n in g && n != to   ==> __learn_trigger__(DEP($$(g),   to, n,   to,   to.next))
    ensures forall n:Ref :: { exists_path($$(g), n, to) }{ exists_path($$(g), n, from) } n in g && n != from ==> __learn_trigger__(DEP($$(g), n, from, n, n.next))
    // ensures forall n:Ref :: { exists_path($$(g), n, to) }{ exists_path($$(g), n, from) } n in g && n != to   ==> __learn_trigger__(DEP($$(g), n, to,   n, n.next)) // never helped so far

    // ensures forall n:Ref :: { DEP($$(g), to, n, to, to.next) }{ DEP($$(g), from, n, from, from.next) } n in g ==> __learn_trigger__(exists_path($$(g), from, n)) // never helped so far
    ensures forall n:Ref :: { DEP($$(g), to, n, to, to.next) }{ DEP($$(g), from, n, from, from.next) } n in g ==> __learn_trigger__(exists_path($$(g), to, n))   && __learn_trigger__(exists_path(old($$(g)), to, n))
    // ensures forall n:Ref :: { DEP($$(g), n, to, n, n.next) }{ DEP($$(g), n, from, n, n.next) }         n in g ==> __learn_trigger__(exists_path($$(g), n, from))     // never helped so far
    // ensures forall n:Ref :: { DEP($$(g), n, to, n, n.next) }{ DEP($$(g), n, from, n, n.next) }         n in g ==> __learn_trigger__(exists_path($$(g), n, to))         // never helped so far


    // ensures forall n:Ref :: { exists_path($$(g), n, to.next) }{ exists_path($$(g), n, from.next) } n in g && n != from.next ==>  __learn_trigger__(DEP($$(g), n, from.next, from, from.next))
    // ensures forall n:Ref :: { exists_path($$(g), n, to.next) }{ exists_path($$(g), n, from.next) } n in g && n != from.next ==>  __learn_trigger__(DEP($$(g), n, to.next, to, to.next))

    // ensures forall n:Ref :: { DEP($$(g), n, to.next, to, to.next) }{ DEP($$(g), n, from.next, from, from.next) } n in g ==> __learn_trigger__(exists_path($$(g), n, to.next))
    // ensures forall n:Ref :: { DEP($$(g), n, to.next, to, to.next) }{ DEP($$(g), n, from.next, from, from.next) } n in g ==> __learn_trigger__(exists_path($$(g), n, from.next))

function apply_TCFraming(g0:Set[Ref], g1:Set[Ref]): Bool
    //requires GRAPH(g0) && GRAPH(g1)
    requires forall n:Ref :: {n.next} n in g0 ==> acc(n.next, 1/2)
    requires forall n:Ref :: {n.next} n in g1 ==> acc(n.next, 1/2)

    requires g1 intersection g0 == Set()

    // needed for triggering
    ensures g0 union g1 == g1 union g0

    // FIXME: Triggers in the following formulas are under question.
    ensures forall u:Ref, v:Ref :: { exists_path($$(g0),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g0 && v in g0 && exists_path($$(g0),u,v) ==> exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g1),u,v) }{ exists_path($$(g1 union g0),u,v) } u in g1 && v in g1 && exists_path($$(g1),u,v) ==> exists_path($$(g1 union g0),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g0),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g0 && v in g0 && !exists_path($$(g0),u,v) ==> !exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g1),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g1 && v in g1 && !exists_path($$(g1),u,v) ==> !exists_path($$(g1 union g0),u,v)

    ensures forall u:Ref, v:Ref :: { DEP($$(g0 union g1), u, v, u, u.next) }{ DEP($$(g0 union g1), u, v.next, v, v.next) } u in g0 && v in g0 ==> __learn_trigger__( exists_path($$(g0 union g1),u,v) )
    //ensures forall u:Ref, v:Ref :: { DEP($$(g1 union g0), u, v, u, u.next) }{ DEP($$(g1 union g0), u, v.next, v, v.next) } u in g1 && v in g1 ==> __learn_trigger__( exists_path($$(g1 union g0),u,v) )
    //ensures forall u:Ref, v:Ref :: { DEP($$(g0 union g1), u, v, u, u.next) }{ DEP($$(g0 union g1), u, v.next, v, v.next) } u in g0 && v in g0 ==> __learn_trigger__( exists_path($$(g0 union g1),u,v) )
    //ensures forall u:Ref, v:Ref :: { DEP($$(g1 union g0), u, v, u, u.next) }{ DEP($$(g1 union g0), u, v.next, v, v.next) } u in g1 && v in g1 ==> __learn_trigger__( exists_path($$(g1 union g0),u,v) )

define UNSHARED_CONNECTED(g)
    ( forall v1:Ref, v2:Ref, v:Ref :: { v in g, v1.next, v2.next } v1 in g && v2 in g && v in g ==> ( v1.next == v && v2.next == v ==> v1 == v2 ) )
    && ( forall v:Ref :: { v.next } v in g ==> ( v == v.next <==> g == Set(v) ) )

define apply_noExit_framing(g0, g1)
    ( forall u:Ref,v:Ref :: { exists_path($$(g0 union g1),u,v), u in g0, v in g0 } u in g0 && !(v in g0) ==> !exists_path($$(g0 union g1),u,v) )
    &&
    ( forall u:Ref,v:Ref :: { exists_path($$(g0 union g1),u,v), u in g1, v in g1 } u in g1 && !(v in g1) ==> !exists_path($$(g0 union g1),u,v) )



method create_node(graph: Set[Ref], init_val: Int) returns (new_graph: Set[Ref], new_node: Ref)
    ensures !( new_node in graph )
    ensures new_graph == graph union Set(new_node)
    ensures acc(new_node.next) && acc(new_node.val)
    ensures new_node.next == null
    ensures new_node.val == init_val
/*{
    new_node := new(*)
    assume !( new_node in graph )
    new_node.next := null
    new_node.val := init_val
    new_graph := graph union Set(new_node)
}*/

method ringInsert(g:Set[Ref], start:Ref, x:Int)
    returns (new_g:Set[Ref], new_node:Ref, new_start:Ref)

    requires RING(g)
    requires UNSHARED_CONNECTED(g)
    requires start in g
    requires forall n:Ref, m:Ref ::
        { exists_path($$(g),n,m) }
            n in g && m in g ==> exists_path($$(g),n,m) && exists_path($$(g),m,n)
    requires forall n:Ref :: { n.val } n in g ==> acc(n.val)
    requires forall n:Ref :: { n.next.val } n in g && n.next != start ==> n.val <= n.next.val
    requires forall n:Ref :: { n.next.val } n in g && n.next == start ==> n.next.val <= n.val

    ensures RING(new_g)
    ensures UNSHARED_CONNECTED(new_g)
    ensures new_start in new_g
    ensures forall n:Ref :: { n.val } n in new_g ==> acc(n.val)
    ensures !(new_node in g) && new_node in new_g
    ensures new_node.val == x
    ensures forall n:Ref :: { n.next.val } n in new_g && n.next != new_start ==> n.val <= n.next.val
    ensures forall n:Ref :: { n.next.val } n in new_g && n.next == new_start ==> n.next.val <= n.val
    ensures forall n:Ref, m:Ref ::
        { exists_path($$(new_g),n,m) }
            n in new_g && m in new_g
                ==> exists_path($$(new_g),n,m) && exists_path($$(new_g),m,n)
{
    new_g, new_node := create_node(g, x)
    var node:Ref := start
    while ( !( node.val <= x && x < node.next.val
               || node.next == start && ( node.val <= x || x < start.val ) ) )
        invariant RING(g)
        invariant UNSHARED_CONNECTED(g)
        invariant node in g
        invariant forall n:Ref, m:Ref ::
            { exists_path($$(g),n,m) }
                n in g && m in g ==> exists_path($$(g),n,m) && exists_path($$(g),m,n)
        invariant forall n:Ref :: { n.val } n in g ==> acc(n.val)
        invariant forall n:Ref :: { n.next.val } n in g && n.next != start ==> n.val <= n.next.val
        invariant forall n:Ref :: { n.next.val } n in g && n.next == start ==> n.next.val <= n.val
    {
        node := node.next
    }

    if ( node.next == start && x < start.val ) {
        new_start := new_node
    } else {
        new_start := start
    }

    // assume apply_noExit_framing(g0, g1) //-- not needed for this particular proof (because all nodes are reachably from all nodes -- very strond spec)
    assume apply_TCFraming(g,Set(new_node))

    /// new_node.next := node.next
    if ( new_node.next != null ) {
        unlink_01PG_next(new_g, new_node) // redundant
    }
    link_01PG_next(new_g, new_node, node.next)

    /// node.next := new_node
    if ( node.next != null ) {
        unlink_01PG_next(new_g, node)
    }
    link_01PG_next(new_g, node, new_node)

    // assert forall n:Ref :: { exists_path($$(new_g), node, n) } n in new_g
    //     ==> exists_path($$(new_g), node, n)
    // assert forall n:Ref :: { exists_path($$(new_g), n, node) } n in new_g
    //     ==> exists_path($$(new_g), n, node)

    // -- causes matching loop (?)
    assert forall n:Ref, m:Ref ::
        { exists_path($$(new_g), n, m) }
            n in new_g && m in new_g ==>
                exists_path($$(new_g), n, node) && exists_path($$(new_g), node, m)
}


method ring_lemma(g:Set[Ref], start:Ref, x:Int)
    requires RING(g)
    requires UNSHARED_CONNECTED(g)
    requires start in g

    requires forall n:Ref, m:Ref ::
            { exists_path($$(g),n,m) }
                n in g && m in g ==> exists_path($$(g),n,start) && exists_path($$(g),start,m)

    ensures RING(g)
    ensures UNSHARED_CONNECTED(g)
    ensures forall n:Ref, m:Ref ::
            { exists_path($$(g),n,m) }{ exists_path($$(g),m,n) }
                n in g && m in g ==> exists_path($$(g),n,m) && exists_path($$(g),m,n)
{
    // assert forall n:Ref, m:Ref :: { exists_path($$(g),n,m) } n in g && m in g ==> exists_path($$(g), n, start) && exists_path($$(g), start, m)
}
