domain Edge {
    function edge_pred(e:Edge): Ref
    function edge_succ(e:Edge): Ref

    function create_edge(p:Ref, s:Ref): Edge
    function create_edge_(p:Ref, s:Ref): Edge

    axiom edge_injectivity {
        forall p:Ref, s:Ref ::
            { create_edge(p,s) }
                edge_pred( create_edge(p,s) ) == p &&
                edge_succ( create_edge(p,s) ) == s
    }
}

domain TrClo {

    function exists_path(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_path_(EG:Set[Edge], start:Ref, end:Ref): Bool

    /*
    function exists_path_2(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_path_2_(EG:Set[Edge], start:Ref, end:Ref): Bool

    function is_on_path(EG:Set[Edge], start:Ref, w:Ref, end:Ref): Bool
    */

    /*
    /// U is the universe;
    /// EG is the edge graph (specifies the edge relation)
    /// A is the color predicate
    /// M is the marker
    function apply_IND(EG:Set[Edge], Z:Set[Ref], P:Set[Ref]): Bool
    function apply_IND_2(EG:Set[Edge], Z:Set[Ref], P:Set[Ref]): Bool
    function apply_noExit(EG:Set[Edge], U:Set[Ref], M:Set[Ref]): Bool
    function apply_goOut(EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref]): Bool
    function apply_newStart(U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge]): Bool
    */

    /** axiomatization of the set for instantiating color axioms with unary reachability */
    function inst_uReach(EG:Set[Edge], x:Ref): Set[Ref]

    /*function inst_uReach_2(EG:Set[Edge], x:Ref): Set[Ref]*/

    /*function inst_uReach_rev(EG:Set[Edge], x:Ref): Set[Ref]*/

    /** The properties of the edge relation. */
    function acyclic_graph(EG:Set[Edge]): Bool
    function unshared_graph(EG:Set[Edge]): Bool
    function func_graph(EG:Set[Edge]): Bool


    function edge(EG:Set[Edge], p:Ref, s:Ref): Bool
    function edge_(EG:Set[Edge], p:Ref, s:Ref): Bool

    axiom ax_EdgeSynonim {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { edge(EG,p,s) }
                edge(EG,p,s) <==> edge_(EG,p,s)
    }
    axiom ax_Edge {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { create_edge(p,s) in EG }
            { edge(EG,p,s) }
                edge_(EG,p,s) <==> create_edge(p,s) in EG
    }

    /*
    // The first color axiom from the paper. (Via Refs)
    axiom ax_NoExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }

    // TODO: revise the triggers!
    axiom ax_GoOut {
        forall EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref] :: { apply_goOut(EG,U,A,B) }
        // apply_goOut(EG,U,A,B) &&
        ( apply_goOut(EG,U,A,B) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in A, v in A }{ u in A, v in B } (u in A) && (v in U) && !(v in A) && edge(EG,u,v) ==> v in B ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in A, v in A }            (u in A) && (v in U) && !(v in A) && exists_path(EG,u,v) ==> exists w:Ref :: w in B && exists_path(EG,u,w) && exists_path(EG,w,v) )
        ) )
    }

    axiom ax_NewStart {
        forall U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge] :: { apply_newStart(U,A,EG1,EG2) }
        // apply_newStart(U,A,EG1,EG2) &&
        ( apply_newStart(U,A,EG1,EG2) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG1,u,v) }{ u in A, v in A } (u in A) && (v in A) && edge(EG2,u,v) ==> edge(EG1,u,v) )  ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG1,u,v) }{ exists_path(EG2,u,v) } exists_path(EG2,u,v) && !exists_path(EG1,u,v) ==> exists w:Ref :: (w in U) && !(w in A) && exists_path(EG2,u,w) && exists_path(EG2,w,v) )
        ) )
    }

    // IND -- Ref-oriented encoding
    axiom ax_InductionPrinciple {
        forall EG:Set[Edge], Z:Set[Ref], P:Set[Ref] :: { apply_IND(EG,Z,P) }
        // apply_IND(EG,Z,P) &&
        ( apply_IND(EG,Z,P) ==> (

                ( ( forall z:Ref:: { z in Z }{ z in P } (z in Z) ==> (z in P) ) && ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in P, v in P } (u in P) && edge(EG,u,v) ==> (v in P) ) ) ==>
                ( forall u:Ref,z:Ref :: {exists_path_(EG,z,u)}{z in Z, u in P} (z in Z) && exists_path(EG,z,u) ==> (u in P) )
        ) )
    }

    axiom ax_InductionPrinciple_2 {
        forall EG:Set[Edge], Z:Set[Ref], P:Set[Ref] :: { apply_IND_2(EG,Z,P) }
        // apply_IND_2(EG,Z,P) &&
        ( apply_IND_2(EG,Z,P) ==> (

                ( ( forall z:Ref:: { z in Z }{ z in P } (z in Z) ==> (z in P) ) && ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in P, v in P } edge(EG,u,v) && (v in P) ==> (u in P) ) ) ==>
                ( forall u:Ref,z:Ref :: {exists_path_2(EG,z,u)}{z in Z, u in P} (z in Z) && exists_path_2(EG,u,z) ==> (u in P) )
        ) )
    }*/

    axiom ax_instantiation_uReach {
        forall EG:Set[Edge], x:Ref, v: Ref ::
            { v in inst_uReach(EG,x) }
            { exists_path(EG,x,v) }
                v in inst_uReach(EG,x) <==> exists_path(EG,x,v)
    }

    /*
    axiom ax_instantiation_uReach_rev {
        forall EG:Set[Edge], u: Ref, y:Ref ::
            { u in inst_uReach_rev(EG,y) }
            { exists_path(EG,u,y) }
                u in inst_uReach_rev(EG,y) <==> exists_path(EG,u,y)
    }

    axiom ax_instantiation_uReach_2 {
        forall EG:Set[Edge], x:Ref, v: Ref ::
            { v in inst_uReach_2(EG,x) }
            { exists_path_2(EG,x,v) }
                v in inst_uReach_2(EG,x) <==> exists_path_2(EG,x,v)
    }
    */

    axiom ax_Alias {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
                exists_path(EG,start,end) <==> exists_path_(EG,start,end)
    }

    /*
    axiom ax_Alias_2 {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path_2(EG,start,end) }
                exists_path_2(EG,start,end) <==> exists_path_2_(EG,start,end)
    }*/


    /** T1 -- Ref-oriented encoding */
    axiom ax_ExistsPath {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_(EG,start,end) <==>
                    start == end
                    || exists w:Ref :: edge(EG,start,w) && exists_path_(EG,w,end)
    }

    /** T1 -- Ref-oriented encoding */
    /*
    axiom ax_ExistsPath_a {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_(EG,start,end) ==>
                    ((start == end)
                    || exists w:Ref :: edge(EG,start,w) && exists_path_(EG,w,end))
    }
    */

    /** T1 -- Ref-oriented encoding */
    /*
    axiom ax_ExistsPath_b {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
            { edge(EG,start,end) }
                !exists_path_(EG,start,end) ==>
                    start != end
                    && forall w:Ref :: { edge(EG,start,w) }{ exists_path_(EG,w,end) } !edge(EG,start,w) || !exists_path_(EG,w,end)
    }
    */

    /*
    axiom ax_ExistsPath_2 {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path_2(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_2_(EG,start,end) <==>
                    start == end
                    || exists w:Ref :: exists_path_2_(EG,start,w) && edge(EG,w,end)
    }*/

    /** Follows from T1 && IND */
    axiom ax_ExistsPathTrans {
        forall EG:Set[Edge], u:Ref, v:Ref, w:Ref ::
            { exists_path(EG,u,w), exists_path(EG,w,v) }
                exists_path_(EG,u,w) && exists_path_(EG,w,v) ==> exists_path_(EG,u,v)
    }

    axiom ax_AcyclicGraph {
        forall EG:Set[Edge] ::
            { acyclic_graph(EG) }
                acyclic_graph(EG) <==>
                    forall v1:Ref, v2:Ref ::
                        { edge(EG,v1,v2) }
                        { exists_path(EG,v2,v1) }
                            !edge(EG,v1,v2) || !exists_path(EG,v2,v1)
    }

    axiom ax_UnsharedGraph {
        forall EG:Set[Edge] ::
            { unshared_graph(EG) }
                unshared_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        { edge(EG,v1,v), edge(EG,v2,v) }
                            edge(EG,v1,v) && edge(EG,v2,v) ==> v1 == v2
    }

    axiom ax_FuncGraph {
        forall EG:Set[Edge] ::
            { func_graph(EG) }
                func_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        //{ edge(EG,v1,v), edge(EG,v2,v) }
                        { edge(EG,v,v1), edge(EG,v,v2) }
                            edge(EG,v,v1) && edge(EG,v,v2) ==> v1 == v2
    }

}

field next:Ref

// Purification of the entire (edge) graph.
function $$(refs:Set[Ref]): Set[Edge]
    requires forall n:Ref :: {n.next} n in refs ==> acc(n.next,1/2)
    ensures forall p:Ref, s:Ref ::
        { create_edge(p,s) }
        //{ p in refs, s in refs }
            p in refs && s in refs && p.next == s
            <==> create_edge(p,s) in result

define GRAPH(nodes)
    !(null in nodes)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes && n.next != null ==> n.next in nodes )

define PROTECTED_GRAPH(nodes, mutable_node)
    !(null in nodes)
    && ( mutable_node in nodes )
    && acc(mutable_node.next, write)
    && ( forall n:Ref :: {n.next} n in nodes && n != mutable_node ==> acc(n.next,1/2) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes && n.next != null ==> n.next in nodes )

method link(g:Set[Ref], x:Ref, y:Ref)
    requires x in g
    requires y != null ==> y in g
    requires PROTECTED_GRAPH(g,x)
    requires x.next == null
    ensures PROTECTED_GRAPH(g,x)
    ensures x.next == y
    ensures y == null ==> $$(g) == old($$(g))
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { edge(old($$(g)),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) || (v1==x && v2==y)
    ensures y != null ==> (forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
            (v1 != v2) ==> (
                exists_path($$(g),v1,v2) <==>
                    exists_path(old($$(g)),v1,v2) || (exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),y,v2))))

method unlink(g:Set[Ref], x:Ref)
    requires x in g
    requires PROTECTED_GRAPH(g,x)
    ensures PROTECTED_GRAPH(g,x)
    ensures x.next == null
    ensures old(x.next) == null ==> $$(g) == old($$(g))
    ensures old(x.next) != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) && !(v1==x && v2==old(x.next))
    ensures old(x.next) != null ==> (forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
            (v1 != v2) ==> (
                exists_path($$(g),v1,v2) <==>
                    exists_path(old($$(g)),v1,v2) && !(exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),old(x.next),v2))))


/*
method link(g:Set[Ref], x:Ref, y:Ref)
    requires x in g
    requires y != null ==> y in g
    requires GRAPH(g)
    ensures GRAPH(g)
    ensures x.next == y
    ensures y == null ==> $$(g) == old($$(g))
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
        { edge(old($$(g)),v1,v2) }
            edge($$(g),v1,v2) ==> edge(old($$(g)),v1,v2) || v1==x && v2==y
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
        { edge(old($$(g)),v1,v2) }
            !edge($$(g),v1,v2) ==> !edge(old($$(g)),v1,v2) && !(v1==x && v2==y)
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
        { exists_path(old($$(g)),v1,v2) }
            exists_path($$(g),v1,v2) ==> exists_path(old($$(g)),v1,v2) || exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),y,v2)
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
        { exists_path(old($$(g)),v1,v2) }
            !exists_path($$(g),v1,v2) ==> !exists_path(old($$(g)),v1,v2) && !(exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),y,v2))

method unlink(g:Set[Ref], x:Ref)
    requires x in g
    requires GRAPH(g)
    ensures GRAPH(g)
    ensures x.next == null
    ensures old(x.next) == null ==> $$(g) == old($$(g))
    ensures old(x.next) != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
        { edge(old($$(g)),v1,v2) }
            edge($$(g),v1,v2) ==> edge(old($$(g)),v1,v2) && !(v1==x && v2==old(x.next))
    ensures old(x.next) != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
        { edge(old($$(g)),v1,v2) }
            !edge($$(g),v1,v2) ==> !edge(old($$(g)),v1,v2) || v1==x && v2==old(x.next)
    ensures old(x.next) != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
        { exists_path(old($$(g)),v1,v2) }
            exists_path($$(g),v1,v2) ==> exists_path(old($$(g)),v1,v2) && !(exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),old(x.next),v2))
    ensures old(x.next) != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
        { exists_path(old($$(g)),v1,v2) }
            !exists_path($$(g),v1,v2) ==> !exists_path(old($$(g)),v1,v2) || exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),old(x.next),v2)
*/
/*
method link(g:Set[Ref], x:Ref, y:Ref)
    requires x in g
    requires y != null ==> y in g
    requires GRAPH(g)
    ensures GRAPH(g)
    ensures x.next == y
    ensures y == null ==> $$(g) == old($$(g))
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) || (v1==x && v2==y)
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
            exists_path($$(g),v1,v2) <==> exists_path(old($$(g)),v1,v2) || (exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),y,v2))

method unlink(g:Set[Ref], x:Ref)
    requires x in g
    requires GRAPH(g)
    ensures GRAPH(g)
    ensures x.next == null
    ensures old(x.next) == null ==> $$(g) == old($$(g))
    ensures old(x.next) != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) && !(v1==x && v2==old(x.next))
    ensures old(x.next) != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
            exists_path($$(g),v1,v2) <==> exists_path(old($$(g)),v1,v2) && !(exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),old(x.next),v2))
*/

method reverse(g:Set[Ref], xe:Ref) returns (y:Ref)
    requires GRAPH(g)
    requires xe in g

    requires acyclic_graph($$(g))
    requires unshared_graph($$(g))
    requires func_graph($$(g))

    // total[xe,xe,ne]
    requires forall v:Ref :: {exists_path($$(g),xe,v)} v in g ==> exists_path($$(g),xe,v)

{
    // Save the old graph
    var old_g:Set[Edge] := $$(g)

    var t:Ref := null
    var x:Ref := xe
    y := null

    while ( x != null )

        // Memory management
        invariant GRAPH(g)
        invariant x != null ==> x in g
        invariant y != null ==> y in g

        // (5.10)

        invariant forall n:Ref :: {exists_path($$(g),x,n)}{exists_path($$(g),y,n)} n in g ==> ( exists_path($$(g),x,n) ||  exists_path($$(g),y,n))
        //invariant forall n:Ref :: {exists_path($$(g),x,n)}{exists_path($$(g),y,n)} n in g ==> (!exists_path($$(g),x,n) || !exists_path($$(g),y,n))
        invariant acyclic_graph($$(g))
        invariant unshared_graph($$(g))
        invariant func_graph($$(g))


        // (???)
        invariant x != xe && x != null ==> !exists_path($$(g),x,xe)
        //invariant y != null ==> exists_path($$(g),y,xe)
        invariant x != null ==> !edge($$(g),x,y)


        // (5.12)
        invariant forall v1:Ref, v2:Ref :: {edge(old_g,v1,v2)}{edge($$(g),v1,v2)} exists_path($$(g),x,v1)            ==> ( edge(old_g,v1,v2) <==> edge($$(g),v1,v2) )

        // (5.13)
        invariant forall v1:Ref, v2:Ref :: {edge(old_g,v1,v2)}{edge($$(g),v1,v2)} exists_path($$(g),y,v2) && v1 != y ==> ( edge(old_g,v1,v2) <==> edge($$(g),v2,v1) )

        // (5.14)
        invariant y != null && x != null ==> edge(old_g,y,x)


    {
        var save_g:Set[Edge] := $$(g)
        var save_y: Ref := y
        var save_x: Ref := x

        t := x.next

        //x.next := y
        unlink(g,x)
        link(g,x,y)

        y := x
        x := t

        //Transformer (5.15)
        //assert x != null ==> edge(save_g,save_x,x)

        //assert x != null ==> !edge($$(g),x,y)


        assert save_y != null ==> forall v1:Ref, v2:Ref :: { v1 in g, v2 in g }//{edge(save_g,v1,v2)}{edge($$(g),v1,v2)}
            v1 in g && v2 in g ==> (
                edge($$(g),v1,v2) <==> ( edge(save_g,v1,v2) && v1 != save_x ) || ( v1 == save_x && v2 == save_y )
            )

        // Negated definition of TC[f] and the follow-up lemma
        //assert forall u:Ref, v:Ref :: !exists_path($$(g),u,v) ==> u != v && forall w:Ref :: !edge($$(g),u,w) || !exists_path($$(g),w,v)
        //assert forall u:Ref, v:Ref :: !exists_path($$(g),u,v) ==> !edge($$(g),u,v)


        //assert save_y != null && exists_path($$(g),y,save_x) && save_y != y ==> ( edge(old_g,save_y,save_x) <==> edge($$(g),save_x,save_y) )
        //assert save_y != null ==> ( exists_path($$(g),y,save_x) && save_y != y ==> ( edge(old_g,save_y,save_x) <==> edge($$(g),save_x,save_y) ) )
        //assert save_y != null ==> ( forall v1:Ref,v2:Ref :: exists_path($$(g),y,v2) && v1 != y ==> ( edge(old_g,v1,v2) <==> edge($$(g),v2,v1) ) )


        //assert false
    }
}