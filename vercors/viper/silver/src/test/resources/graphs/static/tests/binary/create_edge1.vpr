domain Edge {
    function edge_pred(e:Edge): Ref
    function edge_succ(e:Edge): Ref

    function create_edge(p:Ref, s:Ref): Edge
    function create_edge_(p:Ref, s:Ref): Edge

    axiom edge_injectivity {
        forall p:Ref, s:Ref ::
            { create_edge(p,s) }
                edge_pred( create_edge(p,s) ) == p &&
                edge_succ( create_edge(p,s) ) == s
    }
}

domain TrClo {

    function exists_path(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_path_(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_spath(EG:Set[Edge], from:Set[Ref], to:Ref): Bool

    /// U is the universe;
    /// EG is the edge graph (specifies the edge relation)
    /// A is the color predicate
    /// M is the marker
    function apply_noExit(EG:Set[Edge], U:Set[Ref], M:Set[Ref]): Bool
    //function apply_goOut(EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref]): Bool
    //function apply_newStart(U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge]): Bool

    /** axiomatization of the set for instantiating color axioms with unary reachability */
    function inst_uReach(EG:Set[Edge], x:Ref): Set[Ref]

    /** The properties of the edge relation. */
    function acyclic_graph(EG:Set[Edge]): Bool
    function unshared_graph(EG:Set[Edge]): Bool
    function func_graph(EG:Set[Edge]): Bool


    function edge(EG:Set[Edge], p:Ref, s:Ref): Bool
    function edge_(EG:Set[Edge], p:Ref, s:Ref): Bool

    axiom ax_EdgeSynonim {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { edge(EG,p,s) }
                edge(EG,p,s) <==> edge_(EG,p,s)
    }
    axiom ax_Edge {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { create_edge(p,s) in EG }
            { edge(EG,p,s) }
                edge_(EG,p,s) <==> create_edge(p,s) in EG
    }

    // The first color axiom from the paper. (Via Refs)
    axiom ax_NoExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }

    /*
    axiom ax_NoTCExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noTCExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noTCExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }
    */
    /*
    // TODO: revise the triggers!
    axiom ax_GoOut {
        forall EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref] :: { apply_goOut(EG,U,A,B) }
        // apply_goOut(EG,U,A,B) &&
        ( apply_goOut(EG,U,A,B) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in A, v in A }{ u in A, v in B } (u in A) && (v in U) && !(v in A) && edge(EG,u,v) ==> v in B ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in A, v in A }            (u in A) && (v in U) && !(v in A) && exists_path(EG,u,v) ==> exists w:Ref :: w in B && exists_path(EG,u,w) && exists_path(EG,w,v) )
        ) )
    }

    axiom ax_NewStart {
        forall U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge] :: { apply_newStart(U,A,EG1,EG2) }
        // apply_newStart(U,A,EG1,EG2) &&
        ( apply_newStart(U,A,EG1,EG2) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG1,u,v) }{ u in A, v in A } (u in A) && (v in A) && edge(EG2,u,v) ==> edge(EG1,u,v) )  ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG1,u,v) }{ exists_path(EG2,u,v) } exists_path(EG2,u,v) && !exists_path(EG1,u,v) ==> exists w:Ref :: (w in U) && !(w in A) && exists_path(EG2,u,w) && exists_path(EG2,w,v) )
        ) )
    }
    */

    axiom ax_instantiation_uReach {
        forall EG:Set[Edge], x:Ref, v: Ref ::
            { v in inst_uReach(EG,x) }
            { exists_path(EG,x,v) }
                v in inst_uReach(EG,x) <==> exists_path(EG,x,v)
    }

    axiom ax_Alias {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
                exists_path(EG,start,end) <==> exists_path_(EG,start,end)
    }

    /** T1 -- Ref-oriented encoding */
    axiom ax_ExistsPath {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_(EG,start,end) <==>
                    start == end
                    || exists w:Ref :: edge(EG,start,w) && exists_path_(EG,w,end)
    }

    /** Follows from T1 && IND */
    axiom ax_ExistsPathTrans {
        forall EG:Set[Edge], u:Ref, v:Ref, w:Ref ::
            { exists_path(EG,u,w), exists_path(EG,w,v) }
                exists_path_(EG,u,w) && exists_path_(EG,w,v) ==> exists_path_(EG,u,v)
    }

    axiom ax_AcyclicGraph {
        forall EG:Set[Edge] ::
            { acyclic_graph(EG) }
                acyclic_graph(EG) <==>
                    forall v1:Ref, v2:Ref ::
                        { edge(EG,v1,v2) }
                        { exists_path(EG,v2,v1) }
                            !edge(EG,v1,v2) || !exists_path(EG,v2,v1)
    }

    axiom ax_UnsharedGraph {
        forall EG:Set[Edge] ::
            { unshared_graph(EG) }
                unshared_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        { edge(EG,v1,v), edge(EG,v2,v) }
                            edge(EG,v1,v) && edge(EG,v2,v) ==> v1 == v2
    }

    axiom ax_FuncGraph {
        forall EG:Set[Edge] ::
            { func_graph(EG) }
                func_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        //{ edge(EG,v1,v), edge(EG,v2,v) }
                        { edge(EG,v,v1), edge(EG,v,v2) }
                            edge(EG,v,v1) && edge(EG,v,v2) ==> v1 == v2
    }
}

field l:Ref
field r:Ref

// Purification of the entire (edge) graph.
function $$(refs:Set[Ref]): Set[Edge]
    requires forall n:Ref :: {n.l} n in refs ==> acc(n.l,1/2)
    requires forall n:Ref :: {n.r} n in refs ==> acc(n.r,1/2)
    ensures forall p:Ref, s:Ref ::
        { create_edge(p,s) }
        //{ p in refs, s in refs }
            p in refs && s in refs && (p.l == s || p.r == s)
            <==> create_edge(p,s) in result
    // This is wisdom_PathStartEndMustRemainInGraph
    ensures forall p:Ref, s:Ref ::
        { p in refs, s in refs, exists_path(result,p,s) }
            p in refs && exists_path(result,p,s) ==> s in refs
    ensures forall p:Ref, s:Ref ::
        { p in refs, s in refs, exists_path(result,p,s) }
            s in refs && exists_path(result,p,s) ==> p in refs

define GRAPH(nodes)
    !(null in nodes)
    && ( forall n:Ref :: {n.l} n in nodes ==> acc(n.l) )
    && ( forall n:Ref :: {n.r} n in nodes ==> acc(n.r) )
    && ( forall n:Ref ::
        {n.l in nodes}
        {n in nodes, n.l}
            n in nodes && n.l != null ==> n.l in nodes )
    && ( forall n:Ref ::
        {n.r in nodes}
        {n in nodes, n.r}
            n in nodes && n.r != null ==> n.r in nodes )

define disjoint_sets(g0, g1)
    ( forall n:Ref :: { n in g0, n in g1 } n in g0 ==> !(n in g1) ) &&
    ( forall n:Ref :: { n in g0, n in g1 } n in g1 ==> !(n in g0) )


function apply_TCFraming(g0:Set[Ref], g1:Set[Ref]): Bool
    //requires GRAPH(g0) && GRAPH(g1)
    requires forall n:Ref :: {n.l} n in g0 ==> acc(n.l)
    requires forall n:Ref :: {n.r} n in g0 ==> acc(n.r)
    requires forall n:Ref :: {n.l} n in g1 ==> acc(n.l)
    requires forall n:Ref :: {n.r} n in g1 ==> acc(n.r)

    //requires g1 intersection g0 == Set()
    requires disjoint_sets(g0,g1)

    // needed for triggering
    ensures g0 union g1 == g1 union g0

    // FIXME: Triggers in the following formulas are under question.
    ensures forall u:Ref, v:Ref :: { exists_path($$(g0),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g0 && v in g0 && exists_path($$(g0),u,v) ==> exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g1),u,v) }{ exists_path($$(g1 union g0),u,v) } u in g1 && v in g1 && exists_path($$(g1),u,v) ==> exists_path($$(g1 union g0),u,v)

    ensures forall u:Ref, v:Ref :: { exists_path($$(g0),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g0 && v in g0 && !exists_path($$(g0),u,v) ==> !exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g1),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g1 && v in g1 && !exists_path($$(g1),u,v) ==> !exists_path($$(g1 union g0),u,v)

domain __FieldEnum__ {
    unique function __left__(): __FieldEnum__
    unique function __right__(): __FieldEnum__
}

define PROTECTED_GRAPH(nodes, mutable_node, mutable_field)
    !(null in nodes)
    && ( mutable_node in nodes )
    && ( acc(mutable_node.l, mutable_field == __left__() ? write : 1/2) )
    && ( acc(mutable_node.r, mutable_field == __right__() ? write : 1/2) )
    && ( forall n:Ref :: {n.l} n in nodes && n != mutable_node ==> acc(n.l,1/2) )
    && ( forall n:Ref :: {n.r} n in nodes && n != mutable_node ==> acc(n.r,1/2) )
    && ( forall n:Ref ::
        {n.l in nodes}
        {n in nodes, n.l}
            n in nodes && n.l != null ==> n.l in nodes )
    && ( forall n:Ref ::
        {n.r in nodes}
        {n in nodes, n.r}
            n in nodes && n.r != null ==> n.r in nodes )

method link_left(g:Set[Ref], x:Ref, y:Ref)
    requires x in g
    requires y != null ==> y in g
    requires PROTECTED_GRAPH(g,x,__left__())
    requires x.l == null
    ensures PROTECTED_GRAPH(g,x,__left__())
    ensures x.l == y
    ensures y == null ==> $$(g) == old($$(g))
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { edge(old($$(g)),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) || (v1==x && v2==y)
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
        v1 != v2 ==>
        (
            exists_path($$(g),v1,v2) <==> exists_path(old($$(g)),v1,v2) || (exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),y,v2))
        )

method link_right(g:Set[Ref], x:Ref, y:Ref)
    requires x in g
    requires y != null ==> y in g
    requires PROTECTED_GRAPH(g,x,__right__())
    requires x.r == null
    ensures PROTECTED_GRAPH(g,x,__right__())
    ensures x.r == y
    ensures y == null ==> $$(g) == old($$(g))
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { edge(old($$(g)),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) || (v1==x && v2==y)
    ensures y != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
        v1 != v2 ==>
        (
            exists_path($$(g),v1,v2) <==> exists_path(old($$(g)),v1,v2) || (exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),y,v2))
        )

method unlink_left(g:Set[Ref], x:Ref)
    requires x in g
    requires PROTECTED_GRAPH(g,x,__left__())
    ensures PROTECTED_GRAPH(g,x,__left__())
    ensures x.l == null
    ensures old(x.l) == null ==> $$(g) == old($$(g))
    ensures old(x.l) != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) && !(v1==x && v2==old(x.l))
    ensures old(x.l) != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
        v1 != v2 ==>
        (
            exists_path($$(g),v1,v2) <==> exists_path(old($$(g)),v1,v2) && !(exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),old(x.l),v2))
        )

method unlink_right(g:Set[Ref], x:Ref)
    requires x in g
    requires PROTECTED_GRAPH(g,x,__right__())
    ensures PROTECTED_GRAPH(g,x,__right__())
    ensures x.r == null
    ensures old(x.r) == null ==> $$(g) == old($$(g))
    ensures old(x.r) != null ==> forall v1:Ref, v2:Ref ::
        { edge($$(g),v1,v2) }
            edge($$(g),v1,v2) <==> edge(old($$(g)),v1,v2) && !(v1==x && v2==old(x.r))
    ensures old(x.r) != null ==> forall v1:Ref, v2:Ref ::
        { exists_path($$(g),v1,v2) }
        v1 != v2 ==>
        (
            exists_path($$(g),v1,v2) <==> exists_path(old($$(g)),v1,v2) && !(exists_path(old($$(g)),v1,x) && exists_path(old($$(g)),old(x.r),v2))
        )


method join(g0:Set[Ref], g1:Set[Ref], x0:Ref, x1:Ref, x:Ref)
    requires GRAPH(g0)
    requires x0 in g0
    requires x in g0

    requires GRAPH(g1)
    requires x1 in g1

    requires disjoint_sets(g0,g1)
    requires forall n:Ref :: { n in g0 } n in g0 ==> exists_path($$(g0),x,n)
    requires forall n:Ref :: { exists_path($$(g0),n,x0) } n in g0 ==> exists_path($$(g0),n,x0)
    requires forall m:Ref :: { exists_path($$(g1),x1,m) }{ m in g1 } m in g1 ==> exists_path($$(g1),x1,m)

    requires x0.l == null || x0.r == null

    ensures GRAPH(g0 union g1)
    ensures forall n:Ref :: n in (g0 union g1) ==> exists_path($$(g0 union g1),x,n)
{
    assume apply_TCFraming(g0,g1)

    if ( x0.l == null ) {
        link_left(g0 union g1,x0,x1)
    } else {
        link_right(g0 union g1,x0,x1)
    }
}


// Corresponds to the RHS of the following instance:
//     apply_noExit($$(g0 union g1), g0 union g1, g0)
// g0 is the original graph; g1 is the frame.
define apply_noExit_framing(g0, g1)
    ( forall u:Ref,v:Ref :: { exists_path($$(g0 union g1),u,v), u in g0, v in g0 } u in g0 && !(v in g0) ==> !exists_path($$(g0 union g1),u,v) )
    &&
    ( forall u:Ref,v:Ref :: { exists_path($$(g0 union g1),u,v), u in g1, v in g1 } u in g1 && !(v in g1) ==> !exists_path($$(g0 union g1),u,v) )


method connect_DAGs(g0:Set[Ref], g1:Set[Ref], x0:Ref, x1:Ref, x:Ref)
    requires GRAPH(g0)
    requires acyclic_graph($$(g0))
    requires x0 in g0
    requires x in g0

    requires GRAPH(g1)
    requires acyclic_graph($$(g1))
    requires x1 in g1

    requires forall n:Ref :: { exists_path($$(g0),x,n) } n in g0 ==> exists_path($$(g0),x,n)
    requires forall n:Ref :: { exists_path($$(g0),n,x0) } n in g0 ==> exists_path($$(g0),n,x0)
    requires forall m:Ref :: { exists_path($$(g1),x1,m) } m in g1 ==> exists_path($$(g1),x1,m)

    requires x0.l == null || x0.r == null

    requires disjoint_sets(g0,g1)

    ensures GRAPH(g0 union g1)
    ensures forall n:Ref :: { exists_path($$(g0 union g1),x,n) } n in (g0 union g1) ==> exists_path($$(g0 union g1),x,n)

    ensures acyclic_graph($$(g0 union g1))

{
    // The NoExit axiom applications can be inlined:
    //assume apply_noExit($$(g0 union g1), g0 union g1, g0)
    //assume apply_noExit($$(g0 union g1), g0 union g1, g1)
    //assume forall u:Ref,v:Ref :: { exists_path($$(g0 union g1),u,v), u in g0, v in g0 } u in g0 && !(v in g0) ==> !exists_path($$(g0 union g1),u,v)
    //assume forall u:Ref,v:Ref :: { exists_path($$(g0 union g1),u,v), u in g1, v in g1 } u in g1 && !(v in g1) ==> !exists_path($$(g0 union g1),u,v)
    assume apply_noExit_framing(g0, g1)
    assume apply_noExit_framing(g1, g0)

    // do we really need both?
    assume apply_TCFraming(g0,g1)
    assume apply_TCFraming(g1,g0)
    if ( x0.l == null ) {
        //x0.l := x1
        link_left(g0 union g1,x0,x1)
    } else {
        ////x0.r := x1
        link_right(g0 union g1,x0,x1)
    }

    //assert false
}

field marker:Bool

define MARKER(g)
    forall n:Ref :: { n.marker } n in g ==> acc(n.marker)
/*
method treeify_graph(g:Set[Ref], x:Ref)
    requires GRAPH(g)
    requires MARKER(g)
    requires x in g
    requires ! x.marker
    //requires forall n:Ref :: { exists_path($$(g),x,n) } n in g ==> exists_path($$(g),x,n)


    ensures GRAPH(g)
    ensures MARKER(g)
    //ensures acyclic_graph( $$(inst_uReach($$(g), x)) )
    //ensures disjoint_sets( inst_uReach($$(g), x.l), inst_uReach($$(g), x.r) )
{
    x.marker := true

    if ( x.l != null ) {
        if ( ! x.l.marker ) {
            treeify_graph(g, x.l)
        } else {
            unlink_left(g,x)
        }
    }
    if ( x.r != null ) {
        if ( ! x.r.marker ) {
            treeify_graph(g, x.r)
        } else {
            unlink_right(g,x)
        }
    }
    if ( x.l != null && x.r != null ) {
        var sub_g_l:Set[Ref] := inst_uReach($$(g),x.l)
        var sub_g_r:Set[Ref] := inst_uReach($$(g),x.r)
        assume apply_TCFraming(sub_g_l,sub_g_r)
    }

    assert acyclic_graph( $$(inst_uReach($$(g), x)) )
}

*/