domain Edge {
    function edge_pred(e:Edge): Ref
    function edge_succ(e:Edge): Ref

    function create_edge(p:Ref, s:Ref): Edge
    function create_edge_(p:Ref, s:Ref): Edge

    axiom edge_injectivity {
        forall p:Ref, s:Ref ::
            { create_edge(p,s) }
                edge_pred( create_edge(p,s) ) == p &&
                edge_succ( create_edge(p,s) ) == s
    }
}

/** Establishing the edge relation. */
//define edge(EG,p,s) ( create_edge(p,s) in EG )

domain TrClo {

    function exists_path(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_path_(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_spath(EG:Set[Edge], from:Set[Ref], to:Ref): Bool

    /*
    function exists_path_2(EG:Set[Edge], start:Ref, end:Ref): Bool
    function exists_path_2_(EG:Set[Edge], start:Ref, end:Ref): Bool

    function is_on_path(EG:Set[Edge], start:Ref, w:Ref, end:Ref): Bool
    */


    /// U is the universe;
    /// EG is the edge graph (specifies the edge relation)
    /// A is the color predicate
    /// M is the marker
    //function apply_IND(EG:Set[Edge], Z:Set[Ref], P:Set[Ref]): Bool
    //function apply_IND_2(EG:Set[Edge], Z:Set[Ref], P:Set[Ref]): Bool
    function apply_noExit(EG:Set[Edge], U:Set[Ref], M:Set[Ref]): Bool
    //function apply_goOut(EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref]): Bool
    //function apply_newStart(U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge]): Bool

    //function apply_noTCExit(U:Set[Ref], EG1:Set[Edge], EG2:Set[Edge], M:Set[Ref]): Bool


    /** axiomatization of the set for instantiating color axioms with unary reachability */
    function inst_uReach(EG:Set[Edge], x:Ref): Set[Ref]

    /*function inst_uReach_2(EG:Set[Edge], x:Ref): Set[Ref]*/

    /*function inst_uReach_rev(EG:Set[Edge], x:Ref): Set[Ref]*/

    /** The properties of the edge relation. */
    function acyclic_graph(EG:Set[Edge]): Bool
    function unshared_graph(EG:Set[Edge]): Bool
    function func_graph(EG:Set[Edge]): Bool


    function edge(EG:Set[Edge], p:Ref, s:Ref): Bool
    function edge_(EG:Set[Edge], p:Ref, s:Ref): Bool

    axiom ax_EdgeSynonim {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { edge(EG,p,s) }
                edge(EG,p,s) <==> edge_(EG,p,s)
    }
    axiom ax_Edge {
        forall EG:Set[Edge], p:Ref, s:Ref ::
            { create_edge(p,s) in EG }
            { edge(EG,p,s) }
                edge_(EG,p,s) <==> create_edge(p,s) in EG
    }


    // The first color axiom from the paper. (Via Refs)
    axiom ax_NoExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }
    /*
    axiom ax_NoTCExit {
        forall EG:Set[Edge], U:Set[Ref], M:Set[Ref] :: { apply_noTCExit(EG,U,M) }
        // apply_noExit(EG,U,M) &&
        ( apply_noTCExit(EG,U,M) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }       { u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !edge(EG,u,v) ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in M, v in M } (u in M) && (v in U) && !(v in M) ==> !exists_path(EG,u,v) )
        ) )
    }*/
    /*
    // TODO: revise the triggers!
    axiom ax_GoOut {
        forall EG:Set[Edge], U:Set[Ref], A:Set[Ref], B:Set[Ref] :: { apply_goOut(EG,U,A,B) }
        // apply_goOut(EG,U,A,B) &&
        ( apply_goOut(EG,U,A,B) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in A, v in A }{ u in A, v in B } (u in A) && (v in U) && !(v in A) && edge(EG,u,v) ==> v in B ) ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG,u,v) }{ u in A, v in A }            (u in A) && (v in U) && !(v in A) && exists_path(EG,u,v) ==> exists w:Ref :: w in B && exists_path(EG,u,w) && exists_path(EG,w,v) )
        ) )
    }

    axiom ax_NewStart {
        forall U:Set[Ref], A:Set[Ref], EG1:Set[Edge], EG2:Set[Edge] :: { apply_newStart(U,A,EG1,EG2) }
        // apply_newStart(U,A,EG1,EG2) &&
        ( apply_newStart(U,A,EG1,EG2) ==> (

            ( forall u:Ref, v:Ref :: { edge(EG1,u,v) }{ u in A, v in A } (u in A) && (v in A) && edge(EG2,u,v) ==> edge(EG1,u,v) )  ==>
            ( forall u:Ref, v:Ref :: { exists_path(EG1,u,v) }{ exists_path(EG2,u,v) } exists_path(EG2,u,v) && !exists_path(EG1,u,v) ==> exists w:Ref :: (w in U) && !(w in A) && exists_path(EG2,u,w) && exists_path(EG2,w,v) )
        ) )
    }

    // IND -- Ref-oriented encoding
    axiom ax_InductionPrinciple {
        forall EG:Set[Edge], Z:Set[Ref], P:Set[Ref] :: { apply_IND(EG,Z,P) }
        // apply_IND(EG,Z,P) &&
        ( apply_IND(EG,Z,P) ==> (

                ( ( forall z:Ref:: { z in Z }{ z in P } (z in Z) ==> (z in P) ) && ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in P, v in P } (u in P) && edge(EG,u,v) ==> (v in P) ) ) ==>
                ( forall u:Ref,z:Ref :: {exists_path_(EG,z,u)}{z in Z, u in P} (z in Z) && exists_path(EG,z,u) ==> (u in P) )
        ) )
    }

    axiom ax_InductionPrinciple_2 {
        forall EG:Set[Edge], Z:Set[Ref], P:Set[Ref] :: { apply_IND_2(EG,Z,P) }
        // apply_IND_2(EG,Z,P) &&
        ( apply_IND_2(EG,Z,P) ==> (

                ( ( forall z:Ref:: { z in Z }{ z in P } (z in Z) ==> (z in P) ) && ( forall u:Ref, v:Ref :: { edge(EG,u,v) }{ u in P, v in P } edge(EG,u,v) && (v in P) ==> (u in P) ) ) ==>
                ( forall u:Ref,z:Ref :: {exists_path_2(EG,z,u)}{z in Z, u in P} (z in Z) && exists_path_2(EG,u,z) ==> (u in P) )
        ) )
    }*/

    axiom ax_instantiation_uReach {
        forall EG:Set[Edge], x:Ref, v: Ref ::
            { v in inst_uReach(EG,x) }
            { exists_path(EG,x,v) }
                v in inst_uReach(EG,x) <==> exists_path(EG,x,v)
    }

    /*
    axiom ax_instantiation_uReach_rev {
        forall EG:Set[Edge], u: Ref, y:Ref ::
            { u in inst_uReach_rev(EG,y) }
            { exists_path(EG,u,y) }
                u in inst_uReach_rev(EG,y) <==> exists_path(EG,u,y)
    }

    axiom ax_instantiation_uReach_2 {
        forall EG:Set[Edge], x:Ref, v: Ref ::
            { v in inst_uReach_2(EG,x) }
            { exists_path_2(EG,x,v) }
                v in inst_uReach_2(EG,x) <==> exists_path_2(EG,x,v)
    }
    */

    axiom ax_Alias {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
                exists_path(EG,start,end) <==> exists_path_(EG,start,end)
    }

    /*
    axiom ax_Alias_2 {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path_2(EG,start,end) }
                exists_path_2(EG,start,end) <==> exists_path_2_(EG,start,end)
    }*/


    /** T1 -- Ref-oriented encoding */
    axiom ax_ExistsPath {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_(EG,start,end) <==>
                    start == end
                    || exists w:Ref :: edge(EG,start,w) && exists_path_(EG,w,end)
    }

    /** T1 -- Ref-oriented encoding */
    /*
    axiom ax_ExistsPath_a {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_(EG,start,end) ==>
                    ((start == end)
                    || exists w:Ref :: edge(EG,start,w) && exists_path_(EG,w,end))
    }
    */

    /** T1 -- Ref-oriented encoding */
    /*
    axiom ax_ExistsPath_b {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path(EG,start,end) }
            { edge(EG,start,end) }
                !exists_path_(EG,start,end) ==>
                    start != end
                    && forall w:Ref :: { edge(EG,start,w) }{ exists_path_(EG,w,end) } !edge(EG,start,w) || !exists_path_(EG,w,end)
    }
    */

    /*
    axiom ax_ExistsPath_2 {
        forall EG:Set[Edge], start:Ref, end:Ref ::
            { exists_path_2(EG,start,end) }
            { edge(EG,start,end) }
                exists_path_2_(EG,start,end) <==>
                    start == end
                    || exists w:Ref :: exists_path_2_(EG,start,w) && edge(EG,w,end)
    }*/

    /** Follows from T1 && IND */
    axiom ax_ExistsPathTrans {
        forall EG:Set[Edge], u:Ref, v:Ref, w:Ref ::
            { exists_path(EG,u,w), exists_path(EG,w,v) }
                exists_path_(EG,u,w) && exists_path_(EG,w,v) ==> exists_path_(EG,u,v)
    }

    axiom ax_AcyclicGraph {
        forall EG:Set[Edge] ::
            { acyclic_graph(EG) }
                acyclic_graph(EG) <==>
                    forall v1:Ref, v2:Ref ::
                        { edge(EG,v1,v2) }
                        { exists_path(EG,v2,v1) }
                            !edge(EG,v1,v2) || !exists_path(EG,v2,v1)
    }

    axiom ax_UnsharedGraph {
        forall EG:Set[Edge] ::
            { unshared_graph(EG) }
                unshared_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        { edge(EG,v1,v), edge(EG,v2,v) }
                            edge(EG,v1,v) && edge(EG,v2,v) ==> v1 == v2
    }

    axiom ax_FuncGraph {
        forall EG:Set[Edge] ::
            { func_graph(EG) }
                func_graph(EG) <==>
                    forall v1:Ref, v2:Ref, v:Ref ::
                        //{ edge(EG,v1,v), edge(EG,v2,v) }
                        { edge(EG,v,v1), edge(EG,v,v2) }
                            edge(EG,v,v1) && edge(EG,v,v2) ==> v1 == v2
    }


    axiom ax_ExistsSetPath {
        forall EG:Set[Edge], from:Set[Ref], to:Ref ::
            { exists_spath(EG,from,to) }
                exists_spath(EG,from,to) <==>
                    exists f:Ref :: f in from && exists_path(EG,f,to)
    }
}

domain FramingWisdoms {
    // This axiom is needed exclusively for the purpose of triggering.
    axiom ax_SetIntersection {
        forall g0:Set[Ref], g1:Set[Ref] ::
            { g0 intersection g1 }
                g0 intersection g1 == Set() ==> forall r:Ref :: { r in g0, r in g1 } r in g0 && r in g1 ==> r in Set()
    }

    // This axiom is needed exclusively for the purpose of triggering.
    axiom ax_EdgeReverse {
        forall g:Set[Edge], e:Edge ::
            { e in g }
                e in g ==> create_edge(edge_pred(e), edge_succ(e)) == e
    }
}

field next:Ref

function apply_TCFraming(g0:Set[Ref], g1:Set[Ref]): Bool
    //requires GRAPH(g0) && GRAPH(g1)
    requires forall n:Ref :: {n.next} n in g0 ==> acc(n.next)
    requires forall n:Ref :: {n.next} n in g1 ==> acc(n.next)

    requires g1 intersection g0 == Set()
    // needed for triggering
    ensures g0 union g1 == g1 union g0

    // FIXME: Triggers in the following formulas are under question.
    ensures forall u:Ref, v:Ref :: { exists_path($$(g0),u,v) }{ exists_path($$(g0 union g1),u,v) } u in g0 && v in g0 && exists_path($$(g0),u,v) ==> exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref, v:Ref :: { exists_path($$(g1),u,v) }{ exists_path($$(g1 union g0),u,v) } u in g1 && v in g1 && exists_path($$(g1),u,v) ==> exists_path($$(g1 union g0),u,v)
    ensures forall u:Ref, v:Ref :: u in g0 && v in g0 && !exists_path($$(g0),u,v) ==> !exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref, v:Ref :: u in g1 && v in g1 && !exists_path($$(g1),u,v) ==> !exists_path($$(g1 union g0),u,v)


// Purification of the entire (edge) graph.
function $$(refs:Set[Ref]): Set[Edge]
    requires forall n:Ref :: {n.next} n in refs ==> acc(n.next)
    //requires GRAPH(refs)
    ensures forall p:Ref, s:Ref ::
        { create_edge(p,s) }
        //{ p in refs, s in refs }
            p in refs && s in refs && p.next == s
            <==> create_edge(p,s) in result
    // This is wisdom_PathStartEndMustRemainInGraph
    // TODO: why is this sound?
    ensures forall p:Ref, s:Ref ::
        { p in refs, s in refs, exists_path(result,p,s) }
            p in refs && exists_path(result,p,s) ==> s in refs
    ensures forall p:Ref, s:Ref ::
        { p in refs, s in refs, exists_path(result,p,s) }
            s in refs && exists_path(result,p,s) ==> p in refs

define GRAPH(nodes)
    !(null in nodes)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next) )
    && ( forall n:Ref ::
        {n.next in nodes}
        {n in nodes, n.next}
            n in nodes && n.next != null ==> n.next in nodes )

define disjoint_sets(g0, g1)
    ( forall r:Ref :: { r in g0, r in g1 } r in g0 ==> !(r in g1) ) &&
    ( forall r:Ref :: { r in g0, r in g1 } r in g1 ==> !(r in g0) )

function is_global_root(g:Set[Ref], root:Ref): Bool
    requires GRAPH(g)
    requires root in g
{
    forall n:Ref :: { exists_path($$(g),root,n) } n in g ==> exists_path($$(g),root,n)
}

function is_global_sroot(g:Set[Ref], roots:Set[Ref]): Bool
    requires GRAPH(g)
    requires roots subset g
{
    forall n:Ref :: { exists_spath($$(g),roots,n) } n in g ==> exists_spath($$(g),roots,n)
}

function acyclic_list_segment(g:Set[Ref]): Bool
    requires GRAPH(g)
{
     acyclic_graph($$(g)) &&
     func_graph($$(g)) &&
     unshared_graph($$(g))
}

method test_graph(g0:Set[Ref], g1:Set[Ref])
    requires GRAPH(g0) && GRAPH(g1)
    //requires disjoint_sets(g0,g1)
{
    //assert $$(g0) intersection $$(g1) == Set()
    assert forall e:Edge :: e in $$(g0) ==> e in ($$(g0) union $$(g1))
    assert $$(g0) union $$(g1) == $$(g0 union g1)
}

method test_intersection(g0:Set[Ref], g1:Set[Ref])
    requires GRAPH(g0) && GRAPH(g1)
    requires g0 intersection g1 == Set()
{
    //assert forall r:Ref :: r in (g0 intersection g1) <==> r in g0 && r in g1
    //assert forall r:Ref :: r in g0 ==> !(r in g1)
    //assert forall r:Ref :: r in g1 ==> !(r in g0)
    assert disjoint_sets(g0,g1)
}



method test_disjoint(g0:Set[Ref], g1:Set[Ref])
    requires GRAPH(g0) && GRAPH(g1)
    requires disjoint_sets(g0,g1)

    ensures GRAPH(g0 union g1)
    ensures forall u:Ref,v:Ref :: u in g0 && v in g1 ==> !exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref,v:Ref :: u in g0 && v in g0 && exists_path($$(g0),u,v) ==> exists_path($$(g0 union g1),u,v)
    ensures forall u:Ref,v:Ref :: u in g1 && v in g1 && exists_path($$(g0),u,v) ==> exists_path($$(g0 union g1),u,v)
{
    // This assertion is not needed for automation.
    //assert forall u:Ref,v:Ref :: u in g0 && v in g1 ==> !edge($$(g0 union g1),u,v)

    assume apply_noExit($$(g0 union g1), g0 union g1, g0)
    //assert forall u:Ref,v:Ref :: u in g0 && v in g0 && edge($$(g0),u,v) ==> edge($$(g0 union g1),u,v)
    //assert forall u:Ref,v:Ref :: u in g0 && v in g0 && edge($$(g0),u,v) ==> edge($$(g0) union $$(g1),u,v)
    assume apply_TCFraming(g0,g1)
}

method test_framing_sets(g0:Set[Ref], g1:Set[Ref], x0:Ref, y0:Ref, x1:Ref, y1:Ref) returns (x:Ref)
    requires GRAPH(g0)
    requires GRAPH(g1)
    requires x0 in g0 && y0 in g0
    requires x1 in g1 && y1 in g1
    requires disjoint_sets(g0,g1)
    requires exists_path($$(g0),x0,y0)
    requires exists_path($$(g1),x1,y1)

    ensures GRAPH(g1 union g0)
    ensures exists_path($$(g0 union g1),x1,y1)
    ensures exists_path($$(g0 union g1),x0,y0)
{
    assume apply_TCFraming(g0,g1)
}

method test_union(g0:Set[Ref], g1:Set[Ref], x0:Ref, x1:Ref) returns (x:Ref)
    requires GRAPH(g0) && GRAPH(g1)
    requires x0 in g0
    requires x1 in g1
    requires disjoint_sets(g0,g1)
    requires is_global_root(g0,x0)
    requires is_global_root(g1,x1)

    requires acyclic_list_segment(g0)
    requires acyclic_list_segment(g1)

    ensures GRAPH(g0 union g1)
    ensures is_global_sroot(g0 union g1,Set(x0,x1))

    ensures acyclic_list_segment(g0 union g1)
    ensures unshared_graph($$(g0 union g1))

    ensures disjoint_sets(g0,g1)
{
    assume apply_TCFraming(g0,g1)
}

method test_unframing(g0:Set[Ref], g1:Set[Ref])
    requires GRAPH(g0) && GRAPH(g1)
    requires disjoint_sets(g0,g1)
{

    assert forall u:Ref, v:Ref :: u in g0 && v in g0 && edge($$(g0 union g1),u,v) ==> edge($$(g0),u,v)
}

method test_disjoint_advanced(g0:Set[Ref], g1:Set[Ref], x0:Ref, x1:Ref) returns (x:Ref)
    requires GRAPH(g0) && GRAPH(g1)
    requires x0 in g0
    requires x1 in g1
    requires disjoint_sets(g0,g1)
    requires is_global_root(g0,x0)
    requires is_global_root(g1,x1)
{
    var g: Set[Ref] := g0 union g1
    assert forall n:Ref :: n in g ==> ( exists_path($$(g0),x0,n) ||  exists_path($$(g1),x1,n))


    // Negated definition of TC[f] and the follow-up lemma
    assert forall u:Ref, v:Ref :: !exists_path($$(g0),u,v) ==> u != v && forall w:Ref :: !edge($$(g0),u,w) || !exists_path($$(g0),w,v)
    assert forall u:Ref, v:Ref :: !exists_path($$(g0),u,v) ==> !edge($$(g0),u,v)

    assert forall n:Ref :: n in g ==> (!exists_path($$(g0),x0,n) || !exists_path($$(g1),x1,n))

    assume apply_TCFraming(g0,g1)
    assume apply_noExit($$(g0 union g1), g0 union g1, g0)
    assume apply_noExit($$(g0 union g1), g0 union g1, g1)

    //assert forall u:Ref,v:Ref :: u in g0 && v in g0 && exists_path($$(g0),u,v) ==> exists_path($$(g0 union g1),u,v)
    //assert forall n:Ref :: n in g0 && exists_path($$(g0),x0,n) ==> exists_path($$(g),x0,n)

    assert forall n:Ref :: n in g ==> (  exists_path($$(g),x0,n) ||  exists_path($$(g),x1,n))
    assert forall n:Ref :: n in g ==> ( !exists_path($$(g),x0,n) || !exists_path($$(g),x1,n))

    assert false
}