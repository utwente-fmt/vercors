//:: IgnoreFile(/carbon/issue/216/)
//:: IgnoreFile(/carbon/issue/103/)

/* See list_sum.sil */

field __CONFIG_HEURISTICS: Bool /* Activates heuristics */

field val: Int
field next: Ref

/* Linked-list abstract predicate. Contains access to the fields of the current
 * node ys, and transitively, to the fields of all nodes in the tail.
 */
predicate List(ys: Ref) {
  acc(ys.val) && acc(ys.next) && (ys.next != null ==> acc(List(ys.next)))
}

/* Pure function that computes the sum in a straight-forward, recursive way. */
function sum_rec(ys: Ref): Int
  requires acc(List(ys))
{ unfolding List(ys) in ys.val + (ys.next == null ? 0 : sum_rec(ys.next)) }

/* Iterative computation of the sum over the linked-list ys. The postcondition
 * states that the iterative computation yields the same result as the
 * recursive one.
 */
method sum_it(ys: Ref) returns (sum: Int)
  requires ys != null
  requires acc(List(ys))
  ensures acc(List(ys))
  ensures sum == old(sum_rec(ys))
{
  var xs: Ref := ys /* Pointer to the current node in the list */
  sum := 0          /* Sum computed so far*/

  var old_sum_xs : Int /* used to store sum of list from xs, when wand is packaged */

  /* (Trivially) establish the promise that giving up the list starting from
   * the current node xs - which at this point is the head of the list - in a
   * shape s.t. its sum is the same as it is at this point (sum_rec(xs) == old_sum_xs),
   * yields a list that starts at the old head node (ys) and whose sum is the
   * sum of the original list (sum_rec(ys) == old(sum_rec(ys))).
   */
  old_sum_xs := sum_rec(xs)

  /* Iteratively compute the sum.
   * The loop invariant states that
   *  1. we have permissions to the list starting at the current node xs (if
   *     not null)
   *  2. the computed sum is the sum of the original list minus the sum of the
   *     nodes still to visit, i.e., the sum of the list starting at the
   *     current node xs.
   *  3. the previously described promise holds
   */
  while (xs != null)
    invariant xs != null ==> acc(List(xs))
    invariant old_sum_xs == (xs == null ? 0 : sum_rec(xs))
    invariant sum == old(sum_rec(ys)) - old_sum_xs;
    invariant (xs != null ==> acc(List(xs)) && sum_rec(xs) == old_sum_xs) --*
                (acc(List(ys)) && sum_rec(ys) == old(sum_rec(ys)))
  {
    unfold List(xs)
    sum := sum + xs.val
    xs := xs.next

    old_sum_xs := (xs == null ? 0 : sum_rec(xs))
  }
}
