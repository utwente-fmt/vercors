//:: IgnoreFile(/carbon/issue/216/)
//:: IgnoreFile(/silicon/issue/187/)
//:: IgnoreFile(/carbon/issue/101/)

/* This example shows how magic wands can be used to specify the imperative
 * version of challenge 3 from the VerifyThis@FM2012 verification competition.
 * Method tree_delete_min below is an iterative implementation of the removal
 * of the minimal element in a binary search tree.
 *
 * The example contains two assertions that help overcoming a technical
 * limitations of the current implementation of our verifier (Silicon)
 * that is related to unrolling recursive functions.
 * This issue is completely unrelated to our work on magic wands, though.
 */

field v: Int
field l: Ref
field r: Ref

predicate Tree(x: Ref) {
  x == null
    ? true
    :    acc(x.v)
      && acc(x.l) && acc(Tree(x.l)) //&& (x.l != null ==> val(x.l) <= x.v)
      && acc(x.r) && acc(Tree(x.r)) //&& (x.r != null ==> x.v <= val(x.r))
}

function val(x: Ref): Int
  requires x != null && acc(Tree(x))
{ unfolding acc(Tree(x)) in x.v }

function vals(x: Ref): Seq[Int]
  requires acc(Tree(x))
{ x == null ? Seq[Int]() : unfolding acc(Tree(x)) in vals(x.l) ++ Seq(x.v) ++ vals(x.r) }

/* Deletes the minimal element of a binary tree, assuming that the tree is a
 * binary search tree (which, for simplicity, is not made explicit in the
 * definition of predicate Tree).
 */
method tree_delete_min(x: Ref) returns (z: Ref)
  requires x != null && acc(Tree(x))
  ensures acc(Tree(z))                  /* POST1 */
  ensures vals(z) == old(vals(x))[1..]  /* POST2 */
{
  var p: Ref := x

  define A acc(p.l) && acc(Tree(p.l)) && vals(p.l) == now(vals(p.l))[1..] // && acc(p.v) && p.v == now(p.v) && (p.l != null ==> val(p.l) <= p.v)
  define B acc(Tree(x)) && vals(x) == old(vals(x))[1..]

  unfold acc(Tree(p))

  if (p.l == null) {
    assert old(vals(x)) == vals(x.l) ++ Seq(x.v) ++ vals(x.r)
      /* TODO: Req by Silicon for POST2; not necessary with --unrollFunctions 2 */

    z := p.r
  } else {
    package (A) --* B {
        fold acc(Tree(p))
    }

    while (unfolding acc(Tree(p.l)) in p.l.l != null)
      invariant p != null && acc(p.l) && acc(Tree(p.l)) && p.l != null
      invariant A --* B
    {
      var oldP: Ref := p

      unfold acc(Tree(p.l))
      p := p.l

      package (A) --* B {
          fold Tree(p)
          apply acc(oldP.l) && acc(Tree(oldP.l)) && vals(oldP.l) == now(vals(oldP))[1..] --* B
      }
    }

    assert vals(p.l) == unfolding acc(Tree(p.l)) in vals(p.l.l) ++ Seq(p.l.v) ++ vals(p.l.r)
      /* TODO: Req by Silicon for POST2; not necessary with --unrollFunctions 2 */

    unfold acc(Tree(p.l))
    p.l := p.l.r

    apply A --* B

    z := x
  }
}
