//:: IgnoreFile(/carbon/issue/216/)
//:: IgnoreFile(/carbon/issue/103/)

/* This example shows how magic wands can be used to specify the
 * imperative version of challenge 3 from the VerifyThis@FM2012
 * verification competition.
 * Method tree_delete_min below is an iterative implementation of
 * the removal of the minimal element in a binary search tree.
 */

field __CONFIG_HEURISTICS: Bool

field v: Int
field l: Ref
field r: Ref

predicate Tree(x: Ref) {
      acc(x.v)
      && acc(x.l) && (x.l != null ==> acc(Tree(x.l)))
      && acc(x.r) && (x.r != null ==> acc(Tree(x.r)))
}

function val(x: Ref): Int
  requires x != null && acc(Tree(x))
{ unfolding acc(Tree(x)) in x.v }

function vals(x: Ref): Seq[Int]
  requires acc(Tree(x))
{ unfolding acc(Tree(x)) in (x.l == null ? Seq[Int]() : vals(x.l)) ++ Seq(x.v) ++ (x.r == null ? Seq[Int]() : vals(x.r)) }

define Vals(x) (x==null ? Seq[Int]() : vals(x))

/* Deletes the minimal element of a binary tree, assuming that the tree is a
 * binary search tree (which, for simplicity, is not made explicit in the
 * definition of predicate Tree).
 */
method tree_delete_min(x: Ref) returns (z: Ref)
  requires x != null && acc(Tree(x))
  ensures z != null ==> acc(Tree(z))                  /* POST1 */
  ensures (z==null ? Seq[Int]() : vals(z)) == old(vals(x))[1..]  /* POST2 */
{
  var p: Ref := x
  var plvs: Seq[Int]

  unfold acc(Tree(p)) // not removable with heuristics 
  plvs := (p.l==null ? Seq[Int]() : vals(p.l))

  if (p.l == null) {
    z := p.r
  } else {
    define A acc(p.l) && (p.l != null ==> acc(Tree(p.l))) && ((p.l==null ? Seq[Int]() : vals(p.l)) == plvs[1..])
    define B acc(Tree(x)) && vals(x) == old(vals(x))[1..]

    package (A) --* B {
        fold acc(Tree(p))
    }

    while (unfolding acc(Tree(p.l)) in p.l.l != null)
      invariant p != null && acc(p.l) && acc(Tree(p.l)) && p.l != null
      invariant plvs == vals(p.l)
      invariant A --* B
    {
//      wand w := A --* B  // removable w. heuristics

      unfold acc(Tree(p.l))
      p := p.l
      plvs := vals(p.l)

  //    package A --* folding Tree(p) in applying w in B  // removable w. heuristics    
    }

    unfold acc(Tree(p.l)) // not removable with heuristics

    p.l := p.l.r

    //apply A --* B // removable w. heuristics
    z := x
  }
}
