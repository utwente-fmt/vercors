//:: IgnoreFile(/carbon/issue/216/)
field f: Int

method test0(x: Ref)
requires acc(x.f) {
    var a: Int := x.f
    var y: Ref
    y := new(f)
    package acc(x.f) && acc(y.f) && x.f == 3 && y.f == 5 --* acc(x.f) && x.f == old[lhs](x.f) {
        exhale acc(x.f)
        inhale acc(x.f) && x.f == 5
        label first
        exhale acc(x.f)
        inhale acc(x.f) && x.f == y.f
        package acc(x.f) && x.f == 4 --* old[lhs](x.f) == 4
        assert old[lhs](x.f) == 3
        assert x.f == old[first](x.f)
        exhale acc(x.f)
        inhale acc(x.f) && x.f == a
        assert x.f == old(x.f)
        exhale acc(x.f)
        inhale acc(x.f) && x.f == old[lhs](x.f)
        assert old[first](x.f) == 5
    }
    x.f := 3
    y.f := 5
    apply acc(x.f) && acc(y.f) && x.f == 3 && y.f == 5 --* acc(x.f) && x.f == old[lhs](x.f)
    //:: ExpectedOutput(assert.failed:labelled.state.not.reached)
    assert old[first](x.f) == 5
}

method test1(x: Ref)
requires acc(x.f) --* acc(x.f) && x.f == old[lhs](x.f)
ensures acc(x.f) --* acc(x.f) && x.f == old[lhs](x.f) {
    inhale acc(x.f)
    apply acc(x.f) --* acc(x.f) && x.f == old[lhs](x.f)
    package acc(x.f) --* acc(x.f) && x.f == old[lhs](x.f)
}

method test2(x: Ref)
requires acc(x.f) && x.f == 0 {
    package true --* acc(x.f) && old[lhs](x.f) == 0 {
        //:: ExpectedOutput(assert.failed:insufficient.permission)
        assert old[lhs](x.f) == 0
    }
}

method test3(x: Ref)
requires acc(x.f)
ensures acc(x.f) && x.f == 0 {
    package acc(x.f) --* acc(x.f) && x.f == old[lhs](x.f)
    x.f := 0
    apply acc(x.f) --* acc(x.f) && x.f == old[lhs](x.f)
}

method test4(x: Ref)
requires acc(x.f)
//:: ExpectedOutput(postcondition.violated:assertion.false)
ensures acc(x.f) && x.f == 0 {
    package acc(x.f) --* acc(x.f) && x.f == old[lhs](x.f)
    apply acc(x.f) --* acc(x.f) && x.f == old[lhs](x.f)
}
