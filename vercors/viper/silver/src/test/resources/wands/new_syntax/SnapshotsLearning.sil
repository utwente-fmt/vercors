//:: IgnoreFile(/carbon/issue/216/)
field f: Int
field g: Int

predicate Cell(x: Ref) {
    acc(x.f)
}

function get(x: Ref): Int
requires Cell(x) {
    unfolding Cell(x) in x.f
}

method test0(x: Ref) {
    inhale (true --* acc(x.f)) && applying (true --* acc(x.f)) in x.f == 0
    apply true --* acc(x.f)
    assert x.f == 0
}

method test1(x: Ref) {
    inhale (true --* acc(x.f) && (x.f == 0 ==> acc(x.g))) && applying (true --* acc(x.f) && (x.f == 0 ==> acc(x.g))) in
    (x.f == 0 ==> x.g == 0)
    apply true --* acc(x.f) && (x.f == 0 ==> acc(x.g))
    if (x.f == 0) {
        assert x.g == 0
    }
}

method test2(x: Ref) {
    inhale (true --* Cell(x)) && applying (true --* Cell(x)) in get(x) == 0
    apply true --* Cell(x)
    unfold Cell(x)
    assert x.f == 0
}
