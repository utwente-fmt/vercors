//:: IgnoreFile(/carbon/issue/216/)
field f: Int

method test0(x: Ref)
requires forall y: Ref :: true ==> acc(y.f)
requires x.f == 0 {
    package true --* true {
        assert acc(x.f) && x.f == 0
    }
    assert forall y: Ref :: y != x ==> acc(y.f)
    assert forall y: Ref :: y != x ==> acc(y.f)

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y: Ref :: true ==> acc(y.f)
}

method test1() {
    var y: Ref
    y := new()
    package true --* true {
        inhale forall x: Ref :: true ==> acc(x.f)
        assert forall x: Ref :: true ==> acc(x.f)
        exhale acc(y.f)
        assert forall x: Ref :: x != y ==> acc(x.f)
        assert forall x: Ref :: x != y ==> acc(x.f)

        //:: ExpectedOutput(assert.failed:insufficient.permission)
        assert forall x: Ref :: true ==> acc(x.f)
    }
}

method test2(x: Ref)
requires forall y: Ref :: true ==> acc(y.f, 1/2)
requires x.f == 0 {
    package (forall y: Ref :: true ==> acc(y.f, 1/2)) --* acc(x.f) && x.f == 0
    assert forall y: Ref :: y != x ==> acc(y.f, 1/2)

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y: Ref :: true ==> acc(y.f, 1/2)
}

method test3(x: Ref)
requires forall y: Ref :: true ==> acc(y.f, 1/2)
requires x.f == 0 {
    package (forall y: Ref :: true ==> acc(y.f, 1/2)) --* true {
        assert forall y: Ref :: true ==> acc(y.f)
        assert x.f == 0
    }

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y: Ref :: y != x ==> acc(y.f, 1/2)
}

method test4(x: Ref)
requires forall y: Ref :: true ==> acc(y.f)
requires x.f == 0 {
    package (forall y: Ref :: y != x ==> acc(y.f)) --* true {
        assert forall y: Ref :: true ==> acc(y.f)
        assert x.f == 0
    }
    assert forall y: Ref :: y != x ==> acc(y.f)

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y: Ref :: true ==> acc(y.f)
}

method test5(x: Ref)
requires forall y: Ref :: true ==> acc(y.f) {
    package (forall y: Ref :: y != x ==> acc(y.f, 1/2)) --* (forall y: Ref :: true ==> acc(y.f))
    assert forall y: Ref :: y != x ==> acc(y.f, 1/2)

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y: Ref :: true ==> acc(y.f, 1/2)
}

method test6(x: Ref)
requires forall y: Ref :: true ==> acc(y.f, 1/2)
requires x.f == 0 {
	package (forall y: Ref :: true ==> acc(y.f, 1/2)) --* true {
		assert acc(x.f) && x.f == 0
	}
	assert forall y: Ref :: y != x ==> acc(y.f, 1/2)
    
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y: Ref :: true ==> acc(y.f, 1/2)
}

method test7(x: Ref)
requires forall y: Ref :: true ==> acc(y.f)
requires x.f == 0 {
    package (forall y: Ref :: true ==> acc(y.f)) --* (forall y: Ref :: true ==> acc(y.f))
    apply (forall y: Ref :: true ==> acc(y.f)) --* (forall y: Ref :: true ==> acc(y.f))
    assert x.f == 0
}

method test8(x: Ref)
requires forall y: Ref :: true ==> acc(y.f)
requires x.f == 0 {
    package true --* (forall y: Ref :: true ==> acc(y.f))
    apply true --* (forall y: Ref :: true ==> acc(y.f))
    assert x.f == 0
}

method test9(x: Ref)
requires forall y: Ref :: true ==> acc(y.f)
requires x.f == 0 {
    package (forall y: Ref :: true ==> acc(y.f)) --* acc(x.f)
    apply (forall y: Ref :: true ==> acc(y.f)) --* acc(x.f)
    assert x.f == 0
}

method test10(x: Ref)
requires forall y: Ref :: true ==> acc(y.f)
requires x.f == 0 {
    package true --* acc(x.f)
    apply true --* acc(x.f)
    assert x.f == 0
}

method test11(x: Ref)
requires acc(x.f) && x.f == 0 {
    package (forall y: Ref :: y != x ==> acc(y.f)) --* (forall y: Ref :: true ==> acc(y.f))
    inhale forall y: Ref :: y != x ==> acc(y.f)
    apply (forall y: Ref :: y != x ==> acc(y.f)) --* (forall y: Ref :: true ==> acc(y.f))
    assert x.f == 0
}

method test12(x: Ref)
requires forall y: Ref :: true ==> acc(y.f, 1/2) {
    package (forall y: Ref :: true ==> acc(y.f, 1/2)) && x.f == 0 --* true {
        assert acc(x.f) && x.f == 0
    }
}