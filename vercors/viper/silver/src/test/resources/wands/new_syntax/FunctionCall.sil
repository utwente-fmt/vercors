//:: IgnoreFile(/carbon/issue/216/)
field f: Int

predicate Cell(x: Ref) {
    acc(x.f)
}

function getAndTransform(x: Ref): Int
requires Cell(x) {
    unfolding Cell(x) in x.f+2 
}

method test0(x: Ref)
requires Cell(x)
ensures Cell(x) {
    package Cell(x) && (unfolding Cell(x) in x.f == 0) --* Cell(x) && getAndTransform(x) == 2 {
        if (getAndTransform(x) != 2) {
            assert false
        }
    }
}

method test1(x: Ref)
requires acc(x.f)
//:: ExpectedOutput(postcondition.violated:insufficient.permission)
ensures Cell(x)
{
    x.f := 0
    fold Cell(x)
    package true --* Cell(x) && getAndTransform(x) == 2 {
        assert Cell(x)
        if (getAndTransform(x) != 2) {
            assert false
        }
    }
}
