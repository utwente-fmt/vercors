//:: IgnoreFile(/carbon/issue/216/)
field f: Int
field g: Int
field next: Ref

predicate List(x: Ref) {
    acc(x.f) && acc(x.next) && (x.next != null ==> List(x.next))
}

function length(x: Ref): Int
  requires List(x)
{
    unfolding List(x) in (x.next == null ? 1 : 1 + length(x.next))
}

predicate pair(x: Ref) {
    acc(x.f) && acc(x.g)
}

function sum(x: Ref): Int
requires pair(x) {
    unfolding pair(x) in x.f + x.g
}

method test0(x: Ref)
requires acc(x.f) && acc(x.g) {
    x.g := 1
    package acc(x.f) --* pair(x) {
        fold pair(x)
    }
    x.f := 2
    apply acc(x.f) --* pair(x)
    assert sum(x) == 3
}

method test1(x: Ref)
requires acc(x.f) && acc(x.g) {
    x.g := 1
    package acc(x.f) --* acc(x.f) && acc(x.g)
    x.f := 2
    apply acc(x.f) --* acc(x.f) && acc(x.g)
    assert x.f == 2 && x.g == 1
}

method test2(x: Ref)
requires acc(x.f) && acc(x.g) {
    x.f := 2
    x.g := 1
    fold pair(x)
    package true --* pair(x)
    apply true --* pair(x)
    assert sum(x) == 3
}

method test3(x: Ref)
requires List(x)
ensures List(x) && length(x) == old(length(x)) {
    package List(x) --* List(x)
    apply List(x) --* List(x)
}

method test4(x: Ref)
requires acc(x.f) && x.f == 1 {
    package acc(x.f, 1/2) --* acc(x.f, 1/2)
    package acc(x.f) --* acc(x.f) && (acc(x.f) --* acc(x.f)) {
            package acc(x.f, 1/2) --* acc(x.f, 1/2)
            apply acc(x.f, 1/2) --* acc(x.f, 1/2)
            package acc(x.f) --* acc(x.f) {
                apply acc(x.f, 1/2) --* acc(x.f, 1/2)
            }
    }
    apply acc(x.f) --* acc(x.f) && (acc(x.f) --* acc(x.f))
    x.f := 2
    apply acc(x.f) --* acc(x.f)
    assert x.f == 2

    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method test5(x: Ref)
requires acc(x.f) && x.f == 0 {
    package acc(x.f, 1/2) && x.f == 1 --* acc(x.f) && false

    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}