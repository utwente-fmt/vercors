//:: IgnoreFile(/carbon/issue/216/)
field f: Int

predicate Cell(x: Ref) {
    acc(x.f)
}

predicate Pair(x: Ref, y: Ref) {
    acc(x.f) && acc(y.f)
}

function get(x: Ref): Int
requires acc(Cell(x), 1/2) {
    unfolding acc(Cell(x), 1/2) in x.f
}

function sum(x: Ref, y: Ref): Int
requires Pair(x, y) {
    unfolding Pair(x, y) in x.f + y.f
}

method test0(x: Ref)
requires forall y: Ref :: true ==> Cell(y)
requires get(x) == 0 {
    package true --* true {
        assert Cell(x) && get(x) == 0
    }
    assert forall y: Ref :: y != x ==> Cell(y)

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y: Ref :: true ==> Cell(y)
}

method test1() {
    var y: Ref
    y := new()
    package true --* true {
        inhale forall x: Ref :: true ==> Cell(x)
        assert forall x: Ref :: true ==> Cell(x)
        exhale Cell(y)
        assert forall x: Ref :: x != y ==> Cell(x)
        assert forall x: Ref :: x != y ==> Cell(x)

        //:: ExpectedOutput(assert.failed:insufficient.permission)
        assert forall x: Ref :: true ==> Cell(x)
    }
}

method test2(x: Ref)
requires forall y: Ref :: true ==> acc(Cell(y), 1/2)
requires get(x) == 0 {
    package (forall y: Ref :: true ==> acc(Cell(y), 1/2)) --* Cell(x) && get(x) == 0
    assert forall y: Ref :: y != x ==> acc(Cell(y), 1/2)

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y: Ref :: true ==> acc(Cell(y), 1/2)
}

method test3(x: Ref)
requires forall y: Ref :: true ==> acc(Cell(y), 1/2)
requires get(x) == 0 {
    package (forall y: Ref :: true ==> acc(Cell(y), 1/2)) --* true {
        assert forall y: Ref :: true ==> Cell(y)
        assert get(x) == 0
    }

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y: Ref :: y != x ==> acc(Cell(y), 1/2)
}

method test4(x: Ref)
requires forall y: Ref :: true ==> Cell(y)
requires get(x) == 0 {
    package (forall y: Ref :: y != x ==> Cell(y)) --* true {
        assert forall y: Ref :: true ==> Cell(y)
        assert get(x) == 0
    }
    assert forall y: Ref :: y != x ==> Cell(y)

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y: Ref :: true ==> Cell(y)
}

method test5(x: Ref)
requires forall y: Ref :: true ==> Cell(y) {
    package (forall y: Ref :: y != x ==> acc(Cell(y), 1/2)) --* (forall y: Ref :: true ==> Cell(y))
    assert forall y: Ref :: y != x ==> acc(Cell(y), 1/2)

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y: Ref :: true ==> acc(Cell(y), 1/2)
}

method test6(x: Ref)
requires forall y: Ref :: true ==> acc(Cell(y), 1/2)
requires get(x) == 0 {
	package (forall y: Ref :: true ==> acc(Cell(y), 1/2)) --* true {
		assert Cell(x) && get(x) == 0
	}
	assert forall y: Ref :: y != x ==> acc(Cell(y), 1/2)
    
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y: Ref :: true ==> acc(Cell(y), 1/2)
}

method test7(x: Ref)
requires forall y: Ref :: true ==> Cell(y)
requires get(x) == 0 {
    package (forall y: Ref :: true ==> Cell(y)) --* (forall y: Ref :: true ==> Cell(y))
    apply (forall y: Ref :: true ==> Cell(y)) --* (forall y: Ref :: true ==> Cell(y))
    assert get(x) == 0
}

method test8(x: Ref)
requires forall y: Ref :: true ==> Cell(y)
requires get(x) == 0 {
    package true --* (forall y: Ref :: true ==> Cell(y))
    apply true --* (forall y: Ref :: true ==> Cell(y))
    assert get(x) == 0
}

method test9(x: Ref)
requires forall y: Ref :: true ==> Cell(y)
requires get(x) == 0 {
    package (forall y: Ref :: true ==> Cell(y)) --* Cell(x)
    apply (forall y: Ref :: true ==> Cell(y)) --* Cell(x)
    assert get(x) == 0
}

method test10(x: Ref)
requires forall y: Ref :: true ==> Cell(y)
requires get(x) == 0 {
    package true --* Cell(x)
    apply true --* Cell(x)
    assert get(x) == 0
}

method test11(x: Ref)
requires Cell(x) && get(x) == 0 {
    package (forall y: Ref :: y != x ==> Cell(y)) --* (forall y: Ref :: true ==> Cell(y))
    inhale forall y: Ref :: y != x ==> Cell(y)
    apply (forall y: Ref :: y != x ==> Cell(y)) --* (forall y: Ref :: true ==> Cell(y))
    assert get(x) == 0
}

method test12(x: Ref)
requires forall y: Ref :: true ==> acc(Cell(y), 1/2) {
    package (forall y: Ref :: true ==> acc(Cell(y), 1/2)) && get(x) == 0 --* true {
        assert Cell(x) && get(x) == 0
    }
}

method test13(x0: Ref, x1: Ref)
requires x0 != x1
requires forall y0: Ref, y1: Ref :: y0 != y1 ==> Pair(y0, y1)
requires sum(x0, x1) == 0 {
    package true --* true {
        assert Pair(x0, x1) && sum(x0, x1) == 0
    }
    assert forall y0: Ref, y1: Ref :: !(y0 in Set(x0, x1)) && !(y1 in Set(x0, x1)) && y0 != y1 ==> Pair(y0, y1)

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall y0: Ref, y1: Ref :: y0 != y1 ==> Pair(y0, y1)
}