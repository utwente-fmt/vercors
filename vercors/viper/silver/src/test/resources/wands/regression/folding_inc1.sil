//:: IgnoreFile(/carbon/issue/216/)
field f: Int
field g: Ref
field h: Ref

method test02(x: Ref) {
  package (true) --* true {
      package (false --* true) {
          fold P(x)
      }

  }

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test03(x:Ref)
  requires acc(P(x),1/2)
{
  package acc(P(x),1/2) --* acc(P(x))
}

method test04(x:Ref) {
  package (acc(x.f)) --* true {
      package (acc(x.f) --* false) {
          fold Q(x)
      }

  }

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}


method test06(x:Ref) {
  //:: ExpectedOutput(package.failed:insufficient.permission)
  package (acc(x.f)) --* acc(x.f) {
      fold P(x)
  }
}


predicate P(x: Ref) {
  acc(x.f)
}

predicate Q(x: Ref) {
  acc(x.f) && acc(x.f)
}


