//:: IgnoreFile(/carbon/issue/216/)
field f: Int
field g: Int
field h: Int

predicate Pair(this: Ref) {
  acc(this.f) && acc(this.g)
}

function sum(p: Ref): Int
  requires acc(Pair(p))
{ unfolding acc(Pair(p)) in (p.f) + (p.g) }

method test00(p: Ref)
  requires acc(p.f)
  requires acc(p.f) --* acc(p.g)
{
    // h: p.f * (p.f --* p.g)
  package (true) --* true {
      apply acc(p.f) --* acc(p.g)
  }

    // h: true --* true

  assert true --* true;

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert acc(p.f)
}

method test01(p: Ref)
  requires acc(p.f) && acc(p.h)
  requires acc(p.h) --* acc(p.g)
{
    // h: p.f * p.h * (p.h --* p.g)
  package (true) --* acc(Pair(p)) {
      apply acc(p.h) --* acc(p.g)
      fold acc(Pair(p))
  }
    // h: (true --* p.Pair)

  assert true --* acc(Pair(p));

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert acc(p.f)
}

method test02(x: Ref)
  requires acc(x.f)
{
  x.f := 0
  package acc(x.f, 1/2) --* (acc(x.f) && x.f == 0)
  assert acc(x.f, 1/2)
  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert acc(x.f, 2/3)
}

method test03(x: Ref)
  requires acc(x.f) && acc(x.g)
{
  //:: ExpectedOutput(package.failed:insufficient.permission)
  package (true) --* acc(x.f) {
      fold acc(Pair(x))
  }
}

method test04(x: Ref, y: Ref)
  requires y != null
  requires acc(x.f) && acc(x.g)
{
  //:: ExpectedOutput(package.failed:insufficient.permission)
  package (true) --* acc(y.f) {
      fold acc(Pair(x))
  }
}

method test05(x: Ref, y: Ref)
  requires acc(y.f)
  requires acc(x.f) && acc(x.g)
  ensures true --* acc(y.f)
{
  package (true) --* acc(y.f) {
      fold acc(Pair(x))
  }
}
