//:: IgnoreFile(/carbon/issue/216/)
//:: IgnoreFile(/carbon/issue/103/)

field __CONFIG_HEURISTICS: Bool

field f: Ref
field g: Int
field h: Int

method test01(x: Ref) {
  inhale true --* acc(x.f)

  inhale x != null /* TODO: Without it, the subsequent exhale fails because x
                    *       might be null, which doesn't trigger applying the
                    *       wand (which would yield the assumption that x != null)
                    */

  exhale acc(x.f)
}

method test02(x: Ref)
  requires true --* acc(x.f)
  requires x != null /* TODO: Try to make redundant */
{
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale acc(x.f)
  exhale true --* acc(x.f) // This assertion fails after the heuristic applied the wand
}

//method test03(x: Ref, y: Ref)
//  requires true --* x == y
//{
//  exhale x == y
//  exhale true --* x == y /* Packaging-heuristics should take care of this */
//  //:: ExpectedOutput(assert.failed:assertion.false)
//  assert false
//}

method test04(x: Ref)
  requires x != null
  requires acc(x.f) --* acc(x.g) --* acc(x.h)
  requires acc(x.f) && acc(x.g)
{
//  apply acc(x.f) --* acc(x.g) --* acc(x.h)
//  apply acc(x.g) --* acc(x.h)

  exhale acc(x.h)
}

/* Currying-Uncurrying Example */

predicate P() { true }
predicate Q() { true }
predicate R() { true }

define A acc(P())
define B acc(Q())
define C acc(R())

/* A * B --* C  ==>  A --* B --* C */
method curry() {
  inhale A && B --* C

//  package A --* packaging (B --* applying (A && B --* C) in C) in B --* C

  /* Requires three nested levels of heuristics (package -> packaging -> applying) */
  exhale A --* (B --* C)
}

/* A --* B --* C  ==>  A * B --* C */
method uncurry(x: Ref) {
  inhale A --* (B --* C)

//  package A && B --* applying (A --* (B --* C)) in applying (B --* C) in C

  exhale A && B --* C
}

/* Regression tests related to curry/uncurry */

method test05 () {
  inhale true --* B
  exhale A --* B
}

method test06 (x: Ref) {
  inhale true --* (true --* C)
  exhale true --* C
}

method test07(x: Ref) {
  inhale A --* (true --* C)
  exhale A --* C
}

method test08(x: Ref) {
  inhale true --* (B --* true)

  package (B) --* true {
      apply B --* true
  }

  exhale B --* true
}
