//:: IgnoreFile(/carbon/issue/216/)
//:: IgnoreFile(/Silver/issue/125/)

field __CONFIG_HEURISTICS: Bool

field f: Ref
field g: Int
field h: Int

predicate P(x: Ref, v: Int) { acc(x.g) && x.g == v }

method test01(x: Ref, v: Int) {
  inhale acc(x.f) && acc(P(x.f, v))
  inhale x.f != null /* TODO: Should not be necessary */

  assert acc(x.f.g)
}

method test02(x: Ref) {
  inhale acc(x.f) && acc(x.f.g)
  var v: Int := x.f.g
  x.f.g := x.f.g + 1

  assert acc(P(x.f, v + 1))
}

method test04() {
  var x: Ref
  var y: Ref
  var r: Ref

  inhale acc(P(x, 0)) --* acc(P(y, 0))

  var oldx: Ref := x
  x := r

  package acc(P(oldx, 0)) --* acc(P(y, 0))
}

/* From the list_insert example */

field val: Int
field next: Ref

predicate List(xs: Ref) {
//	acc(xs.next) && acc(List(xs.next))
//	acc(xs.val) && acc(xs.next) && acc(List(xs.next))
//  acc(xs.next) && (xs.next != null ==> acc(List(xs.next)))
//  acc(xs.next) && acc(List(xs.next), xs.next != null ? write : none)
  acc(xs.val) && acc(xs.next) && (xs.next != null ==> acc(List(xs.next)))
}

method test03() {
  var xs: Ref
  var crt: Ref
  var nxt: Ref

  define A acc(List(crt))
  define B acc(List(xs))

  inhale xs != null && nxt != null
  inhale acc(crt.val)
  inhale acc(crt.next)
  inhale nxt == crt.next
  inhale acc(List(nxt))
  inhale A --* B

  var prev: Ref := crt
  unfold List(nxt)
  crt := nxt
  nxt := nxt.next

//  package A --* /*folding List(prev) in*/ /*applying w in*/ B

  assert acc(crt.val)
  assert acc(crt.next)
  assert nxt == crt.next
  assert nxt != null ==> acc(List(nxt))
  assert A --* B
}

/* From the tree_delete_min example */

field l: Ref
//field r: Ref

predicate Tree(x: Ref) {
     acc(x.l) && acc(Tree(x.l))
  //&& acc(x.r) && acc(Tree(x.r))
}

method test05(x: Ref) {
  var p: Ref

  define A acc(p.l) && acc(Tree(p.l))
  define B acc(Tree(x))

  inhale p != null && acc(p.l) && acc(Tree(p.l)) && p.l != null
  inhale A --* B

  unfold acc(Tree(p.l))
  p := p.l

//  package A --* /*folding Tree(p) in*/ /*applying w in*/ B

  exhale p != null && acc(p.l) && acc(Tree(p.l))
  exhale A --* B
}
