//:: IgnoreFile(/carbon/issue/216/)
field f: Int
field g: Int 

predicate Single(this: Ref) {
  acc(this.f) 
}

function sum(p: Ref): Int
  requires acc(Single(p))
{
  unfolding acc(Single(p)) in p.f
}

method t01(xs:Ref)
requires acc(Single(xs)) 
{
  var i:Int
  i := sum(xs) 
   
  unfold Single(xs) 
  package (true) --* acc(Single(xs)) && sum(xs)==i {
      fold Single(xs)
  }
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
