//:: IgnoreFile(/carbon/issue/216/)
field f: Int
field g: Int 

predicate Single(this: Ref) {
  acc(this.f) 
}

function sum(p: Ref): Int
  requires acc(Single(p))
{
  unfolding acc(Single(p)) in p.f
}


method t01(xs:Ref)
requires acc(Single(xs)) 
{
  var i:Int
  unfold Single(xs) 
  xs.f := 3
  fold Single(xs) 
   
  package (true) --* acc(xs.f)&&xs.f==3 {
      unfold acc(Single(xs))
  }
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}



method t02(xs:Ref)
requires acc(Single(xs)) 
{
   assume sum(xs) == 3
  package (true) --* acc(Single(xs))&&sum(xs) == 3 {
      unfold acc(Single(xs))
      fold acc(Single(xs))
  }
  
   //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
  
}


method t03(x:Ref) 
{
  inhale acc(Single(x)) 
  inhale acc(x.g) 
  
  package true --* acc(Single(x))&&acc(x.g)
  
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false

}
