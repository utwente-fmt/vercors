//:: IgnoreFile(/carbon/issue/216/)
/* Consistency checks (performed on the real Silver AST, not the parser AST) */

field f: Int
field g: Int

predicate Pair(this: Ref) {
  acc(this.f) && acc(this.g)
}


/* Wands outside of package/packaging must be ghost-operation-free */

method test01(p: Ref)
  //:: ExpectedOutput(consistency.error)
  requires acc(p.f) --* unfolding Pair(p) in acc(p.f)
{}

method test04(p: Ref)
  requires acc(p.f) --* acc(Pair(p))
{
  //:: ExpectedOutput(consistency.error)
  exhale acc(p.f) --* (applying (acc(p.f) --* acc(Pair(p))) in acc(p.f))
}

method test10(p: Ref) {
  //:: ExpectedOutput(consistency.error)
  assert applying ((unfolding Pair(p) in acc(p.f)) --* true) in true
}


/* Unfolding outside of package/packaging must be pure */

method test02(p: Ref)
  requires acc(Pair(p))
  //:: ExpectedOutput(consistency.error)
  requires unfolding Pair(p) in acc(p.f)

{}

method test03() {
  var p: Ref
  p := new()

  //:: ExpectedOutput(consistency.error)
  assert unfolding Pair(p) in acc(Pair(p))
}


/* Applying/packaging must occur inside wands */

function foobar(x: Ref): Int
  requires true --* acc(x.f)
{
  applying (true --* acc(x.f)) in x.f
}

predicate test18(x: Ref) {
  acc(x.f) && (acc(x.f) --* acc(x.g)) && applying (acc(x.f) --* acc(x.g)) in true
}


/* Ghost operations on the left of a wand are not supported (and not
 * necessary, they could be performed outside of the wand)
 */

method test08(p: Ref) {
  //:: ExpectedOutput(consistency.error)
  package (unfolding Pair(p) in acc(p.f)) --* true

}

method test05(p: Ref) {
  //:: ExpectedOutput(consistency.error)
  apply (unfolding Pair(p) in acc(p.f)) --* true

}
