//:: IgnoreFile(/carbon/issue/216/)
//:: IgnoreFile(/carbon/issue/103/)

field __CONFIG_HEURISTICS: Bool

field f: Ref
field g: Int
field h: Int

method test00()
  requires true --* true
{
  exhale true --* true
}

method test01() {
  exhale true --* true
//  assert false
}

method test02(x: Ref)
  requires acc(x.f) && acc(x.g)
  ensures acc(x.f) && acc(x.f) --* acc(x.g)
{}

method test03(x: Ref)
  requires acc(x.f) && acc(x.g)
  //:: ExpectedOutput(postcondition.violated:wand.not.found)
  ensures acc(x.f) --* acc(x.g) && acc(x.f)
  ensures acc(x.g) // This assertion fails after the heuristic packaged the wand
{}

method test04(x: Ref)
  requires acc(x.f)
  //:: ExpectedOutput(postcondition.violated:wand.not.found)
  ensures true --* acc(x.g)
{}

method test05a(x: Ref)
  requires acc(x.f) && acc(x.g)
  ensures acc(x.g) --* acc(x.f) && acc(x.g)
  ensures acc(x.g)
{}

method test05b(x: Ref)
  requires acc(x.f) && acc(x.g)
  ensures acc(x.g)
  ensures acc(x.g) --* acc(x.f) && acc(x.g)
{}

method test010() {
  exhale true --* (true --* true)
}

method test06(x: Ref)
  requires acc(x.f) && acc(x.g)
  ensures acc(x.f) --* (acc(x.g) --* acc(x.f) && acc(x.g))
  ensures acc(x.f) && acc(x.g)
{}

method test11(x: Ref) {
  inhale acc(x.f) && acc(x.g)
  //:: ExpectedOutput(exhale.failed:wand.not.found)
  exhale acc(x.f) --* (acc(x.g) --* acc(x.f) && acc(x.g))
  exhale acc(x.f) && acc(x.g)
  assert false // Fails
}

method test07(x: Ref)
  //:: ExpectedOutput(postcondition.violated:wand.not.found)
  ensures acc(x.f) --* (acc(x.g) --* acc(x.f) && acc(x.g))
  ensures acc(x.f) && acc(x.g) // Fails
{}

method test08a(x: Ref)
  requires acc(x.g)
  ensures acc(x.f, 1/2) --* acc(x.f, 1/2) && acc(x.g, 1/2)
  ensures acc(x.f, 1/2) --* acc(x.f, 1/2) && acc(x.g, 1/2)
{}

method test08b(x: Ref)
  requires acc(x.g)
  //:: ExpectedOutput(postcondition.violated:wand.not.found)
  ensures acc(x.f, 1/2) --* acc(x.f, 1/2) && acc(x.g, 1/2)
  ensures acc(x.f, 1/2) --* acc(x.f, 1/2) && acc(x.g, 1/2)
  ensures acc(x.g) // Fails
{}

method test09(x: Ref)
  requires acc(x.g)
  ensures acc(x.f) --*
               (acc(x.f, 1/2) --* acc(x.f, 1/2) && acc(x.g, 1/2))
            && (acc(x.f, 1/2) --* acc(x.f, 1/2) && acc(x.g, 1/2))
{}

method test10(x: Ref)
  requires acc(x.f) && acc(x.g)
{
  exhale true --* true
  exhale true --* acc(x.f, 1/2) /* Consumes acc(x.f, 1/2)*/
  assert acc(x.f, 1/2) && acc(x.g)

  assert acc(x.f, 1/2) --* acc(x.g, 1/2) /* Each assert temporarily consumes ... */
  assert acc(x.f, 1/2) --* acc(x.g, 1/2) /* ... acc(x.g, 1/2), but the effect ... */
  assert acc(x.f, 1/2) --* acc(x.g, 1/2) /* ... of each assert statement should ... */
  assert acc(x.f, 1/2) --* acc(x.g, 1/2) /* ... not be observable afterwards */
  assert acc(x.f, 1/2) && acc(x.g)

  exhale acc(x.f, 1/2) --* acc(x.g, 1/2)
  assert acc(x.g, 1/2) && acc(x.f, 1/2)

  exhale true --* acc(x.f, 1/2) && acc(x.g, 1/2) /* Consumes acc(x.f, 1/2) && acc(x.g, 1/2) */

//  assert acc(x.f, 1/2) // Must fail
}
