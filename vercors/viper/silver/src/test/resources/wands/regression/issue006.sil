//:: IgnoreFile(/carbon/issue/216/)
field val : Int;

method test03(x: Ref) {
  var y: Ref := x

  package true --* x == x
  apply   true --* x == y
}

method test04() {
  var b: Bool
  b := true

  package b --* true
  b := !b
  apply !b --* true
}

method test05(x: Int) {
  var a: Int := x

  package x == a --* true
  a := a + 1
  apply x == a - 1 --* true

  package x == a --* true
  a := a + 2
  //:: ExpectedOutput(apply.failed:assertion.false)
  apply x == a - 1 --* true
}

method test01(l: Ref)
  requires acc(l.val)
{
  var x: Int := l.val

  package acc(l.val) && l.val == old(l.val) --* acc(l.val)

  apply   acc(l.val) && l.val == x          --* acc(l.val)
}

method test02(l: Ref)
  requires acc(l.val)
{
  var x: Int := l.val

  package acc(l.val) && l.val == l.val --* acc(l.val)

  //:: ExpectedOutput(apply.failed:wand.not.found)
  apply   acc(l.val) && l.val == x     --* acc(l.val)
}

method test06(xs: Seq[Int], n: Int)
  requires |xs| == n
{
  package true --* |xs| == n
  var ys: Seq[Int] := xs ++ Seq(n)
  apply true --* |ys| == n + 1
}

function sum(xs: Seq[Int]): Int
{
  |xs| == 0 ? 0 : xs[0] + sum(xs[1..])
}

method test07(xs: Seq[Int], n: Int)
  requires sum(xs) == n
{
  package true --* sum(xs) == n
  var ys: Seq[Int] := Seq(n) ++ xs
  assert xs == ys[1..] /* Required in order to prove that sum(ys) == 2*n */
  apply true --* sum(ys) == 2*n
}

domain Foo {
  function atMost(x: Int, y: Int): Bool

  axiom atMost_def {
    forall x: Int, y: Int :: atMost(x, y) <==> x <= y
  }
}

method test08a() {
  var x: Int
  var y: Int

  package x < y --* atMost(x, y)
  //:: ExpectedOutput(apply.failed:assertion.false)
  apply x < y --* atMost(x, y)
}

method test08b() {
  var x: Int
  var y: Int

  package x <= y --* atMost(x, y)
  assume x < y
  x := x + 1
  apply x <= y --* atMost(x, y)
}
