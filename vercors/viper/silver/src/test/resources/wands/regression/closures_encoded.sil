//:: IgnoreFile(/carbon/issue/216/)
//:: IgnoreFile(/Silver/issue/125/)

field f: Int

predicate c1_pre(x: Ref) { true }
predicate c1_post(x: Ref) { true }
predicate c2_pre(x: Ref) { true }
predicate c2_post(x: Ref) { true }
predicate c3_pre(x: Ref) { true }
predicate c3_post(x: Ref) { true }

method triple_not_nested(x: Ref)
  requires acc(c1_pre(x))
  requires acc(c1_post(x)) --* acc(c2_pre(x))
  requires acc(c2_post(x)) --* acc(c3_pre(x))
  ensures acc(c3_post(x))
{
  exhale acc(c1_pre(x))
  inhale acc(c1_post(x))

  apply acc(c1_post(x)) --* acc(c2_pre(x))

  exhale acc(c2_pre(x))
  inhale acc(c2_post(x))

  apply acc(c2_post(x)) --* acc(c3_pre(x))

  exhale acc(c3_pre(x))
  inhale acc(c3_post(x))
}

method call_triple_not_nested() {
  var x: Ref
  x := new(f)

  x.f := 1
  var w: Int := x.f

  package acc(x.f) && x.f == w - 2 --* acc(x.f)
  package acc(x.f) && x.f == w + 1 --* acc(x.f) && x.f > 0

  x.f := -10

  // :: ExpectedOutput(exhale.failed:wand.outdated)
  exhale     acc(x.f)
         && (acc(x.f) && x.f == w + 1 --* acc(x.f) && x.f > 0)
         && (acc(x.f) && x.f == w - 2 --* acc(x.f))
}

method triple_nested(x: Ref)
  requires acc(c1_pre(x))
  requires acc(c1_post(x)) --*
            (   acc(c2_pre(x))
             && (acc(c2_post(x)) --* acc(c3_pre(x))))
  ensures acc(c3_post(x))
{
  exhale acc(c1_pre(x))
  inhale acc(c1_post(x))

  apply (acc(c1_post(x)) --*
          (   acc(c2_pre(x))
           && (acc(c2_post(x)) --* acc(c3_pre(x)))))

  exhale acc(c2_pre(x))
  inhale acc(c2_post(x))

  apply acc(c2_post(x)) --* acc(c3_pre(x))

  exhale acc(c3_pre(x))
  inhale acc(c3_post(x))
}

method call_triple_nested() {
  var x: Ref
  x := new(f)

  x.f := 1
  var a: Int := x.f

//  package acc(x.f) && x.f == a + 1 --* acc(x.f) && x.f > 0
//  wand w := acc(x.f) && x.f == a + 1 --* acc(x.f) && x.f > 0

  package true --* true
  package true --* (true --* true)
//  package acc(x.f) && x.f == a - 2 --* acc(x.f) && w
}
