//:: IgnoreFile(/carbon/issue/216/)
field f: Int
field g: Int
field h: Ref

predicate Pair(x: Ref) { acc(x.f) && acc(x.g) }
predicate F(x: Ref) { acc(x.f) }

function fun(x: Ref): Int
  requires acc(F(x))
{ unfolding acc(F(x)) in x.f }

method test02(x: Ref) {
  package
    acc(Pair(x))
      --*
    let xf == (x.f) in
    acc(x.f)  {
        unfold acc(Pair(x))
    }
}

// Something similar to this test is not possible with the new syntax of package
/*method test00(x: Ref) {
  package
    acc(Pair(x))
      --*
    unfolding acc(Pair(x)) in
    let xf == (x.f) in
    folding acc(F(x)) in
    acc(F(x)) && fun(x) == xf
  //inhale Pair(x)
  //var z: Int := unfolding Pair(x) in x.f
  //apply acc(Pair(x))
  //    --* acc(F(x)) && fun(x) == z
}*/
