//:: IgnoreFile(/carbon/issue/216/)
field next: Ref;

predicate P(x: Ref) {acc(x.next) && acc(x.next.next)}
predicate Q(x: Ref) {acc(x.next)}

method test1(l: Ref)
{
  package (acc(P(l))) --* acc(l.next) && acc(Q(l.next)) {
      unfold P(l)
      fold Q(l.next)
  }
}

method test2(l: Ref)
  requires l != null
  requires true --* acc(l.next) && acc(Q(l.next))
{
  package (true) --* acc(l.next) && acc(l.next.next) {
      apply true --* acc(l.next) && acc(Q(l.next))
      unfold acc(Q(l.next))
  }
}

method test3(l: Ref)
  requires acc(l.next) && acc(l.next.next) --* acc(l.next) && acc(Q(l.next))
{
  package (acc(P(l))) --* acc(l.next) && acc(Q(l.next)) {
      unfold P(l)
      apply acc(l.next) && acc(l.next.next) --* acc(l.next) && acc(Q(l.next))
  }
}
