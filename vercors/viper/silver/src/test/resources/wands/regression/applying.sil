//:: IgnoreFile(/carbon/issue/216/)
field f: Int
field g: Int

predicate Pair(this: Ref) {
  acc(this.f) && acc(this.g)
}

function sum(p: Ref): Int
  requires acc(Pair(p))
{
  unfolding acc(Pair(p)) in p.f + p.g
}

method test02(p: Ref)
  requires true --* acc(p.f) && p.f > 0
{
  package (true) --* acc(p.f) && p.f > 0 {
      apply true --* acc(p.f) && p.f > 0
  }
  assert true --* acc(p.f) && p.f > 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test03(p: Ref)
  requires acc(p.f) && acc(p.g) --* acc(p.f) && acc(p.g)
  requires acc(p.g)
{
    //:: ExpectedOutput(package.failed:assertion.false)
  package (acc(p.f)) --* acc(p.f) && acc(p.g) && false {
      apply acc(p.f) && acc(p.g) --* acc(p.f) && acc(p.g)
  }
}

method test04(p: Ref)
  requires acc(p.f) && acc(p.g) --* acc(p.f) && acc(p.g)
  requires acc(p.g)
{
  package (acc(p.f)) --* acc(p.f) && acc(p.g) {
      apply acc(p.f) && acc(p.g) --* acc(p.f) && acc(p.g)
  }
  assert acc(p.f) --* acc(p.f) && acc(p.g)

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert acc(p.g)
}

method test01(p: Ref)
  requires acc(p.f, 1/2) --* acc(p.f) && p.f > 0
  requires acc(p.f, 1/2)
  requires acc(p.g)
{
  p.g := 1;

  package (acc(p.g, 1/2) && acc(p.f, 1/2)) --* acc(p.f) && acc(p.g) && p.f + p.g > 0 {
      apply acc(p.f, 1/2) --* acc(p.f) && p.f > 0
  }

  apply
    acc(p.g, 1/2) && acc(p.f, 1/2)
      --*
    acc(p.f) && acc(p.g) && p.f + p.g > 0

  fold acc(Pair(p))
  assert sum(p) > 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
