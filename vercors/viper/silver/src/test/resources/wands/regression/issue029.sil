//:: IgnoreFile(/carbon/issue/216/)
predicate P()
predicate Q(b: Bool) { b ==> acc(P()) }

field val: Int
field next: Ref

method test01(b: Bool) {
  package (acc(Q(b)) && unfolding Q(b) in true) --* true
}

predicate LL(x: Ref) {
     acc(x.val)
  && acc(x.next)
  && (x.next != null ==> acc(LL(x.next)))
}

define A1
     acc(LL(x))
  && (unfolding LL(x) in x.val == 10)
  && (unfolding LL(x) in x.next != null ==> unfolding LL(x.next) in x.next.val == 20)

define B1 acc(LL(x))

method test04(x: Ref) {
  inhale acc(LL(x))
  package A1 --* B1

  //:: ExpectedOutput(apply.failed:assertion.false)
  apply A1 --* B1
}

method test05() {
  var x: Ref; var y: Ref
  x := new (*)
  y := new (*)
  x.next := y
  x.val := 10
  x.next.val := 20
  x.next.next := null
  fold LL(x.next)
  fold LL(x)

  package A1 --* B1
  apply A1 --* B1
}

method test06(x: Ref) {
  inhale A1
  inhale A1 --* B1
  apply A1 --* B1

  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/304/)
  assert unfolding LL(x) in x.next != null ==> unfolding LL(x.next) in x.next.val == 2 * x.val
}

define B2
     acc(LL(x))
  && unfolding LL(x) in x.next != null ==> unfolding LL(x.next) in x.val < x.next.val

method test07(x: Ref) {
  package A1 --* B2

}

method test08(x: Ref) {
  inhale A1
  inhale A1 --* B2
  apply A1 --* B2

  assert unfolding LL(x) in x.next != null ==> unfolding LL(x.next) in x.val <= x.next.val
}

/*
 * Pure unfoldings that branched also crashed Silicon when they occurred on the right.
 */

method test02(b: Bool) {
  inhale acc(P())
  package (true) --* acc(Q(b)) {
      fold Q(b)
  }

  assert !b ==> acc(P())

  apply true --* acc(Q(b))
  assert acc(Q(b))

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert acc(P())
}

predicate LLC(x: Ref, i: Int) {
     acc(x.val) && x.val == i
  && acc(x.next)
  && (x.next != null ==> acc(LLC(x.next, i + 1)))
}

method test03(x: Ref) {
  define X acc(LLC(x, 0))

  define Y
       acc(LLC(x, 0))
    && unfolding acc(LLC(x, 0)) in
       (x.next != null ==> unfolding acc(LLC(x.next, 1)) in
                           x.next.val == 1)

  package X --* Y

  inhale acc(LLC(x, 0))
  apply X --* Y

  assert acc(LLC(x, 0))

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
