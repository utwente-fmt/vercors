//:: IgnoreFile(/carbon/issue/216/)
field f: Int
field next: Ref

method t01(x: Ref)
{
  //should fail since not enough permission to evaluate x.f > 0 ? 1/4:1/2
  //:: ExpectedOutput(wand.not.wellformed:insufficient.permission)
  //:: MissingOutput(wand.not.wellformed:insufficient.permission, /carbon/issue/105/)
  //:: UnexpectedOutput(package.failed:insufficient.permission, /carbon/issue/105/)
  //:: MissingOutput(wand.not.wellformed:insufficient.permission, /silicon/issue/201/)
  package acc(x.f,1/2) && x.f > -1 --* (acc(x.f, (x.f > 0 ? 1/4: 1/2)) )
}

method t02(x: Ref)
{
  inhale acc(x.f,2/4)
  package acc(x.f,2/4) && x.f > 0 --* (acc(x.f, 1/4) && acc(x.f, (x.f > 0 ? 2/4: 1/4)) )

  //:: UnexpectedOutput(exhale.failed:insufficient.permission, /silicon/issue/199/)
  exhale acc(x.f,1/4)

  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  //:: MissingOutput(exhale.failed:insufficient.permission, /silicon/issue/34/)
  exhale acc(x.f,1/4)
}

method t03(x: Ref)
  requires x != null
  requires acc(x.f,3/4)
{
  package true --* (acc(x.f, 1/4) && acc(x.f, (x.f > 0 ? 1/4: 1/2)) )

  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale(acc(x.f,1/4)) //shouldn't work, since can't prove that x.f > 0
}

method t04(x: Ref)
  requires x != null
  requires acc(x.f,3/4)
  requires x.f > 0
{
  package true --* (acc(x.f, 1/4) && acc(x.f, (x.f > 0 ? 1/4: 1/2)) )
  exhale(acc(x.f,1/4)) //should work

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false;
}

method t05(x: Ref)
  requires x != null
  requires acc(x.f,3/4)
  requires x.f > 0
{
  package true --* (acc(x.f, 1/4) && acc(x.f, (x.f > 0 ? 1/4: 1/2)) )

  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale(acc(x.f,1/2))
}

