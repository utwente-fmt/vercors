//:: IgnoreFile(/carbon/issue/216/)
/* A version of the (un)currying-example with additional sanity checks */

/* The predicate bodies can be arbitrary since the proofs never unfold the
 * predicates.
 */
predicate P() { true }
predicate Q() { true }
predicate R() { true }

define A acc(P())
define B acc(Q())
define C acc(R())

/* A --* B --* C  ==>  A * B --* C */
method uncurry() {
  inhale A --* (B --* C) /* requires */

  package (A && B) --* C {
      apply A --* (B --* C)
      apply B --* C
  }

  exhale A && B --* C /* ensures */

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

/* A * B --* C  ==>  A --* B --* C */
method curry() {
  inhale A && B --* C /* requires */

  package (A) --* (B --* C) {
      package (B --* C) {
          apply A && B --* C
      }

  }

  exhale A --* (B --* C) /* ensures */

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}


/* Regression tests */

method curry_test01(x: Ref)
  requires (acc(P()) && acc(Q())) --* acc(R())
  ensures acc(P()) --* (acc(Q()) --* acc(R()))
{
  inhale acc(P())

  //:: ExpectedOutput(apply.failed:insufficient.permission)
  apply (acc(P()) && acc(Q())) --* acc(R())
}

method curry_test02(x: Ref)
  requires (acc(P()) && acc(Q())) --* acc(R())
  //:: ExpectedOutput(postcondition.violated:wand.not.found)
  //:: MissingOutput(postcondition.violated:wand.not.found, /silicon/issue/34/)
  ensures acc(P()) --* (acc(Q()) --* acc(R()))
{
  inhale acc(P())

  package (acc(Q())) --* acc(R()) {
      apply (acc(P()) && acc(Q())) --* acc(R())
  }

  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale acc(P())
}

method curry_test03() {
  inhale C
  inhale true --* C

  package (true) --* true {
      package (true --* C) {
          apply true --* C
      }

  }

  exhale true --* true
  exhale C

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
