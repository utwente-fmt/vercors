field f: Int
field g:Int

predicate p(r:Ref) {
    acc(r.f)
}

predicate p2(r:Ref, i:Int) {
    acc(r.f) && r.f == i
}

method m1_1(r:Ref, xs:Seq[Ref], i:Int)
requires r in xs
requires forall x:Ref :: x in xs ==> ((i > 0) ==> acc(x.f)) && ((i <= 0) ==> acc(x.g))
ensures forall x:Ref :: x in xs ==> ((i > 0) ==> acc(x.f)) && ((i <= 0) ==> acc(x.g))
ensures i > 0 ==> r.f == 1
{
    if (i > 0) {
        r.f := 1;
        //:: ExpectedOutput(assignment.failed:insufficient.permission)
        r.g := 2;
    }

}

method m1_2(r:Ref, xs:Seq[Ref], i:Int)
requires r in xs
requires forall x:Ref :: x in xs ==> ((i > 0) ==> acc(x.f)) && ((i <= 0) ==> acc(x.g))
ensures forall x:Ref :: x in xs ==> ((i > 0) ==> acc(x.f)) && ((i <= 0) ==> acc(x.g))
ensures i <= 0 ==> r.g == 4
{
    if (i <= 0) {
        //:: ExpectedOutput(assignment.failed:insufficient.permission)
        r.f := 3;
        r.g := 4;
    }

}

method m2(r:Ref, xs:Seq[Ref], i:Int)
requires r in xs
requires forall x:Ref :: x in xs ==> acc(x.f) && acc(x.g)
ensures forall x:Ref :: x in xs ==> acc(x.f) && acc(x.g)
ensures i > 0 ==> r.f == 1 && r.g == 2
ensures i <= 0 ==> r.g == 4 && r.f == 3
{
    if (i > 0) {
        r.f := 1;
        r.g := 2;
    } else {
        r.f := 3;
        r.g := 4;
    }

}

method m3_1(r:Ref, xs:Seq[Ref], i:Int)
requires r in xs
requires forall x:Ref :: x in xs ==> ((i > 0) ==> acc(p(x))) && ((i <= 0) ==> acc(x.g))
ensures forall x:Ref :: x in xs ==> ((i > 0) ==> acc(p(x))) && ((i <= 0) ==> acc(x.g))
ensures i > 0 ==> unfolding p(r) in (r.f == 1)
{
    if (i > 0) {
        unfold p(r)
        r.f := 1;
        //:: ExpectedOutput(assignment.failed:insufficient.permission)
        r.g := 2;
        fold p(r)
    }

}

method m3_2(r:Ref, xs:Seq[Ref], i:Int)
requires r in xs
requires forall x:Ref :: x in xs ==> ((i > 0) ==> acc(p(x))) && ((i <= 0) ==> acc(x.g))
ensures forall x:Ref :: x in xs ==> ((i > 0) ==> acc(p(x))) && ((i <= 0) ==> acc(x.g))
ensures i <= 0 ==> r.g == 4
{
    if (i <= 0) {
        //:: ExpectedOutput(unfold.failed:insufficient.permission)
        unfold p(r)
        r.f := 3;
        r.g := 4;
        fold p(r)
    }

}

method m4(r:Ref, xs:Seq[Ref], i:Int)
requires r in xs
requires forall x:Ref :: x in xs ==> acc(p2(x, i)) && acc(x.g)
ensures forall x:Ref :: x in xs ==> acc(p2(x, i)) && acc(x.g)
ensures i > 0 ==> unfolding p2(r, i) in (r.f == i) && r.g == 2
ensures i <= 0 ==> unfolding p2(r, i) in (r.f == i) && r.g == 4
{
    if (i > 0) {
        unfold p2(r, i)
        assert r.f == i;
        r.g := 2;
        fold p2(r, i)
    } else {
        unfold p2(r, i)
        assert r.f == i;
        r.g := 4;
        fold p2(r, i)
    }

}