field f:Int

predicate p(r:Ref) {acc(r.f)}

method m1(xs:Seq[Ref])
requires forall x:Ref :: acc(x.f)
ensures forall x:Ref :: acc(x.f)
{}

method m2(xs:Seq[Ref])
requires forall x:Ref :: acc(p(x))
ensures forall x:Ref :: acc(p(x))
{}

method m3(r:Ref, xs:Seq[Ref], ys:Seq[Ref])
requires forall x:Ref :: ((x in xs) ==> acc(x.f)) && ((x in ys ==> acc(p(x))))
ensures forall x:Ref :: ((x in xs) ==> acc(x.f)) && ((x in ys ==> acc(p(x))))
ensures r in xs ==> r.f == 4
{
    if (r in xs) {
        r.f := 4
    }
}

method m4(r:Ref, xs:Seq[Ref], ys:Seq[Ref])
requires forall x:Ref :: ((x in xs) ==> acc(x.f)) && ((x in ys ==> acc(p(x))))
ensures forall x:Ref :: ((x in xs) ==> acc(x.f)) && ((x in ys ==> acc(p(x))))
ensures r in ys ==> unfolding p(r) in (r.f == 4)
{
    if (r in ys) {
        unfold acc(p(r))
        r.f := 4
        fold acc(p(r))
    }
}