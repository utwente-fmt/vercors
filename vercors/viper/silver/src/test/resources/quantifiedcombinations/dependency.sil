field f:Int
  field g:Int
  field vals:Seq[Int]

  predicate pred(x:Ref) {
      acc(x.f)
  }

  predicate pred2(i:Int) {
       i > 0
  }

  function get_val(xs:Seq[Ref], i:Int):Ref
      requires 0 <= i && i < |xs|
  {
      xs[i]
  }

  method m1(xs:Seq[Ref])
  requires forall x:Ref :: x in xs ==> acc(x.f) && x.f > 0
  ensures forall x:Ref :: x in xs ==> acc(x.f) && x.f > 0
  {}


  method m2(xs:Seq[Ref])
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires forall x:Ref :: x in xs ==> x.f > 0 && acc(x.f)
  {}


  method m3_a(xs:Seq[Ref], y:Ref)
  requires forall x:Ref :: x in xs ==> acc(pred(x))&& (unfolding pred(x) in true)
  requires y in xs
  ensures forall x:Ref :: x in xs ==> acc(pred(x)) && unfolding pred(x) in true
  {}

  method m3_b(xs:Seq[Ref], y:Ref)
  requires forall x:Ref :: x in xs ==> acc(pred(x)) && (unfolding pred(x) in true)
  requires y in xs
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures forall x:Ref :: x in xs ==> (unfolding pred(x) in true) && acc(pred(x))
  {}

  method m4(xs:Seq[Ref])
  requires forall x:Ref :: x in xs ==> acc(x.f) && acc(pred2(x.f))
  ensures forall x:Ref :: x in xs ==> acc(x.f) && acc(pred2(x.f))
  {}

  method m5(xs:Seq[Ref])
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires forall x:Ref :: x in xs ==> (x.g > 0 ==> acc(x.f)) && (x.f > 0 ==> acc(x.g))
  {}

  method m6(xs:Seq[Ref], b1:Int, b2:Int)
  requires forall x:Ref :: x in xs ==> (acc(x.g) && acc(pred(x))) && ((b1 > 0) ==> (unfolding pred(x) in true)) && ((b1 > 0) ==> (b2 > 0) ==> x.g > 0)
  ensures forall x:Ref :: x in xs ==> (acc(x.g) && acc(pred(x))) && ((b1 > 0) ==> (unfolding pred(x) in true)) && ((b1 > 0) ==> (b2 > 0) ==> x.g > 0)
  {}
