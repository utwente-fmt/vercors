//:: IgnoreFile(/carbon/issue/205/)

field f: Int

function rcvr(i: Int, j: Int): Ref

function prm(i: Int): Perm
  ensures none < result

method test01(xs: Seq[Ref], n: Int) {
  inhale 0 <= n && n <= |xs|

  inhale forall i: Int, j: Int ::
    0 <= i && i < n && j == i ==> acc(rcvr(i, j).f, prm(i))

  assert forall i1: Int, i2: Int ::
    0 <= i1 && i1 < n && 0 <= i2 && i2 < n && i1 != i2 ==>
      rcvr(i1, i1) != rcvr(i2, i2)

  exhale forall i: Int, j: Int ::
    0 <= i && i < n && i == j ==> acc(rcvr(i, j).f, prm(i))
}

method test02(xs: Seq[Ref], n: Int) {
  inhale 0 <= n && n <= |xs|

  inhale forall i: Int, j: Int ::
    0 <= i && i < n && j == i + 1 ==> acc(rcvr(i, j).f, prm(i))

  var a: Int
  inhale 0 <= a && a < n
  inhale rcvr(a, a + 1).f > 1

  exhale forall i: Int ::
    0 <= i && i < n ==>
         acc(rcvr(i, i + 1).f, prm(i))
      && (i != a || rcvr(i, i + 1).f > 1)
}


function det(mat: IMatrix): Int
  requires forall c: Int, r: Int ::
              0 <= c && c < cols(mat) && 0 <= r && r < rows(mat) ==>
                acc(loc(mat, c, r).val)

function colsum(mat: IMatrix, col: Int): Int
  requires 0 <= col && col < cols(mat)
  requires forall r: Int :: 0 <= r && r < rows(mat) ==> acc(loc(mat, col, r).val)

function rowsum(mat: IMatrix, row: Int): Int
  requires 0 <= row && row < rows(mat)
  requires forall c: Int :: 0 <= c && c < cols(mat) ==> acc(loc(mat, c, row).val)

method test03(mat: IMatrix)
  requires forall c: Int, r: Int ::
              0 <= c && c < cols(mat) && 0 <= r && r < rows(mat) ==>
                acc(loc(mat, c, r).val) && loc(mat, c, r).val > 0
  requires forall c: Int, r: Int ::
              0 < c && c < cols(mat) && 0 < r && r < rows(mat) ==>
                   loc(mat, c, r).val
                == loc(mat, c - 1, r).val + loc(mat, c, r - 1).val
  requires 5 <= cols(mat) && cols(mat) <= rows(mat)
{
  assert     loc(mat, 1, 0).val == 1 && loc(mat, 0, 1).val == 3
         ==> loc(mat, 1, 1).val == 4

  var olddet: Int := det(mat)
  var oldcolsum3: Int := colsum(mat, 3)
  var oldrowsum2: Int := rowsum(mat, 2)

  assert det(mat) == olddet
  assert colsum(mat, 3) == oldcolsum3
  assert rowsum(mat, 2) == oldrowsum2
}



predicate P(x: Ref, y: Ref) {
  acc(x.f) && acc(y.f) && x.f < y.f
}

function getP(x: Ref, y: Ref): Int
  requires P(x, y)
{ unfolding P(x, y) in x.f + y.f }

method test04(rs1: Seq[Ref], rs2: Seq[Ref]) {
  inhale forall i1: Int, i2: Int ::
    0 <= i1 && i1 < |rs1| && 0 <= i2 && i2 < |rs2| ==> P(rs1[i1], rs2[i2])

  var k1: Int
  var k2: Int
  inhale 0 <= k1 && k1 < |rs1|
  inhale 0 <= k2 && k2 < |rs2|

  label l1

  unfold P(rs1[k1], rs2[k2])
  rs1[k1].f := rs2[k2].f
  rs2[k2].f := rs2[k2].f + 1
  fold P(rs1[k1], rs2[k2])

  assert getP(rs1[k1], rs2[k2]) > old[l1](getP(rs1[k1], rs2[k2]))

  exhale forall i1: Int, i2: Int ::
    0 <= i1 && i1 < |rs1| && 0 <= i2 && i2 < |rs2| ==>
         P(rs1[i1], rs2[i2])
      && (i1 != k1 && i2 != k2 ==> getP(rs1[i1], rs2[i2]) == old[l1](getP(rs1[i1], rs2[i2])))
}



/* Encoding of matrices */

field val: Int

domain IMatrix {
  function loc(mat: IMatrix, col: Int, row: Int): Ref

  function cols(mat: IMatrix): Int
  function rows(mat: IMatrix): Int

  function loc_mat(r: Ref): IMatrix
  function loc_col(r: Ref): Int
  function loc_row(r: Ref): Int

  axiom all_diff {
    forall mat: IMatrix, col: Int, row: Int :: {loc(mat, col, row)}
         loc_mat(loc(mat, col, row)) == mat
      && loc_col(loc(mat, col, row)) == col
      && loc_row(loc(mat, col, row)) == row
  }

  axiom cols_nonneg {
    forall mat: IMatrix :: cols(mat) >= 0
  }

  axiom rows_nonneg {
    forall mat: IMatrix :: rows(mat) >= 0
  }
}
