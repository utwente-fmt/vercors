field f: Int
field g: Int

predicate F(x: Ref) { acc(x.f) }
predicate G(x: Ref) { acc(x.g) }

function fun2(x: Ref): Int
  requires acc(F(x)) && x != null
{ unfolding acc(F(x)) in x.f }

method test5() {
  var x: Ref
  x := new(f)
  x.f := 3

  fold acc(F(x))

  assert fun2(x) == 3
}

function fun1(x: Ref): Int
  requires acc(F(x)) && acc(G(x))
{ (unfolding acc(F(x)) in x.f) + (unfolding acc(G(x)) in x.g) }

method test4() {
  var x: Ref
  x := new(f, g)
  x.f := 3
  x.g := 7

  fold acc(F(x))
  fold acc(G(x))

  assert fun1(x) == 10
}

predicate pair(x: Ref) {
  acc(x.f) && acc(x.g)
}

function sum(x: Ref): Int
  requires acc(pair(x))
{ unfolding acc(pair(x)) in x.f + x.g }

method test1() {
  var x: Ref; x := new(f, g)
  var y: Ref; y := new(f, g)

  x.f := y.f
  y.g := x.g

  fold acc(pair(x))
  fold acc(pair(y))

  assert sum(x) == sum(y)

  unfold acc(pair(x))
  x.f := x.f + 1
  fold acc(pair(x))

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert sum(x) == sum(y)
}

function getf(z: Ref): Int
  requires acc(pair(z))
{ unfolding pair(z) in z.f }

method test3(y: Ref)
  requires acc(pair(y)) && getf(y) > 0
{
  var v: Int := unfolding acc(pair(y)) in y.g
  assert getf(y) == sum(y) - v
}

function add(x: Ref, y: Ref): Int
  requires acc(pair(x), 1/3)
  requires acc(pair(y), 1/3)
{ unfolding acc(pair(x), 1/3) in x.f + (unfolding acc(pair(y), 1/3) in y.f) + x.g }

method test2(a: Int)
  requires a > 10
{
  var x: Ref; x := new(f, g)
  var y: Ref; y := new(f, g)

  x.f := 1; x.g := a
  y.f := 2; y.g := -a

  fold acc(pair(x))
  fold acc(pair(y))

  assert add(x, x) == 2 + a
  assert add(x, y) == a + 3
  assert add(y, x) < 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert add(x, y) < 0
}

field n: Ref

predicate R(x: Ref) {
  acc(x.n) && (/*x.n != null ==>*/ acc(R(x.n)))
}

function fun3(y: Ref): Int
  requires acc(R(y))
{
  unfolding acc(R(y)) in
    y.n != null ? unfolding acc(R(y.n)) in 0 : 1
}
