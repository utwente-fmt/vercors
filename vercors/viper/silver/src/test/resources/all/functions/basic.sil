field f: Int
field g: Int

function add(x: Ref): Int
  requires acc(x.f) && acc(x.g)
{ x.f + x.g }

function add3(x: Ref, a: Int): Int
  requires acc(x.g, 1/2) && x.g > 0 && acc(x.f) && acc(x.g, 1/2)
{ x.f - a + x.g }

method test1() {
  var x: Ref; x := new(f, g)
  var y: Ref; y := new(f, g)

  x.f := y.f
  y.g := x.g
  assert add(x) == add(y)

  x.f := x.f + 1
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert add(x) == add(y)
}

method test2() {
  var x: Ref; x := new(f, g)

  x.g := 10
  assert add3(x, 0) == add(x)
  x.f := -5
  assert add3(x, 5) == 0
    //:: ExpectedOutput(assert.failed:assertion.false)
  assert add3(x, 1) == add(x)
}

function tern(x: Ref, b: Bool): Int
  requires b ? acc(x.f) : acc(x.g)
{ b ? x.f : x.g }

method test3() {
  var x: Ref; x := new(f, g)

  x.f := 1
  x.g := 2
  var b1: Bool := x.f > x.g
  var b2: Bool := x.f == x.g
  assert tern(x, b1) == x.g
  assert tern(x, !b1) == x.f
  assert tern(x, b2) > 0
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert tern(x, !b2) > 1
}
