field f: Int

function fun01(x: Ref, i: Int): Bool
  requires acc(x.f)

function bar01(i: Int): Int

method test01a(x: Ref) {
  inhale acc(x.f)

  inhale forall i: Int :: {fun01(x, i)} bar01(i) > 0

  exhale acc(x.f)
  inhale acc(x.f)

  inhale fun01(x, 5)
  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/204/)
  assert bar01(5) > 0
}

method test01b(x: Ref, y: Ref) {
  inhale acc(x.f) && acc(y.f)
  assert x != y

  inhale forall i: Int :: {fun01(x, i)} bar01(i) > 0

  exhale acc(y.f)
  inhale acc(y.f)

  inhale fun01(x, 5)
  assert bar01(5) > 0
}

method test02(x: Ref)
  requires acc(x.f)
  requires forall i: Int :: {fun01(x, i)} bar01(i) > 0
{
  exhale acc(x.f)
  inhale acc(x.f)

  inhale old(fun01(x, 5))
  assert old(bar01(5)) > 0
}

method test03a(x: Ref)
  requires acc(x.f)
{
  inhale forall i: Int :: {old(fun01(x, i))} bar01(i) > 0

  inhale old(fun01(x, 5))
  assert old(bar01(5)) > 0
}

method test03b(x: Ref, y: Ref)
  requires acc(x.f) && acc(y.f)
{
  inhale forall i: Int :: {old(fun01(x, i))} bar01(i) > 0

  exhale acc(y.f)
  inhale acc(y.f)

  inhale fun01(x, 5)
  assert bar01(5) > 0
}

method test03c(x: Ref, y: Ref)
  requires acc(x.f) && acc(y.f)
{
  inhale forall i: Int :: {old(fun01(x, i))} bar01(i) > 0

  exhale acc(x.f)
  inhale acc(x.f)

  inhale fun01(x, 5)
  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/204/)
  assert bar01(5) > 0
}
