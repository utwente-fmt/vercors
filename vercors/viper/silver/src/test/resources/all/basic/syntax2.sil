domain D1[T]
{
   function f1(x:D1[T]) : D2[T]
   function make(x:T) : D1[T]
//   function make2(x:T) : D1[D1[T]]
//   function break2(x:D1[D1[T]]) : D1[T]
   function f1b(x:D1[T]) : Int
}
domain D2[T]
{
   function f2(x:D2[T]) : T
   function f2b(x:D2[T]) : Int

   axiom ax2a {forall x : D1[T] :: f1b(x) >=0 ==> f2b(f1(x))>0}
   axiom ax2b {forall x : D1[T] :: f2b(f1(x))>0 ==> f1b(x)==0}
}

method m1()
{
   var x : Int;
   var d1x : D1[Int]
   assert f1b(d1x) >= 0 ==> f1b(d1x) == 0
}

method m2()
{
   var d11x : D1[D1[Int]]
   d11x := make(make(1))
}

/*
field f: Int

domain Bag[T]
{
    function singleton(t:T) : Bag[T]
    function empty() : Bag[T]

    function size(b:Bag[T]) : Int

    function flatten(b:Bag[Bag[T]]):Bag[T]

    axiom singletonSize { forall t:T :: size(singleton(t))==1 }

}


method m2()
{
    assert size(singleton(singleton(1)))==1
    var i : Int

//    var b : Bag[Boolean] //Bag[Bag[Boolean]]
//    b := singleton(empty())
}

*/

/*
domain D3[T]
{
    function fD3(t:T) : D3[T]
    function iD3(d3t : D3[T]) : Int

    axiom ax { forall t : T :: iD3(fD4(fD3(t)))==0 }
}
domain D4[S]
{
    function fD4(t:S) : D3[S]
}
  

  
domain D {
//    function f(x:D): D //TODO
    function f0(x:D): D //TODO
    function f1(x:D): Int
    function f2(x:D): Int

    function makeD() : D
}

domain D1[T] {
    function makeD1() : D1[T]
    function makeD1b(t:T) : D1[T]

    function l(t:T) : D1[T]
    function lll(t:T) : D1[D1[D]]
}
domain D2[T,S] {
    function makeD2(t:T,s:S) : D2[S,T]

    function f3(x:D1[D1[D]]) : D2[D1[D],Int]

    function l0(t:D1[T]) : D1[T]
    function l1(t:D1[D2[D,D]]) : D1[T]
//    function l1(t:D1[D1[T]]) : D1[S]
//    axiom injectiveness1 { forall x : D,y : Int  :: ( x!=x ==> f1(y)>0)} //f(x)==f(y) ) }
    function g(x:D1[D1[D],D]) : D2[D1[D]]
}

method m(x:D)
{
    var y : Int
//    y := x

    var s : Set[Int];
    var sD : Set[D];

    var b : Bool;

    var lv : D1[Int];

    var lD3 : D3[Int];

    var b1 : Bag[Int];

    var d1 : D1[Int];

    assert size(singleton(singleton(1)))==1;
//    var lD4 : D4[Int];

    s := Set[Int]();
//    s := Set[Int]();
    s := Set(5);
//    s := Set[Int](5);
  //  s := Set(x);
//    b := Set(x)==Set(y);
    sD := Set(x);
//    s := Set[Int](x);
//    s := Multiset(5);
//    s := Seq(5);
    var setInt : Set[Int];
    var seqInt : Seq[Int];
    var multisetInt : Multiset[Int];

//    setInt := Set();
    setInt := Set[Int]();
    setInt := Set(1);
//    seqInt := Seq();
    seqInt := Seq[Int]();
    seqInt := Seq(1);
//    multisetInt := Multiset();
    multisetInt := Multiset[Int]();
    multisetInt := Multiset(1);
}
*/
