
field f: Ref

// test aliasing of heap values with other objects
method t0() {
    var c: Ref

    c := new(f)

    //:: ExpectedOutput(assert.failed:assertion.false)
    assert c.f != c // This assertion was expected true in an old version of the test case, but should fail
}

// test aliasing of heap values with other objects
method t1() {
    var a: Ref
    var c: Ref

    inhale acc(a.f, write)

    c := new(f)

    //assert c.f != c // This assertion was in an old version of the test case, but should fail

    assume a != null
    set_f(a, c)

    //:: ExpectedOutput(assert.failed:assertion.false)
    assert a.f != c
}

method set_f(monitor: Ref, value: Ref)
  requires acc(monitor.f, write)
  requires monitor != null && value != null
  ensures acc(monitor.f, write)
{
  monitor.f := value
}

method t2(r: Ref) {
  if (r != null) {
    assert perm(r.f) == none
  } else {
    assert perm(r.f) == none
      /* Still expected to pass - perm(e.f) does not require e != null */
  }
}

method t3(r:Ref) returns (res:Ref)
    requires r!=null
    requires acc(r.f)
    requires r.f!=null
    requires acc(r.f.f)
{
    res := r.f.f
}

