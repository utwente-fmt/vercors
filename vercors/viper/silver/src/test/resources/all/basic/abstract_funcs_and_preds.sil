field f: Ref

function fun01(x: Ref): Int
  ensures 0 < result

method test01(x: Ref) {
  assert fun01(x) >= 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun01(x) == 0
}

method test02(x: Ref, y: Ref) {
  var r: Int := fun01(x)
  assert fun01(x) == r

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun01(x) == fun01(y)
}

function fun02(x: Ref): Bool
  requires acc(x.f)
  ensures x == x.f ==> result

method test03(x: Ref, y: Ref) {
  inhale acc(x.f)
  inhale x == x.f
  assert fun02(x)
  x.f := y

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun02(x)
}

function fun03(x: Ref): Bool
  requires acc(x.f)
  ensures x == x.f ==> !result
{ !fun02(x) }

method test04(x: Ref, y: Ref) {
  inhale acc(x.f)
  inhale x == x.f
  assert !fun03(x)
  assert fun03(x) == !fun02(x)
  x.f := y

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert !fun03(x)
}

predicate file(id: Int)

method file_open(id: Int)
  ensures acc(file(id))
{ assume false}

method file_close(id: Int)
  requires acc(file(id))
{}

method client(id: Int) {
  file_open(id)
  file_close(id)

  //:: ExpectedOutput(call.precondition:insufficient.permission)
  file_close(id)
}
