/* Intended to test the overhead of Silicon's failure-driven heuristics, e.g. state consolidations.
 * At some point, the implementation had a bug which made the verification of the failing tests
 * (..._erroneous) horribly slow.
 */


field val : Int
field init: Bool
field rel: Int
field acq: Bool

predicate AcqConjunct(x: Ref, idx: Int)

domain parallelHeaps {
  function heap(x: Ref) : Int
  function is_ghost(x:Ref) : Bool
}

domain reads {
  function rd() : Perm
  axiom rdPositive { rd() > none }
}




method read(data: Ref, count: Ref, ghost: Ref) returns (v: Int)
  requires heap(data) == 0 && (heap(count) == 0 && (heap(ghost) == 0 && (is_ghost(ghost) && (acc(data.val, rd()) && (acc(ghost.val, rd()) && (acc(count.acq, wildcard) && count.acq == false && acc(AcqConjunct(count, 0), wildcard) && (acc(count.rel, wildcard) && count.rel == 0 && acc(count.init, wildcard))))))))
  ensures heap(data) == 0 && (heap(count) == 0 && (heap(ghost) == 0 && (is_ghost(ghost) && (acc(data.val, rd()) && (acc(ghost.val, rd()) && (acc(count.acq, wildcard) && count.acq == false && acc(AcqConjunct(count, 0), wildcard) && (acc(count.rel, wildcard) && count.rel == 0 && acc(count.init, wildcard)))))))) && (data.val == v && [true, perm(data.val) == none])
{
  v := data.val
}

method read_erroneous(data: Ref, count: Ref, ghost: Ref) returns (v: Int)
  requires heap(data) == 0 && (heap(count) == 0 && (heap(ghost) == 0 && (is_ghost(ghost) && (acc(data.val, rd()) && (acc(ghost.val, rd()) && (acc(count.acq, wildcard) && count.acq == false && acc(AcqConjunct(count, 0), wildcard) && (acc(count.rel, wildcard) && count.rel == 0 && acc(count.init, wildcard))))))))
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures heap(data) == 0 && (heap(count) == 0 && (heap(ghost) == 0 && (is_ghost(ghost) && (acc(data.val, rd()) && (acc(ghost.val, rd()) && (acc(count.acq, wildcard) && count.acq == false && acc(AcqConjunct(count, 0), wildcard) && (acc(count.rel, wildcard) && count.rel == 0 && acc(count.init, wildcard)))))))) && (data.val == v && [true, perm(data.val) == none] && false)
{
  v := data.val
}

method read2(data: Ref, count: Ref, ghost: Ref) returns (v: Int)
  requires
    heap(data) == 0 &&
    heap(count) == 0 &&
    heap(ghost) == 0 &&
    is_ghost(ghost) &&
    acc(data.val, rd()) &&
    acc(ghost.val, rd()) &&
    acc(count.acq, wildcard) &&
    count.acq == false &&
    acc(AcqConjunct(count, 0), wildcard) &&
    acc(count.rel, wildcard) &&
    count.rel == 0 &&
    acc(count.init, wildcard)

  ensures
    heap(data) == 0 &&
    heap(count) == 0 &&
    heap(ghost) == 0 &&
    is_ghost(ghost) &&
    acc(data.val, rd()) &&
    acc(ghost.val, rd()) &&
    acc(count.acq, wildcard) &&
    count.acq == false &&
    acc(AcqConjunct(count, 0), wildcard) &&
    acc(count.rel, wildcard) &&
    count.rel == 0 &&
    acc(count.init, wildcard) &&
    data.val == v &&
    [true, perm(data.val) == none]
{
  v := data.val
}

method read2_erroneous(data: Ref, count: Ref, ghost: Ref) returns (v: Int)
  requires
    heap(data) == 0 &&
    heap(count) == 0 &&
    heap(ghost) == 0 &&
    is_ghost(ghost) &&
    acc(data.val, rd()) &&
    acc(ghost.val, rd()) &&
    acc(count.acq, wildcard) &&
    count.acq == false &&
    acc(AcqConjunct(count, 0), wildcard) &&
    acc(count.rel, wildcard) &&
    count.rel == 0 &&
    acc(count.init, wildcard)

  ensures
    //:: ExpectedOutput(postcondition.violated:assertion.false)
    heap(data) == 0 &&
    heap(count) == 0 &&
    heap(ghost) == 0 &&
    is_ghost(ghost) &&
    acc(data.val, rd()) &&
    acc(ghost.val, rd()) &&
    acc(count.acq, wildcard) &&
    count.acq == false &&
    acc(AcqConjunct(count, 0), wildcard) &&
    acc(count.rel, wildcard) &&
    count.rel == 0 &&
    acc(count.init, wildcard) &&
    data.val == v &&
    [true, perm(data.val) == none] &&
    false
{
  v := data.val
}
