field Cell_x: Int

function Cell_get(this: Ref): Int
	requires acc(this.Cell_x, write)
{ this.Cell_x }

function reqIGt0(i: Int): Int
	requires i >= 0
{ i }

function f(i: Int, j: Int): Int { i + j }

function g(i: Int): Int { i }

method forallCellGet10(c: Ref) returns (d: Ref)
	requires c != null
	requires acc(c.Cell_x, write)
	requires forall i1: Int :: (0 <= i1 && i1 < Cell_get(c)) ==> (Cell_get(c) > i1)
	ensures acc(c.Cell_x, write)
	ensures forall i2: Int :: (0 <= i2 && i2 < Cell_get(c)) ==> (Cell_get(c) > i2)
	ensures forall i3: Int :: (0 <= i3 && i3 < Cell_get(c)) ==> (Cell_get(c) != i3)
{}

method fail10ForallCellGet10(c: Ref) returns (d: Ref)
	requires c != null
	//:: ExpectedOutput(application.precondition:insufficient.permission)
	requires forall i: Int :: (0 <= i && i < Cell_get(c)) ==> (Cell_get(c) > i)
{}

method fail20ForallCellGet10(c: Ref) returns (d: Ref)
	requires c != null
	requires acc(c.Cell_x, write)
	requires Cell_get(c) > 0
	requires forall i1: Int :: (0 <= i1 && i1 < Cell_get(c)) ==> (Cell_get(c) >= i1)
	ensures c != null
	ensures acc(c.Cell_x, write)
	//:: ExpectedOutput(postcondition.violated:assertion.false)
	ensures forall i2: Int :: (0 <= i2 && i2 < Cell_get(c)) ==> (Cell_get(c) <= i2)
{}

method noQuantifiedPermissionsPre(s: Set[Ref])
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires forall r:Ref :: (r in s && r != null ==> r.Cell_x > 0)
  {}

method noQuantifiedPermissionsPost(s: Set[Ref])
  //:: ExpectedOutput(application.precondition:insufficient.permission)
  ensures forall r:Ref :: (r in s && r != null ==> Cell_get(r) >= Cell_get(r))
  {}

method succeedsRange10(a: Int)
	requires a > 1
{
	assert forall i: Int :: (1 <= i) ==> reqIGt0(i) == i
}

method failsRange10(a: Int)
{
  //:: ExpectedOutput(application.precondition:assertion.false)
  //:: UnexpectedOutput(assert.failed:assertion.false, /Carbon/issue/173/)
  assert forall i: Int :: (-1 <= i && i < a) ==> (reqIGt0(i) == i)
}

method succeedsExplicit10(a: Int)
{ assert forall i: Int :: (i in Seq(-2,2,4,6,8)) ==> (reqIGt0(i*i) > i) }

method failsExplicit10(a: Int)
{
  //:: ExpectedOutput(application.precondition:assertion.false)
  //:: UnexpectedOutput(assert.failed:assertion.false, /Carbon/issue/173/)
  assert (forall i: Int :: (i in Seq(-2,2,4,6,8)) ==> (reqIGt0(i) < (i*i)))
}

// method succeedsEmpty10() {
	// assert forall i: Int :: (i in Seq[Int]()) ==> (reqIGt0(i) == i)
	// assert forall i: Int :: (i in Seq[Int]()) ==> (1 == 2)
// }

method succeeds1(a: Int)
	requires a > 0
{
	assert forall i1: Int :: (0 <= i1 && i1 < a) ==> g(i1) >= 0

	assert exists i2: Int :: (i2 in Seq(0)) ==> true

	/* Fail in Chalice and Syxc */
	// assert exists i in [0,1,2,3] :: i > 0
	// assert exists i: int ::
		// (0 <= i && i < a) ==> g(i) >= 0
	// assert exists i: int :: (i in [0..a]) ==> g(i) >= 0
	// assert exists i in [0..a] :: g(i) >= 0
}

method succeeds2(a: Int)
	requires a > 0
{
	assert forall i: Int :: forall j: Int ::
		(0 <= i && i < a && 0 <= j && j < a) ==> f(i, j) >= 0

	/* Fail in Chalice and Syxc */
	// assert exists i, j: int ::
		// (0 <= i && i < a && 0 <= j && j < a) ==> f(i, j) >= 0
	// assert exists i, j: int :: (i in [0..a] && j in [0..a]) ==> f(i, j) >= 0
	// assert exists i, j in [0..a] :: f(i, j) >= 0
}

function f2(i: Int): Bool { true }

function g2(i: Int, j: Int): Bool { true }

method test1(A: Seq[Int]) {
	assume |A| > 10

	assume forall v1: Int ::
		(0 <= v1 && v1 < 3 && f2(v1)) ==> (exists j1: Int :: 0 <= j1 && j1 < 3 && j1 == v1)

  //:: ExpectedOutput(assert.failed:assertion.false)
	assert forall v2: Int ::
		(0 <= v2 && v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && j2 < 3 && j2 == v2)
    /* 2013-08-05 Malte: Fails, probably due to a triggering problem of Z3.
     *            Should hold otherwise.
     */
}

method test2(A: Seq[Int]) {
	assume |A| > 10

	assume forall v1: Int ::
		(0 <= v1 && v1 < 3 && f2(v1)) ==> (exists j1: Int :: 0 <= j1 && j1 < 3 && g2(j1, v1))

	assert forall v2: Int ::
		(0 <= v2 && v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && j2 < 3 && g2(j2, v2))
}

method test3(A: Seq[Int]) {
	assume |A| > 10

	assume forall v1: Int ::
		(0 <= v1 && v1 < 3 && f2(v1))	==> (exists j1: Int :: 0 <= j1 && j1 < 3 && A[j1] == v1)

	assert forall v2: Int ::
		(0 <= v2 && v2 < 3 && f2(v2)) ==> (exists j2: Int :: 0 <= j2 && j2 < 3 && A[j2] == v2)
}


method test4(A: Seq[Int]) {
	assume |A| > 10

	assume f2(0) ==> (exists j1: Int :: 0 <= j1 && j1 < 3 && j1 > 0)

	//:: ExpectedOutput(assert.failed:assertion.false)
	assert f2(0) ==> (exists j2: Int :: 0 <= j2 && j2 < 3 && j2 > 0)
    /* 2013-08-05 Malte: Fails, probably due to a triggering problem of Z3.
     *            Should hold otherwise.
     */
}

method test5(A: Seq[Int]) {
	assume |A| > 10

	assume f2(0) ==> (exists j1: Int :: 0 <= j1 && j1 < 3 && f2(j1))
	assert f2(0) ==> (exists j2: Int :: 0 <= j2 && j2 < 3 && f2(j2))
}

method test6(A: Seq[Ref]) {
	assume |A| > 10

	assume exists j1: Int :: 0 <= j1 && j1 < 3 && A[j1] != null
	assert exists j2: Int :: 0 <= j2 && j2 < 3 && A[j2] != null
}

// method test7(A: Seq[Int]) {
	// assume forall j1: Int ::
		// ((0 <= j1) && (j1 < |A|) && f2(j1)) ==> (0 <= A[j1])

	// assert forall j2: Int ::
		// (0 <= j2 && j2 < |A| && f2(j2)) ==> (0 <= A[j2])
// }
