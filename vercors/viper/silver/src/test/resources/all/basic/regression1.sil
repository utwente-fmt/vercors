domain PermissionHelper {
  
  function globalRdPerm(): Perm
  
  axiom globalRdPositive {
    globalRdPerm() > none
  }
  
  axiom globalRdNotFull {
    globalRdPerm() < write
  }
}

domain UnitHelper {
  
  function unit(): Ref
}

domain Boxing {
  
  function int2Ref(int: Int): Ref
  
  function ref2Int(ref: Ref): Int
  
  function bool2Ref(bool: Bool): Ref
  
  function ref2Bool(ref: Ref): Bool
  
  axiom intInverse {
    (forall x: Int :: { ref2Int(int2Ref(x)) } ref2Int(int2Ref(x)) == x)
  }
  
  axiom boolInverse {
    (forall x: Bool :: { ref2Bool(bool2Ref(x)) } ref2Bool(bool2Ref(x)) == x)
  }
}

method Simple_lessinitgreater(rd: Perm, this: Ref) returns (vresult: Ref)
  requires rd > none
  requires this != null
{
  vresult := unit()
}

method Simple_test2(rd: Perm, this: Ref, x: Int) returns (vresult: Int)
  requires rd > none
  requires this != null
  requires x > 0
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures vresult == (x * x)
{
  vresult := x
}

method Simple_test(rd: Perm, this: Ref) returns (vresult: Ref)
  requires rd > none
  requires this != null
{
  var tmpRd: Perm
  var dummy: Int
  fresh tmpRd
  constraining(tmpRd) {
    //:: ExpectedOutput(call.precondition:assertion.false)
    dummy := Simple_test2(tmpRd, this, -5)
  }
  vresult := unit()
}
