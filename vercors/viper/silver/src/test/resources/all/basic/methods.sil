
field f: Int

method t1() {
    var n: Int
    //:: ExpectedOutput(call.precondition:assertion.false)
    n := t3(-1)
}

method t2() {
    var n: Int := -10
    n := t3(1)
    assert n > 0
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method t3(n: Int) returns (r: Int)
    requires n > 0
    ensures r > 0
{
    r := n
}

// test aliasing of return values with other objects
method t4() {
    var a: Ref
    var b: Ref
    var c: Ref

    a, b := t4b()
    c := new()
    assert a != c
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert a != b
}

method t4c() {
    var a: Ref
    var b: Ref
    var c: Ref

    c := new()
    a, b := t4b()
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert a != c
}

method t4b() returns (a: Ref, b: Ref)
{
}

method t5_a(r: Ref)
     //:: ExpectedOutput(not.wellformed:insufficient.permission)
     requires r.f == 2
 {
 }

 method t5_b(r: Ref)
    requires r != null
     //:: ExpectedOutput(not.wellformed:insufficient.permission)
     requires r.f == 2
 {
 }

method t6_a(r: Ref)
    //:: ExpectedOutput(not.wellformed:insufficient.permission)
    ensures r.f == 2
{
    assume false
}

method t6_b(r: Ref)
    ensures r != null
    //:: ExpectedOutput(not.wellformed:insufficient.permission)
    ensures r.f == 2
{
    assume false
}

method t7(r: Ref)
    requires acc(r.f, write)
{
    r.f := 2
    exhale acc(r.f, wildcard)
    assert (r.f) == 2
}

method t8(r: Ref)
    requires acc(r.f, write)
    ensures acc(r.f, write)
{
    r.f := 2
    exhale acc(r.f, write)
    inhale acc(r.f, write)
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert (r.f) == 2
}

method t9(r: Ref)
    requires acc(r.f, write)
    ensures acc(r.f, write)
{
    r.f := 2
    t8(r)
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert (r.f) == 2
}

method t10(r: Ref, o: Ref)
    requires acc(r.f, write) && acc(o.f, write)
    ensures acc(r.f, write) && acc(o.f, write)
{
    r.f := 2
    o.f := 2
    assert o != r
    t9(o)
    assert (r.f) == 2
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert (o.f) == 2
}

method t11() returns (r: Ref)
{
    var x: Ref
    var y: Ref
    x := t11()
    y := new()
    assert x != y
}

method bodyless() returns (r: Int)
    requires true
    ensures 0 <= r && r < 10

method testBodyless()
{
    var x: Int
    x := bodyless()
    assert 0 <= x && x < 10
}

