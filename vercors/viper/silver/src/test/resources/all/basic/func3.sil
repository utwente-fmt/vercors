
field f: Int
field fr: Ref

function f1(r: Ref): Int
    requires acc(r.f, wildcard)
    ensures result == (r.f)
{
    r.f
}

function f2(r: Ref): Int
    requires acc(r.f, wildcard)
    //:: ExpectedOutput(postcondition.violated:assertion.false)
    ensures result == 2
{
    r.f
}

function f3(r: Ref): Int
    requires acc(r.f, wildcard)
    requires (r.f) == 2
    ensures result == 2
{
    r.f
}

function f4(r: Ref): Ref
    requires acc(r.fr, wildcard)
{ r.fr }

method t1(r: Ref)
    requires acc(r.f, write)
{
    r.f := 2
    assert f3(r) == 2
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert f3(r) == 1
}

/* [2013-11-27 Malte]
 *   I removed this test case because in my opinion, it asserts a behaviour
 *   that should be unspecified. Function f2 is not well-formed, thus it is
 *   not clear why f2(r) == 2 should hold. I also wouldn't require that the
 *   assertion should fail, I think it should be unspecified and left up to
 *   the tool whether it accepts the assertion or not (provided, that f2 is
 *   correctly rejected as being ill-formed).
 */
//method t2(r: Ref)
//    requires acc(r.f, write)
//{
//    assert f2(r) == 2
//}

method t3(r: Ref)
    requires acc(r.fr, wildcard)
{
    var y: Ref := f4(r)
    var x: Ref
    x := new()
    assert x != y
}
