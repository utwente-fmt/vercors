field f: Int

method main(i:Int) {
  var m: Ref
  m := new(f)
  m.f := i

  if(m.f != 15){
    m.f := 15
label initial
  }

  m.f := 3

  //shouldn't work because the state label is undefined on at least one execution path => fails
  //:: ExpectedOutput(assert.failed:labelled.state.not.reached)
  //:: MissingOutput(assert.failed:labelled.state.not.reached, /carbon/issue/114/)
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/114/)
  //:: UnexpectedOutput(assert.failed:insufficient.permission, /carbon/issue/114/)
  assert m.f == 3 && old[initial](m.f) == 15
}

method main3() {
  var m: Ref
  m := new(f)

  m.f := 15

  // shouldn't work because the statelabels is inside a loop => fails further down
  while(m.f != 3)
    invariant acc(m.f)
  {
label initial
    m.f := m.f - 1;
  }

  //:: ExpectedOutput(assert.failed:labelled.state.not.reached)
  //:: MissingOutput(assert.failed:labelled.state.not.reached, /carbon/issue/114/)
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/114/)
  //:: UnexpectedOutput(assert.failed:insufficient.permission, /carbon/issue/114/)
  assert m.f == 3 && old[initial](m.f) == 15
}
