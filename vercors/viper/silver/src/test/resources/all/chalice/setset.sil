  field value: Int
  method init(this: Ref, v: Int)
    requires acc(this.value, write)
    ensures acc(valid(this), write)
  {
    this.value := v
    fold acc(valid(this), write)
  }
  function get(this: Ref): Int
    requires acc(valid(this), write)
  { (unfolding acc(valid(this), write) in this.value) }
  method set(this: Ref, v: Int)
    requires acc(valid(this), write)
    ensures acc(valid(this), write) && ((get(this)) == (v))
  {
    unfold acc(valid(this), write)
    this.value := v
    fold acc(valid(this), write)
  }
  predicate valid(this: Ref) { acc(this.value, write) }
  method main(this: Ref, x: Ref, y: Ref)
    requires ((x) != (null)) && ((y) != (null))
    requires acc(valid(x), write) && acc(valid(y), write)
  {
    set(x, 3);
    set(y, 3);
    set(x, 3);
    set(y, 3);
    set(x, 3);
    set(y, 3);
    set(x, 3);
    unfold acc(valid(x), write)
    x.value := 3
    fold acc(valid(x), write)
    set(y, 3);
    set(x, 3);
    set(y, 3);
    unfold acc(valid(x), write)
    x.value := 3
    fold acc(valid(x), write)
    unfold acc(valid(x), write)
    x.value := 3
    fold acc(valid(x), write)
    set(x, 3);
    set(y, 3);
    set(x, 4);
    assert ((get(y)) == (3))
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert ((get(x)) == (3))
  }
