  field value: Int
  predicate inv(this: Ref) { acc(this.value, write) }
  function get(this: Ref): Int
    requires acc(inv(this), write)
  { (unfolding acc(inv(this), write) in this.value) }
  method set(this: Ref, newval: Int)
    requires acc(inv(this), write)
    ensures acc(inv(this), write) && ((get(this)) == (newval))
  {
    unfold acc(inv(this), write)
    this.value := newval
    fold acc(inv(this), write)
  }
  method callmethod0(this: Ref)
    requires acc(inv(this), write)
    ensures acc(inv(this), write) && ((get(this)) == (3))
  {
    set(this, 3);
  }
  method callmethod1(this: Ref)
    requires this != null
  {
    //:: ExpectedOutput(call.precondition:insufficient.permission)
    set(this, 3);
  }
  method ifc(this: Ref)
    requires acc(inv(this), write)
    ensures acc(inv(this), write) && get(this) > old(get(this))
  {
    if (get(this) > 0) {
      set(this, get(this) + get(this));
    } else {
      set(this, 2);
    }
  }
  method loop0(this: Ref) returns (r: Int)
    requires acc(inv(this), write) && get(this) > 0
    ensures acc(inv(this), write) && ((r) == (get(this)))
  {
    r := 0
    while (r < (unfolding acc(inv(this), write) in this.value))
      invariant acc(inv(this), write) && r <= get(this)
    {
      r := r + 1
    }
  }
  method loop1(this: Ref) returns (r: Int)
    requires acc(inv(this), write) && get(this) > 0
    ensures acc(inv(this), write) && ((r) == (get(this)))
  {
    r := 0
    while (r < get(this))
      invariant acc(inv(this), write) && r <= (unfolding acc(inv(this), write) in this.value)
    {
      r := r + 1
    }
  }
  method uf0(this: Ref)
    requires acc(this.value, write)
  {
    assert acc(this.value, write)
    fold acc(inv(this), write)
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert acc(this.value, write)
  }
  method uf1(this: Ref)
    requires acc(this.value, write)
  {
    assert acc(this.value, write)
    fold acc(inv(this), write)
    assert acc(inv(this), write)
  }
  method uf2(this: Ref)
    requires acc(inv(this), write)
  {
    assert acc(inv(this), write)
    unfold acc(inv(this), write)
    assert acc(this.value, write)
  }
  method uf3(this: Ref)
    requires acc(inv(this), write)
  {
    assert acc(inv(this), write)
    unfold acc(inv(this), write)
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert acc(inv(this), write)
  }
  method badframing0(this: Ref)
    requires this != null
    //:: ExpectedOutput(application.precondition:insufficient.permission)
    requires ((get(this)) == (2))
  {
  }
  method badframing1(this: Ref)
    requires this != null
    //:: ExpectedOutput(not.wellformed:insufficient.permission)
    requires ((this.value) == (2))
  {
  }
  method badframing2(this: Ref)
    requires this != null
    //:: ExpectedOutput(application.precondition:insufficient.permission)
    requires acc(this.value, write) && ((get(this)) == (2))
  {
  }
  method badframing3(this: Ref)
    requires this != null
    //:: ExpectedOutput(not.wellformed:insufficient.permission)
    requires acc(inv(this), write) && ((this.value) == (2))
  {
  }
