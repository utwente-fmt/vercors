field root : Ref

	predicate headvalid(this:Ref){
		   acc(this.root,write)
		&& (this.root!=null ==> acc(valid(this.root),write))
		&& (this.root!=null ==> acc(this.root.height       ,1/2))
		&& (this.root!=null ==> acc(this.root.balanceFactor,1/2))
	}

	method headinit(this:Ref)
		requires acc(this.root,write);
		ensures acc(headvalid(this),write);
	{
		this.root := null;
		fold acc(headvalid(this),write);
	}

	method headinsert(this:Ref, k : Int)
		requires acc(headvalid(this),write);
		ensures acc(headvalid(this),write);
	{
	        var n : Ref
		unfold acc(headvalid(this),write);
		if (this.root==null){
			n := new(*)
		        init(n,k)
			this.root := n;
		}else{
			n := insert(this.root,k);
			this.root := n;
		}
		fold acc(headvalid(this),write);
	}

	method headremove(this:Ref, k : Int)
		requires acc(headvalid(this),write);
		ensures acc(headvalid(this),write);
	{
	        var r : Ref
		unfold acc(headvalid(this),write);
		if (this.root==null){
		}else{
			r := remove(this.root,k);
			this.root := r;
		}
		fold acc(headvalid(this),write);
	}

	method headhas(this:Ref, k : Int) returns (b : Bool)
		requires acc(headvalid(this),write);
		ensures acc(headvalid(this),write);
	{
	 var bb : Bool;
		unfold acc(headvalid(this),write);
		if (this.root==null){
			b := false;
		}else{
			bb:= has(this.root,k);
			b := bb;
		}
		fold acc(headvalid(this),write);
	}


// new class

	field key    : Int
	field height : Int
	field left  : Ref
	field right : Ref
  field balanceFactor : Int

	predicate valid(this:Ref){
		   acc(this.key   ,write)
		&& acc(this.height,1/2)
		&& acc(this.left  ,write)
		&& acc(this.right ,write)
		&& acc(this.balanceFactor,1/2)
		&& (this.left!=null ==> acc(valid(this.left),write))
		&& (this.left!=null ==> acc(this.left.height       ,1/2))
		&& (this.left!=null ==> acc(this.left.balanceFactor,1/2))
		&& (this.left!=null ==> this.left.height > 0)
		&& (this.right!=null ==> acc(valid(this.right),write))
		&& (this.right!=null ==> acc(this.right.height       ,1/2))
		&& (this.right!=null ==> acc(this.right.balanceFactor,1/2))
		&& (this.right!=null ==> this.right.height > 0)
		&& this.height == ( (this.left==null?0:(this.left.height))>(this.right==null?0:(this.right.height)) ? (this.left==null?0:(this.left.height))+1 : (this.right==null?0:(this.right.height))+1 )
		&& this.balanceFactor == ((this.left==null?0:(this.left.height)) - (this.right==null?0:(this.right.height)))
		&& this.balanceFactor<= 1
		&& this.balanceFactor>=-1
		&& this.height > 0
	}

	method init(this:Ref, k : Int)
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write)
		ensures acc(valid(this),write);
		ensures acc(this.height,1/2);
		ensures acc(this.balanceFactor,1/2);
		ensures this.height == 1;
		ensures this.balanceFactor == 0;
	{
		this.left   := null;
		this.right  := null;
		this.key    := k;
		close(this);
	}




	method insert(this:Ref, k : Int) returns ( r : Ref )
		requires acc(valid(this),write);
		requires acc(this.height,1/2);
		requires acc(this.balanceFactor,1/2);
		ensures r != null;
		ensures acc(valid(r),write);
		ensures acc(r.height,1/2);
		ensures acc(r.balanceFactor,1/2);
		ensures ( r.height == old(this.height) ) || ( r.height == (old(this.height) + 1) );
	{
		var nl : Ref; // reused in different branches
		var bf : Int; // reused in different branches
		var nr : Ref; // reused in different branches
		var rd : Perm;
		unfold acc(valid(this),write);
		if (this.key==k){
			r := this;
			close(r);
		}else{ //this.key!=k
			if (k<(this.key)){ // insert this.left

				if (this.left==null){
					nl := new(*);
					init(nl,k);
				}else{
					nl := insert(this.left,k);
				}
				this.left := nl;
				fresh rd
				constraining(rd) {
          bf := getBalanceFactorI(this,rd);
				}

				if (bf==2){ //rebalance
					r:= rebalanceLeft(this);
				}else{ //no rebalance
					r := this;
					close(r);
				}
			}else{ // k>this.key -- insert this.right
				if (this.right==null){
					nr := new(*);
					init(nr,k);
				}else{
					nr := insert(this.right,k);
				}
				this.right := nr;

				fresh rd
				constraining(rd) {
          bf := getBalanceFactorI(this,rd);
				}
				if (bf==-2){ //rebalance
					r := rebalanceRight(this);
				}else{//no rebalance
					r := this;
					close(r);
				}
			}
		}
	}

	method remove(this:Ref, k : Int) returns ( r : Ref )
		requires acc(valid(this),write);
		requires acc(this.height,1/2);
		requires acc(this.balanceFactor,1/2);
		ensures r != null ==> acc(valid(r),write);
		ensures r != null ==> acc(r.height,1/2);
		ensures r != null ==> acc(r.balanceFactor,1/2);
		ensures old(this.height)>1 ==> r!=null;
		ensures r != null ==> r.height==old(this.height) || r.height+1==old(this.height);
	{
		var bf : Int;
		var nl : Ref;
		var nr : Ref;
		var rd : Perm;
		unfold acc(valid(this),write);
		if (this.key==k){
			if (this.left==null || this.right==null){
				if (this.left==null){ // replace with this.right
					r := this.right;
				}else{ // this.right==null
					r := this.left;
				}
			}else{ // prune max/min of this.left/this.right
				nl := this.left;
				nr := this.right;

				fresh rd
				constraining(rd) {
					bf := getBalanceFactorI(this,rd);
				}
				if (bf > 0 ){ // this.left larger - prune leftmax
					nl,r := pruneMax(this.left);
				}else{ // this.right larger equal - prune rightmin
					nr,r := pruneMin(this.right);
				}
				unfold acc(valid(r),write);
				r.left  := nl;
				r.right := nr;
				close(r);
			}
		}else{ //this.key!=k
			if (k<(this.key)){ // remove this.left
				if (this.left!=null){
					nl := remove(this.left,k);
					this.left := nl;

					fresh rd
					constraining(rd) {
						bf := getBalanceFactorI(this,rd);
					}

					if (bf==-2){ // rebalance
						r:=rebalanceRight(this);
					}else{ // no rebalance
						close(this);
						r := this;
					}
				}else{
					r := this;
					close(r);
				}
			}else{ // k>this.key -- remove this.right
				if (this.right != null){
					nr := remove(this.right,k);
					this.right := nr;

					fresh rd
					constraining(rd) {
						bf := getBalanceFactorI(this,rd);
					}
					if (bf==2){ // rebalance
						r := rebalanceLeft(this);
					}else{ // no rebalance
						r := this;
						close(r);
					}
				}else{
					r := this;
					close(r);
				}
			}
		}
	}

	method pruneMax(this:Ref) returns ( r : Ref, m : Ref )
		requires acc(valid(this),write);
		requires acc(this.height,1/2);
		requires acc(this.balanceFactor,1/2);
		ensures r != null ==> acc(valid(r),write);
		ensures r != null ==> acc(r.height,1/2);
		ensures r != null ==> acc(r.balanceFactor,1/2);
		ensures r != null ==> (r.height == old(this.height) || r.height+1 == old(this.height));
		ensures old(this.height) >1 ==> r != null;
		ensures old(this.height)==1 ==> r == null;
		ensures (old(this.height)==(r==null?0:r.height)) || (old(this.height)==((r==null?0:r.height)+1));
		ensures m != null;
		ensures	acc(valid(m),write);
		ensures acc(m.height,1/2);
		ensures acc(m.balanceFactor,1/2);
		ensures m.height == 1;
	{
		var nr : Ref;
		var bf : Int;
		var rd : Perm;
		unfold acc(valid(this),write);
		if (this.right==null){
			r := this.left;
			this.left := null;
			close(this);
			m := this;
		}else{
			nr,m := pruneMax(this.right);
			this.right := nr;
			fresh rd
			constraining(rd) {
				bf := getBalanceFactorI(this,rd);
			}
			if (bf == 2){
				r:=rebalanceLeft(this);
			}else{
				close(this);
				r := this;
			}
		}
	}

	method pruneMin(this:Ref) returns ( r : Ref, m : Ref )
		requires acc(valid(this),write);
		requires acc(this.height,1/2);
		requires acc(this.balanceFactor,1/2);
		ensures r != null ==> acc(valid(r),write);
		ensures r != null ==> acc(r.height,1/2);
		ensures r != null ==> acc(r.balanceFactor,1/2);
		ensures r != null ==> (r.height == old(this.height) || (r.height == (old(this.height)-1)));
		ensures old(this.height) >1 ==> r != null;
		ensures old(this.height)==1 ==> r == null;
		ensures (old(this.height)==(r==null?0:r.height)) || (old(this.height)==((r==null?0:r.height)+1));
		ensures m != null;
		ensures	acc(valid(m),write);
		ensures acc(m.height,1/2);
		ensures acc(m.balanceFactor,1/2);
		ensures m.height == 1;
	{
		var nl : Ref;
		var bf : Int;
		var rd : Perm;
		unfold acc(valid(this),write);
		if (this.left==null){
			r := this.right;
			this.right := null;
			close(this);
			m := this;
		}else{
			nl,m := pruneMin(this.left);
			this.left := nl;
			fresh rd
			constraining(rd) {
				bf := getBalanceFactorI(this,rd);
			}
			if (bf == -2){
				r:=rebalanceRight(this);
			}else{
				close(this);
				r := this;
			}
		}
	}

	method has(this:Ref, k : Int) returns (b : Bool)
		requires acc(valid(this),write);
		ensures acc(valid(this),write);
	{
		unfold acc(valid(this),write);
		if (k==(this.key)){
			b := true;
		}else{ //k!=this.key
			if (k < (this.key)){
				if (this.left!=null){
					b := has(this.left,k);
				}else{
					b := false;
				}
			}else{ //k > this.key;
				if (this.right!=null){
					b := has(this.right,k);
				}else{
					b := false;
				}
			}
		}
		fold acc(valid(this),write);
	}

	method getBalanceFactor(this:Ref, rd:Perm) returns ( bf : Int )
	  requires rd > none
		requires acc(valid(this),write);
		requires acc(this.balanceFactor,rd);

		ensures acc(valid(this),write);
		ensures acc(this.balanceFactor,rd);
		ensures bf == (this.balanceFactor);

		ensures unfolding acc(valid(this),write) in bf>0 ==> this.left !=null;
		ensures unfolding acc(valid(this),write) in bf<0 ==> this.right!=null;
	{
		unfold acc(valid(this),write);
		var lh : Int := (this.left ==null ? 0 : this.left .height );
		var rh : Int := (this.right==null ? 0 : this.right.height );
		bf := lh-rh;

		fold acc(valid(this),write);
	}

	//////////////////////////////////////////////////////////
	method getBalanceFactorI(this:Ref, rd:Perm) returns ( bf : Int )
	  requires rd > none
		requires acc(this.left,rd);
		requires this.left!=null ==> acc(valid(this.left),write);
		requires this.left!=null ==> acc(this.left.height,rd);
		requires acc(this.right,rd);
		requires this.right!=null ==> acc(valid(this.right),write);
		requires this.right!=null ==> acc(this.right.height,rd);
		ensures acc(this.left,rd);
		ensures this.left!=null ==> acc(valid(this.left),write);
		ensures this.left!=null ==> acc(this.left.height,rd);
		ensures acc(this.right,rd);
		ensures this.right!=null ==> acc(valid(this.right),write);
		ensures this.right!=null ==> acc(this.right.height,rd);
		ensures bf == ((this.left==null?0:this.left.height)-(this.right==null?0:this.right.height));
		ensures bf>0 ==> this.left !=null;
	{
		var lh : Int := (this.left ==null ? 0 : this.left .height );
		var rh : Int := (this.right==null ? 0 : this.right.height );
		bf := lh-rh;

		// this is needed to know that this.right.height > 0
		if(this.right != null) {
		  unfold valid(this.right);
		  fold valid(this.right);
		}
	}

	method close(this:Ref)
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write);
		requires this.left!=null ==> acc(valid(this.left),write);
		requires this.left!=null ==> acc(this.left.height       ,1/2);
		requires this.left!=null ==> acc(this.left.balanceFactor,1/2);
		requires this.right!=null ==> acc(valid(this.right),write);
		requires this.right!=null ==> acc(this.right.height       ,1/2);
		requires this.right!=null ==> acc(this.right.balanceFactor,1/2);
		requires ( this.left==null ? 0 : this.left.height )-( this.right==null ? 0 : this.right.height ) <= 1;
		requires ( this.left==null ? 0 : this.left.height )-( this.right==null ? 0 : this.right.height ) >=-1;
		ensures acc(valid(this),write);
		ensures acc(this.height       ,1/2);
		ensures acc(this.balanceFactor,1/2);
		ensures this.height ==
			( ( old(this.left)==null ? 0 : old(this.left.height) )>( old(this.right)==null ? 0 : old(this.right.height) )
				?
					( old(this.left)==null ? 0 : old(this.left.height) )+1
				:
					( old(this.right)==null ? 0 : old(this.right.height))+1
			);
		ensures this.balanceFactor ==
			(( old(this.left)==null ? 0 : old(this.left.height) )-( old(this.right)==null ? 0 : old(this.right.height) ));
	{
		var lh : Int := (this.left ==null ? 0 : this.left .height );
		var rh : Int := (this.right==null ? 0 : this.right.height );

		this.height := ( (( this.left==null ? 0 : this.left.height )>( this.right==null ? 0 : this.right.height )) ? ( this.left==null ? 0 : this.left.height )+1 : ( this.right==null ? 0 : this.right.height )+1);
		this.balanceFactor := ( this.left==null ? 0 : this.left.height )-( this.right==null ? 0 : this.right.height );


    		// this is needed to know that this.right.height > 0
    		if(this.right != null) {
    		  unfold valid(this.right);
    		  fold valid(this.right);
		}
		// this is needed to know that this.left.height > 0
		if(this.left != null) {
		  unfold valid(this.left);
		  fold valid(this.left);
		}
		fold acc(valid(this),write);
	}

	method rebalanceLeft(this:Ref) returns ( r : Ref )
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write);
		requires this.left!=null;
		requires acc(valid(this.left),write);
		requires acc(this.left.height       ,1/2);
		requires acc(this.left.balanceFactor,1/2);
		requires this.right!=null ==> acc(valid(this.right),write);
		requires this.right!=null ==> acc(this.right.height       ,1/2)
		requires this.right!=null ==> acc(this.right.balanceFactor,1/2)
		requires this.left.height-(this.right==null?0:this.right.height)==2;
		ensures r != null && acc(valid(r),write);
		ensures acc(r.height       ,1/2);
		ensures acc(r.balanceFactor,1/2);
		ensures r.height == old(this.left.height) || (r.height == (old(this.left.height)+1));
	{
		var lbf : Int;
		var rd : Perm;
		fresh rd
		constraining(rd) {
			lbf := getBalanceFactor(this.left,rd);
		}
		if (lbf<0){
			r := rebalanceRL(this);
		}else{//lbf>=0
			r := rebalanceRR(this);
		}
	}

	method rebalanceRL(this:Ref) returns ( r : Ref )
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write);
		requires this.left!=null;
		requires acc(valid(this.left),write);
		requires acc(this.left.height       ,1/2);
		requires acc(this.left.balanceFactor,1/2);
		requires this.right!=null ==> acc(valid(this.right),write);
		requires this.right!=null ==> acc(this.right.height       ,1/2)
		requires this.right!=null ==> acc(this.right.balanceFactor,1/2)
		requires this.left.height-(this.right==null?0:this.right.height)==2;
		requires unfolding valid(this.left) in this.left.balanceFactor==-1;
		ensures r != null && acc(valid(r),write);
		ensures acc(r.height       ,1/2);
		ensures acc(r.balanceFactor,1/2);
		ensures r.height == old(this.left.height);
	{
		unfold acc(valid(this.left),write);
		r := this.left.right;
		unfold acc(valid(r),write);

		this.left.right := r.left;
		close(this.left);
		r.left     := this.left;
		this.left       := r.right;

		close(this);
		r.right    := this;
		close(r);
	}

	method rebalanceRR(this:Ref) returns ( r : Ref )
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write);
		requires this.left!=null;
		requires acc(valid(this.left),write);
		requires acc(this.left.height       ,1/2);
		requires acc(this.left.balanceFactor,1/2);
		requires this.right!=null ==> acc(valid(this.right),write);
		requires this.right!=null ==> acc(this.right.height       ,1/2)
		requires this.right!=null ==> acc(this.right.balanceFactor,1/2)
		requires this.left.height - (this.right==null?0:this.right.height)==2;
		requires this.left.balanceFactor>=0;
		ensures r != null && acc(valid(r),write);
		ensures acc(r.height       ,1/2);
		ensures acc(r.balanceFactor,1/2);
		ensures r.height == old(this.left.height) || r.height == (old(this.left.height)+1);
	{
		unfold acc(valid(this.left),write);
		r       := this.left;
		this.left    := r.right;
		close(this);
		r.right := this;
		close(r);
	}

	method rebalanceRight(this:Ref) returns ( r : Ref )
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write);
		requires this.left!=null==>acc(valid(this.left),write);
		requires this.left!=null==>acc(this.left.height       ,1/2);
		requires this.left!=null==>acc(this.left.balanceFactor,1/2);
		requires this.right!=null;
		requires acc(valid(this.right),write);
		requires acc(this.right.height       ,1/2)
		requires acc(this.right.balanceFactor,1/2)
		requires ((this.left==null?0:this.left.height)-(this.right.height))==-2;
		ensures r != null && acc(valid(r),write);
		ensures acc(r.height       ,1/2);
		ensures acc(r.balanceFactor,1/2);
		ensures r.height == old(this.right.height) || r.height == (old(this.right.height)+1);
	{
		var rbf : Int;
		var rd : Perm;
		fresh rd
		constraining(rd) {
			rbf := getBalanceFactor(this.right,rd);
		}
		if (rbf>0){
			r := rebalanceLR(this);
		}else{//rbf<=0
			r := rebalanceLL(this);
		}
	}

	method rebalanceLR(this:Ref) returns ( r : Ref )
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write);
		requires this.left!=null==>acc(valid(this.left),write);
		requires this.left!=null==>acc(this.left.height       ,1/2);
		requires this.left!=null==>acc(this.left.balanceFactor,1/2);
		requires this.right!=null;
		requires acc(valid(this.right),write);
		requires acc(this.right.height       ,1/2);
		requires acc(this.right.balanceFactor,1/2);
		requires (this.left==null?0:this.left.height)-(this.right.height)==-2;
		requires unfolding valid(this.right) in this.right.balanceFactor==1;
		ensures r != null && acc(valid(r),write);
		ensures acc(r.height       ,1/2);
		ensures acc(r.balanceFactor,1/2);
		ensures r.height == old(this.right.height);
	{
		unfold acc(valid(this.right),write);
		r := this.right.left;
		unfold acc(valid(r),write);
		this.right.left := r.right;
		close(this.right);
		r.right    := this.right;
		this.right      := r.left;
		close(this);
		r.left     := this;
		close(r);
	}

	method rebalanceLL(this:Ref) returns ( r : Ref )
		requires acc(this.key   ,write);
		requires acc(this.height,write);
		requires acc(this.left  ,write);
		requires acc(this.right ,write);
		requires acc(this.balanceFactor,write);
		requires this.left!=null==>acc(valid(this.left),write);
		requires this.left!=null==>acc(this.left.height       ,1/2);
		requires this.left!=null==>acc(this.left.balanceFactor,1/2);
		requires this.right!=null;
		requires acc(valid(this.right),write);
		requires acc(this.right.height       ,1/2);
		requires acc(this.right.balanceFactor,1/2);
		requires (this.left==null?0:this.left.height)-(this.right.height)==-2;
		requires this.right.balanceFactor<=0;
		ensures r != null && acc(valid(r),write);
		ensures acc(r.height       ,1/2);
		ensures acc(r.balanceFactor,1/2);
		ensures r.height == old(this.right.height) || r.height == (old(this.right.height)+1);
	{
		unfold acc(valid(this.right),write);
		r       := this.right;
		this.right    := r.left;
		close(this);
		r.left := this;
		close(r);
	}
