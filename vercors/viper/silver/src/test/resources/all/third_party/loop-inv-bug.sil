/* Provided by Stefan Blom of U Twente.
 * The problem boiled down to Z3 not being able to show a property involving
 * non-linear arithmetic because we had disabled Groebner Bases at that time.
 * See http://stackoverflow.com/questions/28210673.
 */

/* Minimal example */
method test05(n: Int) {
  var i: Int
  var res: Int

  assume i == n
  assume res == i * n // Worked
  assert res == n * n // Failed
}



/* Originally submitted example */
field Ref__res: Int
field Ref__Integer_value: Int

method Ref__Mul(diz: Ref, n: Int) returns (sys__result: Int)
  requires diz != null
  requires n > 0
  requires acc(diz.Ref__res, write)
  requires diz.Ref__res == 0
  ensures acc(diz.Ref__res, write)
  ensures diz.Ref__res == n * n
  ensures n > 0
{
  var i: Int
  i := 0
  diz.Ref__res := 0
  while (i < n)
    invariant acc(diz.Ref__res, write)
    invariant i <= n
    invariant diz.Ref__res == i * n 
  {
    diz.Ref__res := diz.Ref__res + n
    i := i + 1
  }
  assert i == n
  assert diz.Ref__res == i * n // Worked
  assert diz.Ref__res == n * n // Failed
}
