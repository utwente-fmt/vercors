class Wand_readonly_for_writeonly {
  var lemma : int;
  var in_1 : WandDemo;
  function get_in_1():WandDemo
    requires this.valid_wand;
  {
    unfolding this.valid_wand in this.in_1
  }
  var out_1 : WandDemo;
  function get_out_1():WandDemo
    requires this.valid_wand;
  {
    unfolding this.valid_wand in this.out_1
  }
  method apply() returns ()
    requires this.valid_wand;
    requires this.get_in_1()!=null;
    requires this.get_in_1().readonly;
    requires this.get_out_1()!=null;
    ensures old(this.get_out_1()).writeonly;
  {
    unfold this.valid_wand;
    if(this.lemma==1)
      {
        unfold this.this_1.readonly;
        fold this.this_1.writeonly;
      }
  }
  var this_1 : WandDemo;
  predicate valid_wand
  {
    rd*(this.lemma)&&1<=this.lemma&&rd*(this.in_1)&&rd*(this.out_1)&&rd*(this.this_1)&&(this.lemma==1==>this.this_1!=null&&acc(this.this_1.x,75)&&this.in_1==this.this_1&&this.out_1==this.this_1)&&this.lemma<=1
  }
  method Wand_readonly_for_writeonly_init() returns ()
    requires acc(this.lemma,100);
    requires acc(this.in_1,100);
    requires acc(this.out_1,100);
    requires acc(this.this_1,100);
    ensures (acc(this.lemma,100) && this.lemma==0);
    ensures (acc(this.in_1,100) && this.in_1==null);
    ensures (acc(this.out_1,100) && this.out_1==null);
    ensures (acc(this.this_1,100) && this.this_1==null);
  {
    this.lemma := 0;
    this.in_1 := null;
    this.out_1 := null;
    this.this_1 := null;
  }
}//end class Wand_readonly_for_writeonly
class WandDemo {
  var x : int;
  predicate readonly
  {
    acc(this.x,25)
  }
  predicate writeonly
  {
    acc(this.x,100)
  }
  function get():int
    requires this.readonly;
  {
    unfolding this.readonly in
    this.x
  }
  method WandDemo_init() returns ()
    requires acc(this.x,100);
    ensures this.writeonly;
  {
    fold this.writeonly;
  }
  method Wand_readonly_for_writeonly_lemma_1(__this_1: WandDemo,__in_1: WandDemo,__out_1: WandDemo) returns (__result: Wand_readonly_for_writeonly)
    requires __this_1!=null;
    requires acc(__this_1.x,75);
    requires __in_1!=null;
    requires __in_1==__this_1;
    requires __out_1!=null;
    requires __out_1==__this_1;
    ensures __result!=null;
    ensures __result.valid_wand;
    ensures __result.get_in_1()==__in_1;
    ensures __result.get_out_1()==__out_1;
  {
    var this_1 : WandDemo;
    var in_1 : WandDemo;
    var out_1 : WandDemo;
    var wand : Wand_readonly_for_writeonly;
    var __flatten_1 : Wand_readonly_for_writeonly;
    var __flatten_2 : Wand_readonly_for_writeonly;
    this_1 := __this_1;
    in_1 := __in_1;
    out_1 := __out_1;
    __flatten_1 := new Wand_readonly_for_writeonly;
    call __flatten_1.Wand_readonly_for_writeonly_init();
    wand := __flatten_1;
    wand.lemma := 1;
    wand.this_1 := this_1;
    wand.in_1 := in_1;
    wand.out_1 := out_1;
    fold wand.valid_wand;
    __flatten_2 := wand;
    __result := __flatten_2;
    assert __result!=null&&__result.valid_wand&&__result.get_in_1()==__in_1&&__result.get_out_1()==__out_1;
    assume false; // return;
  }
  method set_val(__v: int) returns (wand: Wand_readonly_for_writeonly)
    requires this.writeonly;
    ensures this.readonly;
    ensures wand!=null;
    ensures wand.valid_wand;
    ensures wand.get_in_1()==this;
    ensures wand.get_out_1()==this;
  {
    var v : int;
    var __flatten_3 : Wand_readonly_for_writeonly;
    v := __v;
    unfold this.writeonly;
    this.x := v;
    fold this.readonly;
    call __flatten_3 := this.Wand_readonly_for_writeonly_lemma_1(this,this,this);
    wand := __flatten_3;
  }
  method demo() returns ()
  {
    var wand : Wand_readonly_for_writeonly;
    var d : WandDemo;
    var __flatten_4 : WandDemo;
    var i : int;
    var __flatten_6 : int;
    var __flatten_7 : int;
    var __flatten_13 : int;
    var __flatten_14 : int;
    __flatten_4 := new WandDemo;
    call __flatten_4.WandDemo_init();
    d := __flatten_4;
    i := 1;
    while(true)
      invariant d.writeonly;
    {
      call set_call_wand := d.set_val(i);
      wand := set_call_wand;
      __flatten_13 := d.get();
      __flatten_6 := __flatten_13;
      __flatten_14 := d.get();
      __flatten_7 := __flatten_14;
      i := __flatten_6+__flatten_7;
      call wand.apply();
    }
  }
}//end class WandDemo