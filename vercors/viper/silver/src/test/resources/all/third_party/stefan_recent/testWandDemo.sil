field Wand_readonly_for_writeonly__lemma: Int

field Wand_readonly_for_writeonly__in_1: Ref

field Wand_readonly_for_writeonly__out_1: Ref

field Wand_readonly_for_writeonly__this_1: Ref

field WandDemo__x: Int

function Wand_readonly_for_writeonly__get_in_1(diz: Ref): Ref
  requires diz != null
  requires acc(Wand_readonly_for_writeonly__valid_wand(diz), write)
  ensures result != null
{
  (unfolding acc(Wand_readonly_for_writeonly__valid_wand(diz), write) in diz.Wand_readonly_for_writeonly__in_1)
}

function Wand_readonly_for_writeonly__get_out_1(diz: Ref): Ref
  requires diz != null
  requires acc(Wand_readonly_for_writeonly__valid_wand(diz), write)
  ensures result != null
{
  (unfolding acc(Wand_readonly_for_writeonly__valid_wand(diz), write) in diz.Wand_readonly_for_writeonly__out_1)
}

function WandDemo__get(diz: Ref): Int
  requires diz != null
  requires acc(WandDemo__readonly(diz), write)
{
  (unfolding acc(WandDemo__readonly(diz), write) in diz.WandDemo__x)
}

predicate Wand_readonly_for_writeonly__valid_wand(diz: Ref) {
  acc(diz.Wand_readonly_for_writeonly__lemma, wildcard) && (1 <= diz.Wand_readonly_for_writeonly__lemma) && acc(diz.Wand_readonly_for_writeonly__in_1, wildcard) && (diz.Wand_readonly_for_writeonly__in_1 != null) && acc(diz.Wand_readonly_for_writeonly__out_1, wildcard) && (diz.Wand_readonly_for_writeonly__out_1 != null) && acc(diz.Wand_readonly_for_writeonly__this_1, wildcard) && ((diz.Wand_readonly_for_writeonly__lemma == 1) ==> (diz.Wand_readonly_for_writeonly__this_1 != null) && acc(diz.Wand_readonly_for_writeonly__this_1.WandDemo__x, 3 / 4) && (diz.Wand_readonly_for_writeonly__in_1 == diz.Wand_readonly_for_writeonly__this_1) && (diz.Wand_readonly_for_writeonly__out_1 == diz.Wand_readonly_for_writeonly__this_1)) && (diz.Wand_readonly_for_writeonly__lemma <= 1)
}

predicate WandDemo__readonly(diz: Ref) {
  acc(diz.WandDemo__x, 1 / 4)
}

predicate WandDemo__writeonly(diz: Ref) {
  acc(diz.WandDemo__x, write)
}

method Wand_readonly_for_writeonly___apply(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Wand_readonly_for_writeonly__valid_wand(diz), write)
  requires acc(WandDemo__readonly(Wand_readonly_for_writeonly__get_in_1(diz)), write)
  requires Wand_readonly_for_writeonly__get_out_1(diz) != null
  ensures acc(WandDemo__writeonly(old(Wand_readonly_for_writeonly__get_out_1(diz))), write)
{
  unfold acc(Wand_readonly_for_writeonly__valid_wand(diz), write)
  if (diz.Wand_readonly_for_writeonly__lemma == 1) {
    unfold acc(WandDemo__readonly(diz.Wand_readonly_for_writeonly__this_1), write)
    fold acc(WandDemo__writeonly(diz.Wand_readonly_for_writeonly__this_1), write)
    assert acc(WandDemo__writeonly(old(Wand_readonly_for_writeonly__get_out_1(diz))), write)
    inhale false
  }
}

method Wand_readonly_for_writeonly__Wand_readonly_for_writeonly(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Wand_readonly_for_writeonly__lemma, write) && (sys__result.Wand_readonly_for_writeonly__lemma == 0)
  ensures acc(sys__result.Wand_readonly_for_writeonly__in_1, write) && (sys__result.Wand_readonly_for_writeonly__in_1 == null)
  ensures acc(sys__result.Wand_readonly_for_writeonly__out_1, write) && (sys__result.Wand_readonly_for_writeonly__out_1 == null)
  ensures acc(sys__result.Wand_readonly_for_writeonly__this_1, write) && (sys__result.Wand_readonly_for_writeonly__this_1 == null)
{
  var diz: Ref
  var __flatten_1: Int
  var __flatten_15: Int
  diz := new(Wand_readonly_for_writeonly__lemma, Wand_readonly_for_writeonly__in_1, Wand_readonly_for_writeonly__out_1, Wand_readonly_for_writeonly__this_1)
  __flatten_1 := 0
  __flatten_15 := __flatten_1
  diz.Wand_readonly_for_writeonly__lemma := __flatten_15
  diz.Wand_readonly_for_writeonly__in_1 := null
  diz.Wand_readonly_for_writeonly__out_1 := null
  diz.Wand_readonly_for_writeonly__this_1 := null
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.Wand_readonly_for_writeonly__lemma, write) && (sys__result.Wand_readonly_for_writeonly__lemma == 0)) && (acc(sys__result.Wand_readonly_for_writeonly__in_1, write) && (sys__result.Wand_readonly_for_writeonly__in_1 == null)) && (acc(sys__result.Wand_readonly_for_writeonly__out_1, write) && (sys__result.Wand_readonly_for_writeonly__out_1 == null)) && (acc(sys__result.Wand_readonly_for_writeonly__this_1, write) && (sys__result.Wand_readonly_for_writeonly__this_1 == null))
  inhale false
}

method WandDemo__WandDemo(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(WandDemo__writeonly(sys__result), write)
{
  var diz: Ref
  diz := new(WandDemo__x)
  fold acc(WandDemo__writeonly(diz), write)
  sys__result := diz
  assert (sys__result != null) && acc(WandDemo__writeonly(sys__result), write)
  inhale false
}

method WandDemo__Wand_readonly_for_writeonly_lemma_1(diz: Ref, current_thread_id: Int, this_1: Ref, in_1: Ref, out_1: Ref) returns (sys__result: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires this_1 != null
  requires acc(this_1.WandDemo__x, 3 / 4)
  requires in_1 != null
  requires in_1 == this_1
  requires out_1 != null
  requires out_1 == this_1
  ensures sys__result != null
  ensures acc(Wand_readonly_for_writeonly__valid_wand(sys__result), write)
  ensures Wand_readonly_for_writeonly__get_in_1(sys__result) == in_1
  ensures Wand_readonly_for_writeonly__get_out_1(sys__result) == out_1
{
  var vwand: Ref
  var __flatten_2: Ref
  var __flatten_3: Int
  var __flatten_4: Ref
  var __flatten_5: Ref
  var __flatten_6: Ref
  var __flatten_7: Ref
  var __flatten_17: Int
  var __flatten_18: Ref
  var __flatten_19: Ref
  var __flatten_20: Ref
  __flatten_2 := Wand_readonly_for_writeonly__Wand_readonly_for_writeonly(current_thread_id)
  vwand := __flatten_2
  __flatten_3 := 1
  __flatten_17 := __flatten_3
  vwand.Wand_readonly_for_writeonly__lemma := __flatten_17
  __flatten_4 := this_1
  __flatten_18 := __flatten_4
  vwand.Wand_readonly_for_writeonly__this_1 := __flatten_18
  __flatten_5 := in_1
  __flatten_19 := __flatten_5
  vwand.Wand_readonly_for_writeonly__in_1 := __flatten_19
  __flatten_6 := out_1
  __flatten_20 := __flatten_6
  vwand.Wand_readonly_for_writeonly__out_1 := __flatten_20
  fold acc(Wand_readonly_for_writeonly__valid_wand(vwand), write)
  __flatten_7 := vwand
  sys__result := __flatten_7
  assert (sys__result != null) && acc(Wand_readonly_for_writeonly__valid_wand(sys__result), write) && (Wand_readonly_for_writeonly__get_in_1(sys__result) == in_1) && (Wand_readonly_for_writeonly__get_out_1(sys__result) == out_1)
  inhale false
}

method WandDemo__set(diz: Ref, current_thread_id: Int, v: Int) returns (vwand: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(WandDemo__writeonly(diz), write)
  ensures acc(WandDemo__readonly(diz), write)
  ensures vwand != null
  ensures acc(Wand_readonly_for_writeonly__valid_wand(vwand), write)
  ensures Wand_readonly_for_writeonly__get_in_1(vwand) == diz
  ensures Wand_readonly_for_writeonly__get_out_1(vwand) == diz
{
  var __flatten_8: Int
  var __flatten_9: Ref
  var __flatten_21: Int
  unfold acc(WandDemo__writeonly(diz), write)
  __flatten_8 := v
  __flatten_21 := __flatten_8
  diz.WandDemo__x := __flatten_21
  fold acc(WandDemo__readonly(diz), write)
  __flatten_9 := WandDemo__Wand_readonly_for_writeonly_lemma_1(diz, current_thread_id, diz, diz, diz)
  vwand := __flatten_9
}

method WandDemo__demo(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
{
  var vwand: Ref
  var d: Ref
  var __flatten_10: Ref
  var i: Int
  var __flatten_12: Int
  var __flatten_13: Int
  var __flatten_25: Int
  var __flatten_26: Int
  __flatten_10 := WandDemo__WandDemo(current_thread_id)
  d := __flatten_10
  i := 1
  while (true)
    invariant acc(WandDemo__writeonly(d), write)
  {
    vwand := WandDemo__set(d, current_thread_id, i)
    __flatten_25 := WandDemo__get(d)
    __flatten_12 := __flatten_25
    __flatten_26 := WandDemo__get(d)
    __flatten_13 := __flatten_26
    i := __flatten_12 + __flatten_13
    Wand_readonly_for_writeonly___apply(vwand, current_thread_id)
  }
}
