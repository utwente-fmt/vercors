domain GlobalKPermission {

  unique function globalK$(): Perm

  axiom globalKReadOnly {
    (globalK$() > none) && (write > globalK$())
  }
}

field old$methodPermission: Perm

field joinable$: Bool

field Wand_readonly_for_writeonlylemma$: Int

field Wand_readonly_for_writeonlyin_1$: Ref

field Wand_readonly_for_writeonlyout_1$: Ref

field Wand_readonly_for_writeonlythis_1$: Ref

field WandDemox$: Int

field old$Wand_readonly_for_writeonlyapply$0: Ref

field par$Wand_readonly_for_writeonlyapply$this$_3: Ref

field par$Wand_readonly_for_writeonlyapply$k$: Perm

field par$Wand_readonly_for_writeonlyWand_readonly_for_writeonly_init$this$_5: Ref

field par$Wand_readonly_for_writeonlyWand_readonly_for_writeonly_init$k$_1: Perm

field par$WandDemoWandDemo_init$this$_10: Ref

field par$WandDemoWandDemo_init$k$_2: Perm

field par$WandDemoWand_readonly_for_writeonly_lemma_1$this$_11: Ref

field par$WandDemoWand_readonly_for_writeonly_lemma_1$k$_3: Perm

field par$WandDemoWand_readonly_for_writeonly_lemma_1$__this_1: Ref

field par$WandDemoWand_readonly_for_writeonly_lemma_1$__in_1: Ref

field par$WandDemoWand_readonly_for_writeonly_lemma_1$__out_1: Ref

field par$WandDemoset_val$this$_12: Ref

field par$WandDemoset_val$k$_4: Perm

field par$WandDemoset_val$__v: Int

field par$WandDemodemo$this$_13: Ref

field par$WandDemodemo$k$_5: Perm

function Wand_readonly_for_writeonlyget_in_1$(this$_1: Ref): Ref
  requires this$_1 != null
  requires acc(Wand_readonly_for_writeonlyvalid_wand$(this$_1), wildcard)
{
  (unfolding acc(Wand_readonly_for_writeonlyvalid_wand$(this$_1), wildcard) in this$_1.Wand_readonly_for_writeonlyin_1$)

}

function Wand_readonly_for_writeonlyget_out_1$(this$_2: Ref): Ref
  requires this$_2 != null
  requires acc(Wand_readonly_for_writeonlyvalid_wand$(this$_2), wildcard)
{
  (unfolding acc(Wand_readonly_for_writeonlyvalid_wand$(this$_2), wildcard) in this$_2.Wand_readonly_for_writeonlyout_1$
)
}

function WandDemoget$(this$_9: Ref): Int
  requires this$_9 != null
  requires acc(WandDemoreadonly$(this$_9), wildcard)
{
  (unfolding acc(WandDemoreadonly$(this$_9), wildcard) in this$_9.WandDemox$)
}

predicate Wand_readonly_for_writeonly$MonitorInvariant(this$: Ref) {
  true
}

predicate Wand_readonly_for_writeonlyvalid_wand$(this$_4: Ref) {
  acc(this$_4.Wand_readonly_for_writeonlylemma$, wildcard) && (1 <= this$_4.Wand_readonly_for_writeonlylemma$) && acc(this$_4.Wand_readonly_for_writeonlyin_1$, wildcard) && acc(this$_4.Wand_readonly_for_writeonlyout_1$, wildcard) && acc(this$_4.Wand_readonly_for_writeonlythis_1$, wildcard) && ((this$_4.Wand_readonly_for_writeonlylemma$ == 1) ==> (this$_4.Wand_readonly_for_writeonlythis_1$ != null) && acc(this$_4.Wand_readonly_for_writeonlythis_1$.WandDemox$, 75 / 100) && (this$_4.Wand_readonly_for_writeonlyin_1$ == this$_4.Wand_readonly_for_writeonlythis_1$) && (this$_4.Wand_readonly_for_writeonlyout_1$ == this$_4.Wand_readonly_for_writeonlythis_1$)) && (this$_4.Wand_readonly_for_writeonlylemma$ <= 1)
}

predicate WandDemo$MonitorInvariant(this$_6: Ref) {
  true
}

predicate WandDemoreadonly$(this$_7: Ref) {
  acc(this$_7.WandDemox$, 25 / 100)
}

predicate WandDemowriteonly$(this$_8: Ref) {
  acc(this$_8.WandDemox$, 100 / 100)
}

method Wand_readonly_for_writeonlyapply$(this$_3: Ref, k$: Perm)
  requires this$_3 != null
  requires k$ > none
  requires write > k$
  requires acc(Wand_readonly_for_writeonlyvalid_wand$(this$_3), write)
  requires Wand_readonly_for_writeonlyget_in_1$(this$_3) != null
  requires acc(WandDemoreadonly$(Wand_readonly_for_writeonlyget_in_1$(this$_3)), write)
  requires Wand_readonly_for_writeonlyget_out_1$(this$_3) != null
  ensures acc(WandDemowriteonly$(old(Wand_readonly_for_writeonlyget_out_1$(this$_3))), write)
{
  var n$: Ref
  unfold acc(Wand_readonly_for_writeonlyvalid_wand$(this$_3), write)
  if (this$_3.Wand_readonly_for_writeonlylemma$ == 1) {
    unfold acc(WandDemoreadonly$(this$_3.Wand_readonly_for_writeonlythis_1$), write)
    fold acc(WandDemowriteonly$(this$_3.Wand_readonly_for_writeonlythis_1$), write)
  }
}

method Wand_readonly_for_writeonlyWand_readonly_for_writeonly_init$(this$_5: Ref, k$_1: Perm)
  requires this$_5 != null
  requires k$_1 > none
  requires write > k$_1
  requires acc(this$_5.Wand_readonly_for_writeonlylemma$, 100 / 100)
  requires acc(this$_5.Wand_readonly_for_writeonlyin_1$, 100 / 100)
  requires acc(this$_5.Wand_readonly_for_writeonlyout_1$, 100 / 100)
  requires acc(this$_5.Wand_readonly_for_writeonlythis_1$, 100 / 100)
  ensures acc(this$_5.Wand_readonly_for_writeonlylemma$, 100 / 100) && (this$_5.Wand_readonly_for_writeonlylemma$ == 0)
  ensures acc(this$_5.Wand_readonly_for_writeonlyin_1$, 100 / 100) && (this$_5.Wand_readonly_for_writeonlyin_1$ == null)

  ensures acc(this$_5.Wand_readonly_for_writeonlyout_1$, 100 / 100) && (this$_5.Wand_readonly_for_writeonlyout_1$ == null)
  ensures acc(this$_5.Wand_readonly_for_writeonlythis_1$, 100 / 100) && (this$_5.Wand_readonly_for_writeonlythis_1$ == null)
{
  var n$_1: Ref
  this$_5.Wand_readonly_for_writeonlylemma$ := 0
  this$_5.Wand_readonly_for_writeonlyin_1$ := null
  this$_5.Wand_readonly_for_writeonlyout_1$ := null
  this$_5.Wand_readonly_for_writeonlythis_1$ := null
}

method WandDemoWandDemo_init$(this$_10: Ref, k$_2: Perm)
  requires this$_10 != null
  requires k$_2 > none
  requires write > k$_2
  requires acc(this$_10.WandDemox$, 100 / 100)
  ensures acc(WandDemowriteonly$(this$_10), write)
{
  var n$_2: Ref
  fold acc(WandDemowriteonly$(this$_10), write)
}

method WandDemoWand_readonly_for_writeonly_lemma_1$(this$_11: Ref, k$_3: Perm, __this_1: Ref, __in_1: Ref, __out_1: Ref)
 returns (__result: Ref)
  requires this$_11 != null
  requires k$_3 > none
  requires write > k$_3
  requires __this_1 != null
  requires acc(__this_1.WandDemox$, 75 / 100)
  requires __in_1 != null
  requires __in_1 == __this_1
  requires __out_1 != null
  requires __out_1 == __this_1
  ensures __result != null
  ensures acc(Wand_readonly_for_writeonlyvalid_wand$(__result), write)
  ensures Wand_readonly_for_writeonlyget_in_1$(__result) == __in_1
  ensures Wand_readonly_for_writeonlyget_out_1$(__result) == __out_1
{
  var n$_3: Ref
  var this_1: Ref
  var in_1: Ref
  var out_1: Ref
  var wand$: Ref
  var __flatten_1: Ref
  var __flatten_2: Ref
  var newK$_1: Perm
  this_1 := __this_1
  in_1 := __in_1
  out_1 := __out_1
  n$_3 := new(*)
  __flatten_1 := n$_3
  fresh newK$_1
  constraining(newK$_1) {
    Wand_readonly_for_writeonlyWand_readonly_for_writeonly_init$(__flatten_1, newK$_1)
  }
  wand$ := __flatten_1
  wand$.Wand_readonly_for_writeonlylemma$ := 1
  wand$.Wand_readonly_for_writeonlythis_1$ := this_1
  wand$.Wand_readonly_for_writeonlyin_1$ := in_1
  wand$.Wand_readonly_for_writeonlyout_1$ := out_1
  fold acc(Wand_readonly_for_writeonlyvalid_wand$(wand$), write)
  __flatten_2 := wand$
  __result := __flatten_2
  assert (__result != null) && acc(Wand_readonly_for_writeonlyvalid_wand$(__result), write) && (Wand_readonly_for_writeonlyget_in_1$(__result) == __in_1) && (Wand_readonly_for_writeonlyget_out_1$(__result) == __out_1)
  inhale false
}

method WandDemoset_val$(this$_12: Ref, k$_4: Perm, __v: Int) returns (wand$: Ref)
  requires this$_12 != null
  requires k$_4 > none
  requires write > k$_4
  requires acc(WandDemowriteonly$(this$_12), write)
  ensures acc(WandDemoreadonly$(this$_12), write)
  ensures wand$ != null
  ensures acc(Wand_readonly_for_writeonlyvalid_wand$(wand$), write)
  ensures Wand_readonly_for_writeonlyget_in_1$(wand$) == this$_12
  ensures Wand_readonly_for_writeonlyget_out_1$(wand$) == this$_12
{
  var n$_4: Ref
  var v: Int
  var __flatten_3: Ref
  var newK$: Perm
  v := __v
  unfold acc(WandDemowriteonly$(this$_12), write)
  this$_12.WandDemox$ := v
  fold acc(WandDemoreadonly$(this$_12), write)
  fresh newK$
  constraining(newK$) {
    __flatten_3 := WandDemoWand_readonly_for_writeonly_lemma_1$(this$_12, newK$, this$_12, this$_12, this$_12)
  }
  wand$ := __flatten_3
}

method WandDemodemo$(this$_13: Ref, k$_5: Perm)
  requires this$_13 != null
  requires k$_5 > none
  requires write > k$_5
{
  var n$_5: Ref
  var wand$: Ref
  var d: Ref
  var __flatten_4: Ref
  var i: Int
  var __flatten_6: Int
  var __flatten_7: Int
  var __flatten_13: Int
  var __flatten_14: Int
  var newK$_2: Perm
  var newK$_3: Perm
  var newK$_4: Perm
  var set_call_wand$: Ref
  n$_5 := new(*)
  __flatten_4 := n$_5
  fresh newK$_2
  constraining(newK$_2) {
    WandDemoWandDemo_init$(__flatten_4, newK$_2)
  }
  d := __flatten_4
  i := 1
  while (true)
    invariant acc(WandDemowriteonly$(d), write)
  {
    fresh newK$_3
    constraining(newK$_3) {
      set_call_wand$ := WandDemoset_val$(d, newK$_3, i)
    }
    wand$ := set_call_wand$
    __flatten_13 := WandDemoget$(d)
    __flatten_6 := __flatten_13
    __flatten_14 := WandDemoget$(d)
    __flatten_7 := __flatten_14
    i := __flatten_6 + __flatten_7
    fresh newK$_4
    constraining(newK$_4) {
      Wand_readonly_for_writeonlyapply$(wand$, newK$_4)
    }
  }
}
