field zero__x: Seq[Ref]

field Ref__Integer_value: Int

method zero__main_main(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires 0 <= lid
  requires lid < gsize
  requires 0 <= gid
  requires tid == lid + gid * gsize
  requires acc(diz.zero__x, wildcard)
  requires |diz.zero__x| == tcount
  requires acc(diz.zero__x[tid].Ref__Integer_value, write)
  ensures 0 <= tid
  ensures tid < tcount
  ensures 0 <= lid
  ensures lid < gsize
  ensures 0 <= gid
  ensures tid == lid + gid * gsize
  ensures acc(diz.zero__x, wildcard)
  ensures |diz.zero__x| == tcount
  ensures diz.zero__x == old(diz.zero__x)
  ensures acc(diz.zero__x[tid].Ref__Integer_value, write)
    //:: ExpectedOutput(postcondition.violated:assertion.false)
    // confirmed by Stefan Blom    
  ensures diz.zero__x[tid].Ref__Integer_value == 0
{
  var __last_barrier: Int
  var __flatten_1: Ref
  var __flatten_2: Int
  __last_barrier := 0
  __flatten_1 := diz.zero__x[tid]
  __flatten_2 := 1
  __flatten_1.Ref__Integer_value := __flatten_2
}

method zero__main_barrier(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int, this_barrier: Int, last_barrier: Int) returns (sys__result: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires 0 <= lid
  requires lid < gsize
  requires 0 <= gid
  requires tid == lid + gid * gsize
  requires acc(diz.zero__x, wildcard)
  requires |diz.zero__x| == tcount
  requires (last_barrier == 0) ==> acc(diz.zero__x[tid].Ref__Integer_value, write)
  ensures 0 <= tid
  ensures tid < tcount
  ensures 0 <= lid
  ensures lid < gsize
  ensures 0 <= gid
  ensures tid == lid + gid * gsize
  ensures acc(diz.zero__x, wildcard)
  ensures |diz.zero__x| == tcount
  ensures diz.zero__x == old(diz.zero__x)
  ensures (sys__result == 0) ==> acc(diz.zero__x[tid].Ref__Integer_value, write)
  ensures sys__result == this_barrier
{
  inhale false
}