field Ref__res: Int

field Ref__Integer_value: Int

method Ref__Mul(diz: Ref, n: Int) returns (sys__result: Int)
  requires diz != null
  requires n > 0
  requires acc(diz.Ref__res, write)
  requires diz.Ref__res == 0
  ensures acc(diz.Ref__res, write)
  ensures diz.Ref__res == n * n
  ensures n > 0
{
  var i: Int
  var __flatten_1: Int
  var __flatten_2: Int
  var __flatten_3: Int
  var __flatten_4: Int
  var __flatten_5: Int
  var __flatten_6: Int
  i := 0
  diz.Ref__res := 0
  while (i < n)
    invariant acc(diz.Ref__res, write)
    invariant i <= n
    invariant diz.Ref__res == i * n 
  {
    __flatten_4 := diz.Ref__res + n
    __flatten_1 := __flatten_4
    diz.Ref__res := __flatten_1
    __flatten_5 := i + 1
    __flatten_2 := __flatten_5
    i := __flatten_2
  }
  __flatten_6 := diz.Ref__res
  __flatten_3 := __flatten_6
  sys__result := __flatten_3
  assert acc(diz.Ref__res, write) && (diz.Ref__res == n * n) && (n > 0)
  inhale false
}