field Tree__data: Int

field Tree__left: Ref

field Tree__right: Ref

function Tree__contents(t: Ref): Seq[Int]
  requires (t != null) ==> acc(Tree__state(t), write)
  ensures (t != null) ==> (|result| > 0)
{
  (t == null ? Seq[Int]() : (unfolding acc(Tree__state(t), write) in Tree__contents(t.Tree__left) ++ Seq(t.Tree__data) ++ Tree__contents(t.Tree__right)))
}

predicate Tree__state(diz: Ref) {
  acc(diz.Tree__data, write) && acc(diz.Tree__left, write) && acc(diz.Tree__right, write) && ((diz.Tree__left != null) ==> acc(Tree__state(diz.Tree__left), write)) && ((diz.Tree__right != null) ==> acc(Tree__state(diz.Tree__right), write))
}

method Tree__del_min(diz: Ref, current_thread_id: Int, t: Ref) returns (sys__result: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires t != null
  requires acc(Tree__state(t), write)
  ensures (sys__result != null) ==> acc(Tree__state(sys__result), write)
  ensures Tree__contents(sys__result) == old(Tree__contents(t))[1..]
{
  var __flatten_1: Ref
  var __flatten_2: Ref
  var __flatten_3: Ref
  var __flatten_4: Ref
  var __flatten_7: Ref
  unfold acc(Tree__state(t), write)
  if (t.Tree__left == null) {
    assert Tree__contents(t.Tree__left) == Seq[Int]()
    __flatten_1 := t.Tree__right
    sys__result := __flatten_1
    assert ((sys__result != null) ==> acc(Tree__state(sys__result), write)) && (Tree__contents(sys__result) == old(Tree__contents(t))[1..])
    inhale false
  } else {
    __flatten_3 := Tree__del_min(diz, current_thread_id, t.Tree__left)
    __flatten_2 := __flatten_3
    __flatten_7 := __flatten_2
    t.Tree__left := __flatten_7
    fold acc(Tree__state(t), write)
    __flatten_4 := t
    sys__result := __flatten_4
    assert ((sys__result != null) ==> acc(Tree__state(sys__result), write)) && (Tree__contents(sys__result) == old(Tree__contents(t))[1..])
    inhale false
  }
}

method Tree__Tree(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Tree__data, write) && (sys__result.Tree__data == 0)
  ensures acc(sys__result.Tree__left, write) && (sys__result.Tree__left == null)
  ensures acc(sys__result.Tree__right, write) && (sys__result.Tree__right == null)
{
  var diz: Ref
  var __flatten_5: Int
  var __flatten_8: Int
  diz := new(Tree__data, Tree__left, Tree__right)
  __flatten_5 := 0
  __flatten_8 := __flatten_5
  diz.Tree__data := __flatten_8
  diz.Tree__left := null
  diz.Tree__right := null
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.Tree__data, write) && (sys__result.Tree__data == 0)) && (acc(sys__result.Tree__left, write) && (sys__result.Tree__left == null)) && (acc(sys__result.Tree__right, write) && (sys__result.Tree__right == null))
  inhale false
}