domain Process {
  
  function p_empty(): Process
  
  function p_merge(p1: Process, p2: Process): Process
  
  function p_seq(p1: Process, p2: Process): Process
  
  function p_incr(): Process
  
  function p_single(n: Int): Process
  
  function p_dual(n: Int, m: Int): Process
  
  axiom empty_1L {
    (forall p: Process :: p_merge(p_empty(), p) == p)
  }
  
  axiom empty_2L {
    (forall p: Process :: p_seq(p_empty(), p) == p)
  }
  
  axiom empty_2R {
    (forall p: Process :: p_seq(p, p_empty()) == p)
  }
  
  axiom seq_assoc {
    (forall p1: Process :: (forall p2: Process :: (forall p3: Process :: p_seq(p_seq(p1, p2), p3) == p_seq(p1, p_seq(p2, p3)))))
  }
  
  axiom single_def {
    (forall n: Int :: { p_single(n) } (n > 0 ? p_seq(p_incr(), p_single(n - 1)) : p_empty()) == p_single(n))
  }
  
  axiom dual_def {
    (forall n: Int, m: Int :: { p_dual(n, m) } p_merge(p_single(n), p_single(m)) == p_dual(n, m))
  }
  
  axiom lemma_post {
    (forall n: Int :: p_single(n) == (n > 0 ? p_seq(p_single(n - 1), p_incr()) : p_empty()))
  }
  
  axiom single_axiom_post {
    (forall m: Int, n: Int :: p_seq(p_single(m), p_single(n)) == p_single(m + n))
  }
}

field History__x_hist_value: Int

field History__x_hist_mode: Int

field History__x_hist_init: Int

field History__x_hist_act: Int

function History__free_get_x(diz: Ref): Int
  requires diz != null
  requires acc(diz.History__x_hist_value, wildcard)
{
  diz.History__x_hist_value
}

function History__hist_get_x(diz: Ref): Int
  requires diz != null
  requires acc(diz.History__x_hist_value, wildcard)
{
  diz.History__x_hist_value
}

predicate History__hist_do_incr(diz: Ref, frac: Perm, proc: Process) 

predicate History__hist_idle(diz: Ref, frac: Perm, proc: Process) 

method History__incr_begin(diz: Ref, current_thread_id: Int, frac: Perm, proc: Process)
  requires diz != null
  requires current_thread_id >= 0
  requires frac != none
  requires acc(History__hist_idle(diz, frac, proc), write)
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 1)
  ensures frac != none
  ensures acc(History__hist_do_incr(diz, frac, proc), write)
  ensures acc(diz.History__x_hist_value, write)
  ensures acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 2)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_value)
  ensures acc(diz.History__x_hist_act, write)
  ensures diz.History__x_hist_value == diz.History__x_hist_act
{
  inhale false
}

method History__incr_commit(diz: Ref, current_thread_id: Int, frac: Perm, proc: Process)
  requires diz != null
  requires current_thread_id >= 0
  requires frac != none
  requires acc(History__hist_do_incr(diz, frac, proc), write)
  requires acc(diz.History__x_hist_act, write)
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 2)
  requires diz.History__x_hist_value == diz.History__x_hist_act + 1
  ensures frac != none
  ensures acc(History__hist_idle(diz, frac, p_seq(proc, p_incr())), write)
  ensures acc(diz.History__x_hist_value, write)
  ensures acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 1)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_value)
{
  inhale false
}

method History__free_set_x(diz: Ref, current_thread_id: Int, value: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, 1 / 2) && (diz.History__x_hist_mode == 0)
  ensures acc(diz.History__x_hist_value, write) && (diz.History__x_hist_value == value)
  ensures acc(diz.History__x_hist_mode, 1 / 2) && (diz.History__x_hist_mode == 0)
{
  inhale false
}

method History__hist_set_x(diz: Ref, current_thread_id: Int, value: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, 1 / 2) && (diz.History__x_hist_mode == 2)
  ensures acc(diz.History__x_hist_value, write) && (diz.History__x_hist_value == value)
  ensures acc(diz.History__x_hist_mode, 1 / 2) && (diz.History__x_hist_mode == 2)
{
  inhale false
}

method History__begin_hist(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 0)
  requires acc(diz.History__x_hist_init, write)
  requires acc(diz.History__x_hist_act, write)
  ensures acc(diz.History__x_hist_value, write)
  ensures acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 1)
  ensures acc(diz.History__x_hist_init, write)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_value)
  ensures diz.History__x_hist_init == old(diz.History__x_hist_value)
  ensures acc(History__hist_idle(diz, write, p_empty()), write)
{
  inhale false
}

method History__split(diz: Ref, current_thread_id: Int, frac1: Perm, proc1: Process, frac2: Perm, proc2: Process)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(History__hist_idle(diz, frac1 + frac2, p_merge(proc1, proc2)), write)
  ensures acc(History__hist_idle(diz, frac1, proc1), write)
  ensures acc(History__hist_idle(diz, frac2, proc2), write)
{
  inhale false
}

method History__merge(diz: Ref, current_thread_id: Int, frac1: Perm, proc1: Process, frac2: Perm, proc2: Process)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(History__hist_idle(diz, frac1, proc1), write)
  requires acc(History__hist_idle(diz, frac2, proc2), write)
  ensures acc(History__hist_idle(diz, frac1 + frac2, p_merge(proc1, proc2)), write)
{
  inhale false
}

method History__History(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.History__x_hist_value, write) && (sys__result.History__x_hist_value == 0)
  ensures acc(sys__result.History__x_hist_mode, write) && (sys__result.History__x_hist_mode == 0)
  ensures acc(sys__result.History__x_hist_init, write) && (sys__result.History__x_hist_init == 0)
  ensures acc(sys__result.History__x_hist_act, write) && (sys__result.History__x_hist_act == 0)
{
  var diz: Ref
  var __flatten_31: Int
  var __flatten_32: Int
  var __flatten_33: Int
  var __flatten_34: Int
  var __flatten_74: Int
  var __flatten_75: Int
  var __flatten_76: Int
  var __flatten_77: Int
  diz := new(History__x_hist_value, History__x_hist_mode, History__x_hist_init, History__x_hist_act)
  __flatten_31 := 0
  __flatten_74 := __flatten_31
  diz.History__x_hist_value := __flatten_74
  __flatten_32 := 0
  __flatten_75 := __flatten_32
  diz.History__x_hist_mode := __flatten_75
  __flatten_33 := 0
  __flatten_76 := __flatten_33
  diz.History__x_hist_init := __flatten_76
  __flatten_34 := 0
  __flatten_77 := __flatten_34
  diz.History__x_hist_act := __flatten_77
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.History__x_hist_value, write) && (sys__result.History__x_hist_value == 0)) && (acc(sys__result.History__x_hist_mode, write) && (sys__result.History__x_hist_mode == 0)) && (acc(sys__result.History__x_hist_init, write) && (sys__result.History__x_hist_init == 0)) && (acc(sys__result.History__x_hist_act, write) && (sys__result.History__x_hist_act == 0))
  inhale false
}

method History__if_any_random(diz: Ref, current_thread_id: Int) returns (sys__result: Bool)
  requires diz != null
  requires current_thread_id >= 0
{
  inhale false
}

method Application__do_incr_loop(diz: Ref, current_thread_id: Int, h: Ref, n: Int, p: Process, q: Perm)
  requires diz != null
  requires current_thread_id >= 0
  requires n >= 0
  requires q != none
  requires acc(History__hist_idle(h, q, p), write)
  requires acc(h.History__x_hist_value, write)
  requires acc(h.History__x_hist_mode, write) && (h.History__x_hist_mode == 1)
  ensures acc(h.History__x_hist_value, write)
  ensures acc(h.History__x_hist_mode, write) && (h.History__x_hist_mode == 1)
  ensures acc(History__hist_idle(h, q, p_seq(p, p_single(n))), write)
{
  var if_any_bool: Bool
  var i: Int
  i := 0
  while (i < n)
    invariant 0 <= i
    invariant i <= n
    invariant q != none
    invariant acc(h.History__x_hist_value, write)
    invariant acc(h.History__x_hist_mode, write) && (h.History__x_hist_mode == 1)
    invariant acc(History__hist_idle(h, q, p_seq(p, p_single(i))), write) 
  {
    History__incr_begin(h, current_thread_id, q, p_seq(p, p_single(i)))
    History__hist_set_x(h, current_thread_id, h.History__x_hist_value + 1)
    History__incr_commit(h, current_thread_id, q, p_seq(p, p_single(i)))
    i := i + 1
  }
}

method Application__do_loop_twice(diz: Ref, current_thread_id: Int, h: Ref, m: Int, n: Int, q: Perm)
  requires diz != null
  requires current_thread_id >= 0
  requires m >= 0
  requires n >= 0
  requires q != none
  requires acc(History__hist_idle(h, q, p_empty()), write)
  requires acc(h.History__x_hist_value, write)
  requires acc(h.History__x_hist_mode, write) && (h.History__x_hist_mode == 1)
  ensures acc(h.History__x_hist_value, write)
  ensures acc(h.History__x_hist_mode, write) && (h.History__x_hist_mode == 1)
  ensures acc(History__hist_idle(h, q, p_single(m + n)), write)
{
  var if_any_bool: Bool
  Application__do_incr_loop(diz, current_thread_id, h, m, p_empty(), q)
  Application__do_incr_loop(diz, current_thread_id, h, n, p_single(m), q)
}

method Application__Application(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
{
  var diz: Ref
  diz := new()
  sys__result := diz
  assert sys__result != null
  inhale false
}

method Application__if_any_random(diz: Ref, current_thread_id: Int) returns (sys__result: Bool)
  requires diz != null
  requires current_thread_id >= 0
{
  inhale false
}