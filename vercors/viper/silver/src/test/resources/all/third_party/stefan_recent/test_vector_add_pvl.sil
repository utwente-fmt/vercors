field Ref__a: Seq[Ref]

field Ref__b: Seq[Ref]

field Ref__c: Seq[Ref]

field Ref__Integer_value: Int

method Ref__main_main(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires 0 <= lid
  requires lid < gsize
  requires 0 <= gid
  requires tid == lid + gid * gsize
  requires acc(diz.Ref__a, wildcard)
  requires |diz.Ref__a| == tcount
  requires acc(diz.Ref__b, wildcard)
  requires |diz.Ref__b| == tcount
  requires acc(diz.Ref__c, wildcard)
  requires |diz.Ref__c| == tcount
  requires acc(diz.Ref__a[tid].Ref__Integer_value, write)
  requires acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2)
  requires acc(diz.Ref__c[tid].Ref__Integer_value, 1 / 2)
  ensures 0 <= tid
  ensures tid < tcount
  ensures 0 <= lid
  ensures lid < gsize
  ensures 0 <= gid
  ensures tid == lid + gid * gsize
  ensures acc(diz.Ref__a, wildcard)
  ensures |diz.Ref__a| == tcount
  ensures acc(diz.Ref__b, wildcard)
  ensures |diz.Ref__b| == tcount
  ensures acc(diz.Ref__c, wildcard)
  ensures |diz.Ref__c| == tcount
  ensures diz.Ref__a == old(diz.Ref__a)
  ensures diz.Ref__b == old(diz.Ref__b)
  ensures diz.Ref__c == old(diz.Ref__c)
  ensures acc(diz.Ref__a[tid].Ref__Integer_value, write)
  ensures acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2)
  ensures acc(diz.Ref__c[tid].Ref__Integer_value, 1 / 2)
  ensures diz.Ref__b[tid].Ref__Integer_value == old(diz.Ref__b[tid].Ref__Integer_value)
  ensures diz.Ref__c[tid].Ref__Integer_value == old(diz.Ref__c[tid].Ref__Integer_value)
  ensures diz.Ref__a[tid].Ref__Integer_value == diz.Ref__b[tid].Ref__Integer_value + diz.Ref__c[tid].Ref__Integer_value
{
  var __last_barrier: Int
  var __flatten_1: Ref
  var __flatten_2: Int
  var __flatten_3: Ref
  var __flatten_4: Ref
  __last_barrier := 0
  __flatten_1 := diz.Ref__a[tid]
  __flatten_3 := diz.Ref__b[tid]
  __flatten_4 := diz.Ref__c[tid]
  __flatten_2 := __flatten_3.Ref__Integer_value + __flatten_4.Ref__Integer_value
  __flatten_1.Ref__Integer_value := __flatten_2
}

method Ref__main_barrier(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int, this_barrier: Int, last_barrier: Int) returns (sys__result: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires 0 <= lid
  requires lid < gsize
  requires 0 <= gid
  requires tid == lid + gid * gsize
  requires acc(diz.Ref__a, wildcard)
  requires |diz.Ref__a| == tcount
  requires acc(diz.Ref__b, wildcard)
  requires |diz.Ref__b| == tcount
  requires acc(diz.Ref__c, wildcard)
  requires |diz.Ref__c| == tcount
  requires (last_barrier == 0) ==> acc(diz.Ref__a[tid].Ref__Integer_value, write) && acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2) && acc(diz.Ref__c[tid].Ref__Integer_value, 1 / 2)
  ensures 0 <= tid
  ensures tid < tcount
  ensures 0 <= lid
  ensures lid < gsize
  ensures 0 <= gid
  ensures tid == lid + gid * gsize
  ensures acc(diz.Ref__a, wildcard)
  ensures |diz.Ref__a| == tcount
  ensures acc(diz.Ref__b, wildcard)
  ensures |diz.Ref__b| == tcount
  ensures acc(diz.Ref__c, wildcard)
  ensures |diz.Ref__c| == tcount
  ensures diz.Ref__a == old(diz.Ref__a)
  ensures diz.Ref__b == old(diz.Ref__b)
  ensures diz.Ref__c == old(diz.Ref__c)
  ensures (sys__result == 0) ==> acc(diz.Ref__a[tid].Ref__Integer_value, write) && acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 2) && acc(diz.Ref__c[tid].Ref__Integer_value, 1 / 2)
  ensures sys__result == this_barrier
{
  inhale false
}