domain Process {
  
  function p_merge(p1: Process, p2: Process): Process
  
  function p_seq(p1: Process, p2: Process): Process
  
  function p_empty(): Process
  
  function p_incr(): Process
  
  function p_single(n: Int): Process
  
  function p_dual(n: Int, m: Int): Process
  
  axiom empty_1L {
    (forall p: Process :: p_merge(p_empty(), p) == p)
  }
  
  axiom empty_2L {
    (forall p: Process :: p_seq(p_empty(), p) == p)
  }
  
  axiom empty_2R {
    (forall p: Process :: p_seq(p, p_empty()) == p)
  }
  
  axiom single_def {
    (forall n: Int :: (n > 0 ? p_seq(p_incr(), p_single(n - 1)) : p_empty()) == p_single(n))
  }
  
  axiom dual_def {
    (forall n: Int, m: Int :: p_merge(p_single(n), p_single(m)) == p_dual(n, m))
  }
}

field Ref__x: Int

field Ref__x_old: Int

field Ref__Integer_value: Int

predicate Ref__hist_idle(diz: Ref, ref: Ref, p: Process) {
  true
}

predicate Ref__hist_empty(diz: Ref, ref: Ref, p: Process) {
  true
}

predicate Ref__hist_incr(diz: Ref, ref: Ref, p: Process) {
  true
}

method Ref__do_incr(diz: Ref, h: Ref)
  requires diz != null
  requires acc(diz.Ref__x, write)
  requires h != null
  requires acc(Ref__hist_idle(h, diz, p_empty()), write)
  ensures acc(diz.Ref__x, write)
  ensures h != null
  ensures acc(Ref__hist_idle(h, diz, p_single(1)), write)
{
  var if_any_bool: Bool
  var __flatten_18: Int
  var __flatten_49: Int
  Ref__incr_begin(h, diz, p_empty())
  __flatten_49 := diz.Ref__x + 1
  __flatten_18 := __flatten_49
  diz.Ref__x := __flatten_18
  Ref__incr_commit(h, diz, p_empty())
}

method Ref__do_incr_twice(diz: Ref, h: Ref)
  requires diz != null
  requires acc(diz.Ref__x, write)
  requires h != null
  requires acc(Ref__hist_idle(h, diz, p_empty()), write)
  ensures acc(diz.Ref__x, write)
  ensures h != null
  ensures acc(Ref__hist_idle(h, diz, p_single(2)), write)
{
  var if_any_bool: Bool
  var __flatten_23: Int
  var __flatten_28: Int
  var __flatten_54: Int
  var __flatten_59: Int
  Ref__incr_begin(h, diz, p_empty())
  __flatten_54 := diz.Ref__x + 1
  __flatten_23 := __flatten_54
  diz.Ref__x := __flatten_23
  Ref__incr_commit(h, diz, p_empty())
  Ref__incr_begin(h, diz, p_single(1))
  __flatten_59 := diz.Ref__x + 1
  __flatten_28 := __flatten_59
  diz.Ref__x := __flatten_28
  Ref__incr_commit(h, diz, p_single(1))
}

method Ref__main_og(diz: Ref)
  requires diz != null
  requires acc(diz.Ref__x, write)
  requires diz.Ref__x == 0
  ensures acc(diz.Ref__x, write)
  ensures diz.Ref__x == 1
{
  var if_any_bool: Bool
  var hh: Ref
  assert diz.Ref__x == 0
  inhale (hh != null) && acc(Ref__hist_idle(hh, diz, p_empty()), write)
  Ref__do_incr(diz, hh)
  exhale (hh != null) && acc(Ref__hist_idle(hh, diz, p_single(1)), write)
  inhale diz.Ref__x == 1
}

method Ref__Ref() returns (sys__result: Ref)
  ensures sys__result != null
  ensures acc(sys__result.Ref__x, write) && (sys__result.Ref__x == 0)
{
  var diz: Ref
  var __flatten_63: Ref
  __flatten_63 := new(Ref__x, Ref__x_old, Ref__Integer_value)
  diz := __flatten_63
  diz.Ref__x := 0
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.Ref__x, write) && (sys__result.Ref__x == 0))
  inhale false
}

method Ref__empty_begin(diz: Ref, ref: Ref, p: Process)
  requires diz != null
  requires acc(Ref__hist_idle(diz, ref, p), write)
  requires acc(ref.Ref__x, write)
  ensures acc(Ref__hist_empty(diz, ref, p), write)
  ensures acc(ref.Ref__x, write)
  ensures ref.Ref__x == old(ref.Ref__x)
  ensures acc(diz.Ref__x_old, 1 / 2)
  ensures ref.Ref__x == diz.Ref__x_old
{
  inhale false
}

method Ref__empty_commit(diz: Ref, ref: Ref, p: Process)
  requires diz != null
  requires acc(Ref__hist_empty(diz, ref, p), write)
  requires acc(ref.Ref__x, write)
  requires acc(diz.Ref__x_old, 1 / 2)
  requires ref.Ref__x == diz.Ref__x_old
  ensures acc(Ref__hist_idle(diz, ref, p_seq(p, p_empty())), write)
  ensures acc(ref.Ref__x, write)
  ensures ref.Ref__x == old(ref.Ref__x)
{
  inhale false
}

method Ref__incr_begin(diz: Ref, ref: Ref, p: Process)
  requires diz != null
  requires acc(Ref__hist_idle(diz, ref, p), write)
  requires acc(ref.Ref__x, write)
  ensures acc(Ref__hist_incr(diz, ref, p), write)
  ensures acc(ref.Ref__x, write)
  ensures ref.Ref__x == old(ref.Ref__x)
  ensures acc(diz.Ref__x_old, 1 / 2)
  ensures ref.Ref__x == diz.Ref__x_old
{
  inhale false
}

method Ref__incr_commit(diz: Ref, ref: Ref, p: Process)
  requires diz != null
  requires acc(Ref__hist_incr(diz, ref, p), write)
  requires acc(ref.Ref__x, write)
  requires acc(diz.Ref__x_old, 1 / 2)
  requires ref.Ref__x == diz.Ref__x_old + 1
  ensures acc(Ref__hist_idle(diz, ref, p_seq(p, p_incr())), write)
  ensures acc(ref.Ref__x, write)
  ensures ref.Ref__x == old(ref.Ref__x)
{
  inhale false
}

method Ref__if_any_random(diz: Ref) returns (sys__result: Bool)
  requires diz != null
{
  inhale false
}