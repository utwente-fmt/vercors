field Counter__x: Int

method Loop__incr(diz: Ref, current_thread_id: Int, c: Ref, y: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires c != null
  requires acc(c.Counter__x, write)
  requires y >= 0
  ensures c != null
  ensures acc(c.Counter__x, write)
  ensures c.Counter__x == old(c.Counter__x) + y
{
  var i: Int
  var __flatten_1: Int
  var __flatten_4: Int
  i := 0
  while (i < y)
    invariant (0 <= i) && (i <= y)
    invariant c != null
    invariant acc(c.Counter__x, write)
    invariant c.Counter__x == old(c.Counter__x) + i 
  {
    __flatten_1 := c.Counter__x + 1
    __flatten_4 := __flatten_1
    c.Counter__x := __flatten_4
    i := i + 1
  }
}

method Loop__Loop(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
{
  var diz: Ref
  diz := new()
  sys__result := diz
  assert sys__result != null
  inhale false
}

method Counter__incr(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Counter__x, write)
  ensures acc(diz.Counter__x, write)
  ensures diz.Counter__x == old(diz.Counter__x) + 1
{
  var __flatten_2: Int
  var __flatten_5: Int
  __flatten_2 := diz.Counter__x + 1
  __flatten_5 := __flatten_2
  diz.Counter__x := __flatten_5
}

method Counter__Counter(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Counter__x, write) && (sys__result.Counter__x == 0)
{
  var diz: Ref
  var __flatten_3: Int
  var __flatten_6: Int
  diz := new(Counter__x)
  __flatten_3 := 0
  __flatten_6 := __flatten_3
  diz.Counter__x := __flatten_6
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.Counter__x, write) && (sys__result.Counter__x == 0))
  inhale false
}