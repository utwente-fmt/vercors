domain TYPE {
  
  function class_Object(): TYPE
  
  function class_History(): TYPE
  
  function class_SubjectLock(): TYPE
  
  function class_Thread(): TYPE
  
  function class_Worker(): TYPE
  
  function class_Main(): TYPE
  
  function instanceof(t1: TYPE, t2: TYPE): Bool
  
  function type_of(val: Ref): TYPE
  
  axiom object_top {
    (forall t: TYPE :: instanceof(class_Object(), t))
  }
}

domain Process {
  
  function p_empty(): Process
  
  function p_merge(p1: Process, p2: Process): Process
  
  function p_seq(p1: Process, p2: Process): Process
  
  function p_incr(): Process
  
  function p_single(n: Int): Process
  
  function p_dual(n: Int, m: Int): Process
  
  axiom empty_1L {
    (forall p: Process :: p_merge(p_empty(), p) == p)
  }
  
  axiom empty_2L {
    (forall p: Process :: p_seq(p_empty(), p) == p)
  }
  
  axiom empty_2R {
    (forall p: Process :: p_seq(p, p_empty()) == p)
  }
  
  axiom seq_assoc {
    (forall p1: Process :: (forall p2: Process :: (forall p3: Process :: p_seq(p_seq(p1, p2), p3) == p_seq(p1, p_seq(p2, p3)))))
  }
  
  axiom single_def {
    (forall n: Int :: { p_single(n) } (n > 0 ? p_seq(p_incr(), p_single(n - 1)) : p_empty()) == p_single(n))
  }
  
  axiom dual_def {
    (forall n: Int, m: Int :: { p_dual(n, m) } p_merge(p_single(n), p_single(m)) == p_dual(n, m))
  }
  
  axiom lemma_post {
    (forall n: Int :: p_single(n) == (n > 0 ? p_seq(p_single(n - 1), p_incr()) : p_empty()))
  }
  
  axiom single_axiom_post {
    (forall m: Int, n: Int :: p_seq(p_single(m), p_single(n)) == p_single(m + n))
  }
}

field History__x_hist_value: Int

field History__x_hist_mode: Int

field History__x_hist_init: Int

field History__x_hist_act: Int

field SubjectLock__subject: Ref

field Worker__l: Ref

field Worker__s: Ref

function History__free_get_x(diz: Ref): Int
  requires diz != null
  requires acc(diz.History__x_hist_value, wildcard)
{
  diz.History__x_hist_value
}

function History__hist_get_x(diz: Ref): Int
  requires diz != null
  requires acc(diz.History__x_hist_value, wildcard)
{
  diz.History__x_hist_value
}

predicate History__inv(diz: Ref) {
  acc(diz.History__x_hist_value, write) && (acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 1))
}

predicate History__hist_do_incr(diz: Ref, frac: Perm, proc: Process) 

predicate History__hist_idle(diz: Ref, frac: Perm, proc: Process) 

predicate SubjectLock__inv(diz: Ref) {
  acc(diz.SubjectLock__subject, wildcard) && acc(History__inv(diz.SubjectLock__subject), write)
}

predicate SubjectLock__valid(diz: Ref) 

predicate SubjectLock__locked(diz: Ref, p: Perm, count: Int) 

predicate Thread__is_a_Thread(diz: Ref) 

predicate Thread__instance_of_Thread(diz: Ref) 

predicate Thread__joinToken(diz: Ref, p: Perm) 

predicate Thread__preFork(diz: Ref, p: Perm) 

predicate Thread__postJoin(diz: Ref, p: Perm) 

predicate Thread__joinToken_at_Thread(diz: Ref, p: Perm) 

predicate Thread__preFork_at_Thread(diz: Ref, p: Perm) {
  true
}

predicate Thread__postJoin_at_Thread(diz: Ref, p: Perm) {
  true
}

predicate Worker__is_a_Worker(diz: Ref) 

predicate Worker__instance_of_Worker(diz: Ref) 

predicate Worker__is_a_Thread(diz: Ref) 

predicate Worker__instance_of_Thread(diz: Ref) 

predicate Worker__joinToken(diz: Ref, p: Perm) 

predicate Worker__joinToken_at_Worker(diz: Ref, p: Perm) {
  acc(Worker__joinToken_at_Thread(diz, p), write)
}

predicate Worker__preFork(diz: Ref, p: Perm) 

predicate Worker__postJoin(diz: Ref, p: Perm) 

predicate Worker__joinToken_at_Thread(diz: Ref, p: Perm) 

predicate Worker__preFork_at_Thread(diz: Ref, p: Perm) {
  true
}

predicate Worker__postJoin_at_Thread(diz: Ref, p: Perm) {
  true
}

predicate Worker__preFork_at_Worker(diz: Ref, p: Perm) {
  acc(Worker__preFork_at_Thread(diz, p), write) && ((p == write) && acc(diz.Worker__l, wildcard) && acc(diz.Worker__l.SubjectLock__subject, wildcard) && acc(diz.Worker__s, wildcard) && (diz.Worker__l.SubjectLock__subject == diz.Worker__s) && acc(SubjectLock__valid(diz.Worker__l), 1 / 2) && acc(History__hist_idle(diz.Worker__s, 1 / 2, p_empty()), write))
}

predicate Worker__postJoin_at_Worker(diz: Ref, p: Perm) {
  acc(Worker__postJoin_at_Thread(diz, p), write) && ((p == write) && acc(diz.Worker__l, wildcard) && acc(diz.Worker__l.SubjectLock__subject, wildcard) && acc(diz.Worker__s, wildcard) && (diz.Worker__l.SubjectLock__subject == diz.Worker__s) && acc(SubjectLock__valid(diz.Worker__l), 1 / 2) && acc(History__hist_idle(diz.Worker__s, 1 / 2, p_single(1)), write))
}

method History__incr_begin(diz: Ref, current_thread_id: Int, frac: Perm, proc: Process) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires frac != none
  requires acc(History__hist_idle(diz, frac, proc), write)
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 1)
  ensures frac != none
  ensures acc(History__hist_do_incr(diz, frac, proc), write)
  ensures acc(diz.History__x_hist_value, write)
  ensures acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 2)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_value)
  ensures acc(diz.History__x_hist_act, write)
  ensures diz.History__x_hist_value == diz.History__x_hist_act
{
  inhale false
}

method History__incr_commit(diz: Ref, current_thread_id: Int, frac: Perm, proc: Process) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires frac != none
  requires acc(History__hist_do_incr(diz, frac, proc), write)
  requires acc(diz.History__x_hist_act, write)
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 2)
  requires diz.History__x_hist_value == diz.History__x_hist_act + 1
  ensures frac != none
  ensures acc(History__hist_idle(diz, frac, p_seq(proc, p_incr())), write)
  ensures acc(diz.History__x_hist_value, write)
  ensures acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 1)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_value)
{
  inhale false
}

method History__free_set_x(diz: Ref, current_thread_id: Int, value: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, 1 / 2) && (diz.History__x_hist_mode == 0)
  ensures acc(diz.History__x_hist_value, write) && (diz.History__x_hist_value == value)
  ensures acc(diz.History__x_hist_mode, 1 / 2) && (diz.History__x_hist_mode == 0)
{
  inhale false
}

method History__hist_set_x(diz: Ref, current_thread_id: Int, value: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, 1 / 2) && (diz.History__x_hist_mode == 2)
  ensures acc(diz.History__x_hist_value, write) && (diz.History__x_hist_value == value)
  ensures acc(diz.History__x_hist_mode, 1 / 2) && (diz.History__x_hist_mode == 2)
{
  inhale false
}

method History__begin_hist(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 0)
  requires acc(diz.History__x_hist_init, write)
  requires acc(diz.History__x_hist_act, write)
  ensures acc(diz.History__x_hist_value, write)
  ensures acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 1)
  ensures acc(diz.History__x_hist_init, write)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_value)
  ensures diz.History__x_hist_init == old(diz.History__x_hist_value)
  ensures acc(History__hist_idle(diz, write, p_empty()), write)
{
  inhale false
}

method History__split(diz: Ref, current_thread_id: Int, frac1: Perm, proc1: Process, frac2: Perm, proc2: Process) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(History__hist_idle(diz, frac1 + frac2, p_merge(proc1, proc2)), write)
  ensures acc(History__hist_idle(diz, frac1, proc1), write)
  ensures acc(History__hist_idle(diz, frac2, proc2), write)
{
  inhale false
}

method History__merge(diz: Ref, current_thread_id: Int, frac1: Perm, proc1: Process, frac2: Perm, proc2: Process) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(History__hist_idle(diz, frac1, proc1), write)
  requires acc(History__hist_idle(diz, frac2, proc2), write)
  ensures acc(History__hist_idle(diz, frac1 + frac2, p_merge(proc1, proc2)), write)
{
  inhale false
}

method History__History(current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.History__x_hist_value, write) && (sys__result.History__x_hist_value == 0)
  ensures acc(sys__result.History__x_hist_mode, write) && (sys__result.History__x_hist_mode == 0)
  ensures acc(sys__result.History__x_hist_init, write) && (sys__result.History__x_hist_init == 0)
  ensures acc(sys__result.History__x_hist_act, write) && (sys__result.History__x_hist_act == 0)
{
  var diz: Ref
  var __flatten_33: Int
  var __flatten_34: Int
  var __flatten_35: Int
  var __flatten_36: Int
  var __flatten_101: Int
  var __flatten_102: Int
  var __flatten_103: Int
  var __flatten_104: Int
  diz := new(History__x_hist_value, History__x_hist_mode, History__x_hist_init, History__x_hist_act)
  __flatten_33 := 0
  __flatten_101 := __flatten_33
  diz.History__x_hist_value := __flatten_101
  __flatten_34 := 0
  __flatten_102 := __flatten_34
  diz.History__x_hist_mode := __flatten_102
  __flatten_35 := 0
  __flatten_103 := __flatten_35
  diz.History__x_hist_init := __flatten_103
  __flatten_36 := 0
  __flatten_104 := __flatten_36
  diz.History__x_hist_act := __flatten_104
  sys__result := diz
  assert (sys__result != null) && (acc(sys__result.History__x_hist_value, write) && (sys__result.History__x_hist_value == 0)) && (acc(sys__result.History__x_hist_mode, write) && (sys__result.History__x_hist_mode == 0)) && (acc(sys__result.History__x_hist_init, write) && (sys__result.History__x_hist_init == 0)) && (acc(sys__result.History__x_hist_act, write) && (sys__result.History__x_hist_act == 0))
  inhale false
}

method History__end_hist_1(diz: Ref, current_thread_id: Int, n: Int, m: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.History__x_hist_value, write)
  requires acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 1)
  requires acc(diz.History__x_hist_init, write)
  ensures acc(diz.History__x_hist_value, write)
  ensures acc(diz.History__x_hist_mode, write) && (diz.History__x_hist_mode == 0)
  ensures acc(diz.History__x_hist_init, write)
  ensures acc(diz.History__x_hist_act, write)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_value)
  ensures diz.History__x_hist_init == old(diz.History__x_hist_value)
  ensures diz.History__x_hist_value == old(diz.History__x_hist_init) + n + m
{
  inhale false
}

method History__if_any_random(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Bool)
  requires diz != null
  requires current_thread_id >= 0
{
  inhale false
}

method SubjectLock__SubjectLock(current_thread_id: Int, s: Ref) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_SubjectLock()
  ensures acc(sys__result.SubjectLock__subject, wildcard)
  ensures sys__result.SubjectLock__subject == s
{
  var diz: Ref
  var __flatten_37: Ref
  var __flatten_105: Ref
  diz := new(SubjectLock__subject)
  inhale type_of(diz) == class_SubjectLock()
  __flatten_37 := s
  __flatten_105 := __flatten_37
  diz.SubjectLock__subject := __flatten_105
  sys__result := diz
  assert (sys__result != null) && (type_of(sys__result) == class_SubjectLock()) && acc(sys__result.SubjectLock__subject, wildcard) && (sys__result.SubjectLock__subject == s)
  inhale false
}

method SubjectLock__commit(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(SubjectLock__inv(diz), write)
  ensures acc(SubjectLock__valid(diz), write)
{
  inhale false
}

method SubjectLock__uncommit(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(SubjectLock__valid(diz), write)
  ensures acc(SubjectLock__inv(diz), write)
{
  inhale false
}

method SubjectLock__lock(diz: Ref, current_thread_id: Int, count: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires count >= 0
  requires (count > 0 ? acc(SubjectLock__locked(diz, p, count), write) : acc(SubjectLock__valid(diz), p))
  ensures acc(SubjectLock__locked(diz, p, count + 1), write)
  ensures (count == 0) ==> acc(SubjectLock__inv(diz), write)
{
  inhale false
}

method SubjectLock__unlock(diz: Ref, current_thread_id: Int, count: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires count > 0
  requires acc(SubjectLock__locked(diz, p, count), write)
  requires (count == 1) ==> acc(SubjectLock__inv(diz), write)
  ensures (count == 1 ? acc(SubjectLock__valid(diz), p) : acc(SubjectLock__locked(diz, p, count - 1), write))
{
  inhale false
}

method SubjectLock__if_any_random(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Bool)
  requires diz != null
  requires current_thread_id >= 0
{
  inhale false
}

method Thread__run(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__preFork(diz, write), write)
  ensures acc(Thread__postJoin(diz, write), write)
{
  inhale false
}

method Thread__start(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__preFork(diz, write), write)
  ensures acc(Thread__joinToken(diz, write), write)
{
  inhale false
}

method Thread__join(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__joinToken(diz, p), write)
  ensures acc(Thread__postJoin(diz, p), write)
{
  inhale false
}

method Thread__open_joinToken_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__joinToken(diz, p), write)
  requires acc(Thread__is_a_Thread(diz), write)
  ensures acc(Thread__joinToken_at_Thread(diz, p), write)
{
  inhale false
}

method Thread__open_preFork_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__preFork(diz, p), write)
  requires acc(Thread__is_a_Thread(diz), write)
  ensures acc(Thread__preFork_at_Thread(diz, p), write)
{
  inhale false
}

method Thread__open_postJoin_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__postJoin(diz, p), write)
  requires acc(Thread__is_a_Thread(diz), write)
  ensures acc(Thread__postJoin_at_Thread(diz, p), write)
{
  inhale false
}

method Thread__Thread(current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_Thread()
  ensures acc(Thread__is_a_Thread(sys__result), write)
{
  inhale false
}

method Thread__Thread_at_Thread(current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_Thread()
{
  var diz: Ref
  diz := new()
  inhale type_of(diz) == class_Thread()
  inhale false
  sys__result := diz
  assert (sys__result != null) && (type_of(sys__result) == class_Thread())
  inhale false
}

method Thread__run_at_Thread(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__preFork_at_Thread(diz, write), write)
  ensures acc(Thread__postJoin_at_Thread(diz, write), write)
{
  inhale false
}

method Thread__start_at_Thread(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__preFork(diz, write), write)
  ensures acc(Thread__joinToken(diz, write), write)
{
  inhale false
}

method Thread__join_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Thread__joinToken(diz, p), write)
  ensures acc(Thread__postJoin(diz, p), write)
{
  inhale false
}

method Thread__if_any_random(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Bool)
  requires diz != null
  requires current_thread_id >= 0
{
  inhale false
}

method Worker__run(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork(diz, write), write)
  ensures acc(Worker__postJoin(diz, write), write)
{
  inhale false
}

method Worker__start(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork(diz, write), write)
  ensures acc(Worker__joinToken(diz, write), write)
{
  inhale false
}

method Worker__join(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__joinToken(diz, p), write)
  ensures acc(Worker__postJoin(diz, p), write)
{
  inhale false
}

method Worker__open_joinToken_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__joinToken(diz, p), write)
  requires acc(Worker__is_a_Thread(diz), write)
  ensures acc(Worker__joinToken_at_Thread(diz, p), write)
{
  inhale false
}

method Worker__open_preFork_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork(diz, p), write)
  requires acc(Worker__is_a_Thread(diz), write)
  ensures acc(Worker__preFork_at_Thread(diz, p), write)
{
  inhale false
}

method Worker__open_postJoin_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__postJoin(diz, p), write)
  requires acc(Worker__is_a_Thread(diz), write)
  ensures acc(Worker__postJoin_at_Thread(diz, p), write)
{
  inhale false
}

method Worker__Thread(current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_Thread()
  ensures acc(Worker__is_a_Thread(sys__result), write)
{
  inhale false
}

method Worker__Thread_at_Thread(current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_Thread()
{
  inhale false
}

method Worker__run_at_Thread(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork_at_Thread(diz, write), write)
  ensures acc(Worker__postJoin_at_Thread(diz, write), write)
{
  inhale false
}

method Worker__start_at_Thread(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork(diz, write), write)
  ensures acc(Worker__joinToken(diz, write), write)
{
  inhale false
}

method Worker__join_at_Thread(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__joinToken(diz, p), write)
  ensures acc(Worker__postJoin(diz, p), write)
{
  inhale false
}

method Worker__open_preFork_at_Worker(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork(diz, p), write)
  requires acc(Worker__is_a_Worker(diz), write)
  ensures acc(Worker__preFork_at_Worker(diz, p), write)
{
  inhale false
}

method Worker__open_postJoin_at_Worker(diz: Ref, current_thread_id: Int, p: Perm) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__postJoin(diz, p), write)
  requires acc(Worker__is_a_Worker(diz), write)
  ensures acc(Worker__postJoin_at_Worker(diz, p), write)
{
  inhale false
}

method Worker__Worker(current_thread_id: Int, s: Ref, l: Ref) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  requires acc(l.SubjectLock__subject, wildcard)
  requires l.SubjectLock__subject == s
  requires acc(SubjectLock__valid(l), 1 / 2)
  requires acc(History__hist_idle(s, 1 / 2, p_empty()), write)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Worker()
  ensures acc(sys__result.Worker__l, wildcard)
  ensures sys__result.Worker__l == l
  ensures acc(sys__result.Worker__s, wildcard)
  ensures sys__result.Worker__s == s
  ensures acc(Worker__preFork(sys__result, write), write)
  ensures acc(Worker__is_a_Worker(sys__result), write)
{
  inhale false
}

method Worker__Worker_at_Worker(current_thread_id: Int, s: Ref, l: Ref) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  requires acc(l.SubjectLock__subject, wildcard)
  requires l.SubjectLock__subject == s
  requires acc(SubjectLock__valid(l), 1 / 2)
  requires acc(History__hist_idle(s, 1 / 2, p_empty()), write)
  ensures sys__result != null
  ensures type_of(sys__result) == class_Worker()
  ensures acc(sys__result.Worker__l, wildcard)
  ensures sys__result.Worker__l == l
  ensures acc(sys__result.Worker__s, wildcard)
  ensures sys__result.Worker__s == s
  ensures acc(Worker__preFork_at_Worker(sys__result, write), write)
{
  var diz: Ref
  var __flatten_38: Ref
  var __flatten_39: Ref
  var __flatten_106: Ref
  var __flatten_107: Ref
  diz := new(Worker__l, Worker__s)
  inhale type_of(diz) == class_Worker()
  __flatten_38 := l
  __flatten_106 := __flatten_38
  diz.Worker__l := __flatten_106
  __flatten_39 := s
  __flatten_107 := __flatten_39
  diz.Worker__s := __flatten_107
  fold acc(Worker__preFork_at_Thread(diz, write), write)
  fold acc(Worker__preFork_at_Worker(diz, write), write)
  sys__result := diz
  assert (sys__result != null) && (type_of(sys__result) == class_Worker()) && acc(sys__result.Worker__l, wildcard) && (sys__result.Worker__l == l) && acc(sys__result.Worker__s, wildcard) && (sys__result.Worker__s == s) && acc(Worker__preFork_at_Worker(sys__result, write), write)
  inhale false
}

method Worker__run_at_Worker(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Worker__preFork_at_Worker(diz, write), write)
  ensures acc(Worker__postJoin_at_Worker(diz, write), write)
{
  var if_any_bool: Bool
  var __flatten_43: Ref
  unfold acc(Worker__preFork_at_Worker(diz, write), write)
  sys__thrown := SubjectLock__lock(diz.Worker__l, current_thread_id, 0, 1 / 2)
  unfold acc(SubjectLock__inv(diz.Worker__l), write)
  unfold acc(History__inv(diz.Worker__l.SubjectLock__subject), write)
  assert acc(History__hist_idle(diz.Worker__s, 1 / 2, p_empty()), write)
  sys__thrown := History__incr_begin(diz.Worker__s, current_thread_id, 1 / 2, p_empty())
  __flatten_43 := diz.Worker__s
  sys__thrown := History__hist_set_x(diz.Worker__s, current_thread_id, __flatten_43.History__x_hist_value + 1)
  sys__thrown := History__incr_commit(diz.Worker__s, current_thread_id, 1 / 2, p_empty())
  assert acc(History__hist_idle(diz.Worker__s, 1 / 2, p_single(1)), write)
  fold acc(History__inv(diz.Worker__l.SubjectLock__subject), write)
  fold acc(SubjectLock__inv(diz.Worker__l), write)
  sys__thrown := SubjectLock__unlock(diz.Worker__l, current_thread_id, 1, 1 / 2)
  assert acc(History__hist_idle(diz.Worker__s, 1 / 2, p_single(1)), write)
  fold acc(Worker__postJoin_at_Thread(diz, write), write)
  fold acc(Worker__postJoin_at_Worker(diz, write), write)
}

method Worker__if_any_random(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Bool)
  requires diz != null
  requires current_thread_id >= 0
{
  inhale false
}

method Main__main(current_thread_id: Int) returns (sys__thrown: Ref)
  requires current_thread_id >= 0
{
  var if_any_bool: Bool
  var s: Ref
  var __flatten_48: Ref
  var lock: Ref
  var __flatten_54: Ref
  var w1: Ref
  var __flatten_56: Ref
  var w2: Ref
  var __flatten_57: Ref
  sys__thrown, __flatten_48 := History__History(current_thread_id)
  s := __flatten_48
  sys__thrown := History__free_set_x(s, current_thread_id, 37)
  sys__thrown := History__begin_hist(s, current_thread_id)
  sys__thrown := History__split(s, current_thread_id, 1 / 2, p_empty(), 1 / 2, p_empty())
  fold acc(History__inv(s), write)
  sys__thrown, __flatten_54 := SubjectLock__SubjectLock(current_thread_id, s)
  lock := __flatten_54
  fold acc(SubjectLock__inv(lock), write)
  sys__thrown := SubjectLock__commit(lock, current_thread_id)
  sys__thrown, __flatten_56 := Worker__Worker(current_thread_id, s, lock)
  w1 := __flatten_56
  sys__thrown, __flatten_57 := Worker__Worker(current_thread_id, s, lock)
  w2 := __flatten_57
  sys__thrown := Worker__start(w1, current_thread_id)
  sys__thrown := Worker__start(w2, current_thread_id)
  sys__thrown := Worker__join(w1, current_thread_id, write)
  sys__thrown := Worker__join(w2, current_thread_id, write)
  sys__thrown := Worker__open_postJoin_at_Worker(w1, current_thread_id, write)
  sys__thrown := Worker__open_postJoin_at_Worker(w2, current_thread_id, write)
  unfold acc(Worker__postJoin_at_Worker(w1, write), write)
  unfold acc(Worker__postJoin_at_Worker(w2, write), write)
  sys__thrown := SubjectLock__uncommit(lock, current_thread_id)
  unfold acc(SubjectLock__inv(lock), write)
  unfold acc(History__inv(s), write)
  sys__thrown := History__merge(s, current_thread_id, 1 / 2, p_single(1), 1 / 2, p_single(1))
  sys__thrown := History__end_hist_1(s, current_thread_id, 1, 1)
  assert s.History__x_hist_value == 39
}

method Main__Main(current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures type_of(sys__result) == class_Main()
{
  var diz: Ref
  diz := new()
  inhale type_of(diz) == class_Main()
  sys__result := diz
  assert (sys__result != null) && (type_of(sys__result) == class_Main())
  inhale false
}

method Main__if_any_random(diz: Ref, current_thread_id: Int) returns (sys__thrown: Ref, sys__result: Bool)
  requires diz != null
  requires current_thread_id >= 0
{
  inhale false
}
