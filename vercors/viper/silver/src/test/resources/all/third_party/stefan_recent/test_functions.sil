field counter__x: Int

function counter__get(diz: Ref): Int
  requires diz != null
  requires acc(counter__state(diz), write)
{
  (unfolding acc(counter__state(diz), write) in diz.counter__x)
}

predicate counter__state(diz: Ref) {
  acc(diz.counter__x, write)
}

method counter__counter(current_thread_id: Int, v: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(counter__state(sys__result), write)
  ensures counter__get(sys__result) == v
{
  var diz: Ref
  var __flatten_1: Int
  var __flatten_3: Int
  diz := new(counter__x)
  __flatten_1 := v
  __flatten_3 := __flatten_1
  diz.counter__x := __flatten_3
  fold acc(counter__state(diz), write)
  sys__result := diz
  assert (sys__result != null) && acc(counter__state(sys__result), write) && (counter__get(sys__result) == v)
  inhale false
}

method counter__incr(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(counter__state(diz), write)
  ensures acc(counter__state(diz), write)
  ensures counter__get(diz) == old(counter__get(diz)) + 1
{
  var __flatten_2: Int
  var __flatten_4: Int
  unfold acc(counter__state(diz), write)
  __flatten_2 := diz.counter__x + 1
  __flatten_4 := __flatten_2
  diz.counter__x := __flatten_4
  fold acc(counter__state(diz), write)
}