field node__val: Int

field node__next: Ref

function node__contents(diz: Ref): Seq[Int]
  requires diz != null
  requires acc(node__state(diz), write)
{
  (unfolding acc(node__state(diz), write) in (diz.node__next == null ? Seq(diz.node__val) : Seq(diz.node__val) ++ node__contents(diz.node__next)))
}

predicate node__state(diz: Ref) {
  acc(diz.node__val, write) && acc(diz.node__next, write) && ((diz.node__next != null) ==> acc(node__state(diz.node__next), write))
}

method node__node(current_thread_id: Int, v: Int, n: Ref) returns (sys__result: Ref)
  requires current_thread_id >= 0
  requires (n != null) ==> acc(node__state(n), write)
  ensures sys__result != null
  ensures acc(node__state(sys__result), write)
  ensures node__contents(sys__result) == (n == null ? Seq(v) : Seq(v) ++ old(node__contents(n)))
{
  var diz: Ref
  var __flatten_1: Int
  var __flatten_2: Ref
  var __flatten_4: Int
  var __flatten_5: Ref
  diz := new(node__val, node__next)
  __flatten_1 := v
  __flatten_4 := __flatten_1
  diz.node__val := __flatten_4
  __flatten_2 := n
  __flatten_5 := __flatten_2
  diz.node__next := __flatten_5
  fold acc(node__state(diz), write)
  sys__result := diz
  assert (sys__result != null) && acc(node__state(sys__result), write) && (node__contents(sys__result) == (n == null ? Seq(v) : Seq(v) ++ old(node__contents(n))))
  inhale false
}

method node__main(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
{
  var tmp: Seq[Int]
  var l: Ref
  var __flatten_3: Ref
  tmp := Seq(1, 2, 3)
  assert tmp == Seq(1) ++ Seq(2, 3)
  assert tmp[0] == 1
  assert tmp[1..] == Seq(2, 3)
  __flatten_3 := node__node(current_thread_id, 37, null)
  l := __flatten_3
  assert node__contents(l) == Seq(37)
  assert (37 in node__contents(l))
}