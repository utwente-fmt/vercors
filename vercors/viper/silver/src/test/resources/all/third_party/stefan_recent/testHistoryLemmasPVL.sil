domain Process {
  
  function p_empty(): Process
  
  function p_merge(p1: Process, p2: Process): Process
  
  function p_seq(p1: Process, p2: Process): Process
  
  function p_incr(): Process
  
  function p_single(n: Int): Process
  
  function p_dual(n: Int, m: Int): Process
  
  axiom empty_1L {
    (forall p: Process :: p_merge(p_empty(), p) == p)
  }
  
  axiom empty_2L {
    (forall p: Process :: p_seq(p_empty(), p) == p)
  }
  
  axiom empty_2R {
    (forall p: Process :: p_seq(p, p_empty()) == p)
  }
  
  axiom seq_assoc {
    (forall p1: Process :: (forall p2: Process :: (forall p3: Process :: p_seq(p_seq(p1, p2), p3) == p_seq(p1, p_seq(p2, p3)))))
  }
  
  axiom single_def {
    (forall n: Int :: { p_single(n) } (n > 0 ? p_seq(p_incr(), p_single(n - 1)) : p_empty()) == p_single(n))
  }
  
  axiom dual_def {
    (forall n: Int, m: Int :: { p_dual(n, m) } p_merge(p_single(n), p_single(m)) == p_dual(n, m))
  }
}

method History__lemma(diz: Ref, current_thread_id: Int, n: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires n >= 0
  ensures p_single(n) == (n > 0 ? p_seq(p_single(n - 1), p_incr()) : p_empty())
{
  var if_any_bool: Bool
  if (n >= 2) {
    History__lemma(diz, current_thread_id, n - 2)
  }
}

method History__single_axiom(diz: Ref, current_thread_id: Int, m: Int, n: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires (m >= 0) && (n >= 0)
  ensures p_seq(p_single(m), p_single(n)) == p_single(m + n)
{
  inhale false
}

method History__if_any_random(diz: Ref, current_thread_id: Int) returns (sys__result: Bool)
  requires diz != null
  requires current_thread_id >= 0
{
  inhale false
}