field Fib__input: Int

field Fib__output: Int

function Fib__fib(n: Int): Int
{
  (n < 2 ? 1 : Fib__fib(n - 1) + Fib__fib(n - 2))
}

predicate Fib__joinToken(diz: Ref) 

method Fib__forkOperator(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Fib__input, 1 / 10)
  requires acc(diz.Fib__output, write)
  ensures acc(Fib__joinToken(diz), write)
{
  inhale false
}

method Fib__joinOperator(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(Fib__joinToken(diz), write)
  ensures acc(diz.Fib__input, 1 / 10)
  ensures acc(diz.Fib__output, write)
  ensures diz.Fib__output == Fib__fib(diz.Fib__input)
{
  inhale false
}

method Fib__run(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.Fib__input, 1 / 10)
  requires acc(diz.Fib__output, write)
  ensures acc(diz.Fib__input, 1 / 10)
  ensures acc(diz.Fib__output, write)
  ensures diz.Fib__output == Fib__fib(diz.Fib__input)
{
  var f2: Ref
  var f1: Ref
  var __flatten_1: Int
  var __flatten_2: Ref
  var __flatten_3: Ref
  var __flatten_8: Int
  var __flatten_10: Int
  var __flatten_17: Int
  if (diz.Fib__input < 2) {
    __flatten_1 := 1
    __flatten_10 := __flatten_1
    diz.Fib__output := __flatten_10
  } else {
    __flatten_2 := Fib__Fib(current_thread_id, diz.Fib__input - 1)
    f1 := __flatten_2
    __flatten_3 := Fib__Fib(current_thread_id, diz.Fib__input - 2)
    f2 := __flatten_3
    Fib__forkOperator(f1, current_thread_id)
    Fib__forkOperator(f2, current_thread_id)
    Fib__joinOperator(f1, current_thread_id)
    Fib__joinOperator(f2, current_thread_id)
    __flatten_8 := f1.Fib__output + f2.Fib__output
    __flatten_17 := __flatten_8
    diz.Fib__output := __flatten_17
  }
}

method Fib__Fib(current_thread_id: Int, n: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
  ensures acc(sys__result.Fib__input, write)
  ensures acc(sys__result.Fib__output, write)
  ensures sys__result.Fib__input == n
{
  var diz: Ref
  var __flatten_9: Int
  var __flatten_18: Int
  diz := new(Fib__input, Fib__output)
  __flatten_9 := n
  __flatten_18 := __flatten_9
  diz.Fib__input := __flatten_18
  sys__result := diz
  assert (sys__result != null) && acc(sys__result.Fib__input, write) && acc(sys__result.Fib__output, write) && (sys__result.Fib__input == n)
  inhale false
}