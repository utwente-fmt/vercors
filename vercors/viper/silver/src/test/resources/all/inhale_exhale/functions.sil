//:: IgnoreFile(/Silicon/issue/163/)

field x: Int

function inhaleTrue1(this: Ref): Int
  requires [true, acc(this.x) && this.x == 1]
{
  0
}

function inhaleTrue2(this: Ref): Int
  requires [true, acc(this.x)] && [true, this.x == 1]
{
  0
}

function inhaleTrue3(this: Ref): Int
  requires [true, acc(this.x)]
  requires [true, this.x == 1]
{
  0
}

method inhaleTrue1Method1(this: Ref)
  requires this != null
{
  //:: ExpectedOutput(application.precondition:insufficient.permission)
  //:: UnexpectedOutput(assert.failed:assertion.false, /Carbon/issue/173/)
  assert inhaleTrue1(this) == 0
}

method inhaleTrue1Method2(this: Ref)
  requires acc(this.x) && this.x == 1
{
  assert inhaleTrue1(this) == 0
  assert acc(this.x) && this.x == 1
  exhale inhaleTrue1(this) == 0
  assert acc(this.x) && this.x == 1
}

function inhaleExpression1(this: Ref): Int
  requires [acc(this.x) && this.x == 1, true]
  ensures result == 1
{
  this.x
}

function inhaleExpression2(this: Ref): Int
  requires [acc(this.x), true] && [this.x == 1, true]
  ensures result == 1
{
  this.x
}

function inhaleExpression3(this: Ref): Int
  requires [acc(this.x), true]
  requires [this.x == 1, true]
  ensures result == 1
{
  this.x
}

method inhaleExpression1Method(this: Ref)
{
  assert inhaleExpression1(this) == 1
}

function exhaleTrue1(this: Ref): Int
  requires acc(this.x)
  ensures [this.x == 1, true]
{
  0
}

function exhaleTrue2(this: Ref): Int
  requires acc(this.x)
  ensures [this != null, true] && [this.x == 1, true]
{
  0
}

function exhaleTrue3(this: Ref): Int
  requires acc(this.x)
  ensures [this != null, true]
  ensures [this.x == 1, true]
{
  0
}

method exhaleTrue1Method(this: Ref)
  requires acc(this.x)
{
  assert exhaleTrue1(this) == 0
  assert this.x == 1
}

function exhaleExpression1WithRequires(this: Ref): Int
  requires acc(this.x) && this.x == 1
  ensures [true, this.x == 1]
{
  this.x
}

function exhaleExpression2WithRequires(this: Ref): Int
  requires acc(this.x) && this.x == 1
  ensures [true, this != null] && [true, this.x == 1]
{
  this.x
}

function exhaleExpression3WithRequires(this: Ref): Int
  requires acc(this.x) && this.x == 1
  ensures [true, this != null]
  ensures [true, this.x == 1]
{
  this.x
}

method exhaleExpression1WithRequiresMethod(this: Ref)
  requires acc(this.x) && this.x == 1
{
  assert exhaleExpression1WithRequires(this) == 1
}
