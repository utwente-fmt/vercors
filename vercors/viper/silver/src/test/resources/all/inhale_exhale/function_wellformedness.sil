//:: IgnoreFile(/Silicon/issue/163/)
field x: Int

/*
Sanity checks.
*/

function s0(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires this != null && this.x == 0
{
  0
}

function s0Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires this != null && this.x == 0

function s1(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/162/)
  //:: MissingOutput(postcondition.violated:assertion.false, /Silicon/issue/162/)
  ensures this != null && this.x == 0
{
  0
}

function s1Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures this != null && this.x == 0

//:: ExpectedOutput(function.not.wellformed:insufficient.permission)
function s2(this: Ref): Int
  requires this != null
{
  this.x
}

/*
Inhale.
*/

function i0(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]
{
  0
}

function i0Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]

function i1(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]
{
  0
}

function i1Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]

/*
Exhale.
*/

function e0(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [true, this != null && this.x == 0]
{
  0
}

function e0Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [true, this != null && this.x == 0]

function e1(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/162/)
  //:: MissingOutput(postcondition.violated:assertion.false, /Silicon/issue/162/)
  ensures [true, this != null && this.x == 0]
{
  0
}

function e1Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [true, this != null && this.x == 0]

/*
Both.
*/

function ie0(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, this != null && this.x == 0]
{
  0
}

function ie0Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, this != null && this.x == 0]

function ie1(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /Silicon/issue/162/)
  //:: MissingOutput(postcondition.violated:assertion.false, /Silicon/issue/162/)
  ensures [this != null && this.x == 0, this != null && this.x == 0]
{
  0
}

function ie1Abstract(this: Ref): Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, this != null && this.x == 0]

/*
More interesting combinations.
*/

/*
    Conditions to check for wellformedness:
    1.   acc(this.x) && true
    2.   true && this != null && this.x == 0 <-- should give an error
    Precondition verified with function body: acc(this.x) && true
*/
function t1(this: Ref): Int
  requires [acc(this.x), true]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [true, this != null && this.x == 0]
{
  0
}

function t1Abstract(this: Ref): Int
  requires [acc(this.x), true]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [true, this != null && this.x == 0]

/*
    Conditions to check for wellformedness:
    1.   true && this != null && this.x == 0 <-- should give an error
    2.   acc(this.x) && true
    Precondition verified with function body: true && this != null && this.x == 0
*/
function t2(this: Ref): Int
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]
{
  0
}

function t2Abstract(this: Ref): Int
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]

/*
    Conditions to check for wellformedness:
    1.  acc(this.x) && this.x == 0
    2.  true
    3.  acc(this.x) && this.x == 0 && true
    4.  acc(this.x) && this != null && this.x == 0
    Postcondition verified with function body: this != null && this.x == 0
*/
function t3(this: Ref): Int
  requires [acc(this.x) && this.x == 0, true]
  ensures [true, this != null && this.x == 0]
{
  0
}

function t3Abstract(this: Ref): Int
  requires [acc(this.x) && this.x == 0, true]
  ensures [true, this != null && this.x == 0]

/*
    Conditions to check for wellformedness:
    1.  true
    2.  acc(this.x) && this.x == 0
    3.  true && true
    4.  true && this != null && this.x == 0 <-- should give an error
    Postcondition verified with function body: this != null && this.x == 0
*/
function t4(this: Ref): Int
  requires [true, acc(this.x) && this.x == 0]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures [true, this != null && this.x == 0]
{
  0
}

function t4Abstract(this: Ref): Int
  requires [true, acc(this.x) && this.x == 0]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [true, this != null && this.x == 0]

/*
    Conditions to check for wellformedness:
    1.  true
    2.  true
    3.  true && this != null && this.x == 0 <-- should give an error
    4.  true && true
    Postcondition verified with function body: true
*/
function t5(this: Ref): Int
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]
{
  0
}

function t5Abstract(this: Ref): Int
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]

/*
    Conditions to check for wellformedness:
    1.  acc(this.x)
    2.  true
    3.  acc(this.x) && this != null && this.x == 0
    4.  acc(this.x) && true
    Postcondition verified with function body: true
*/
function t6(this: Ref): Int
  requires [acc(this.x), true]
  ensures [this != null && this.x == 0, true]
{
  0
}

function t6Abstract(this: Ref): Int
  requires [acc(this.x), true]
  ensures [this != null && this.x == 0, true]
