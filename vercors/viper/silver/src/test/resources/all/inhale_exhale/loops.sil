field x: Int

method loopTrueTrue(this: Ref)
{
  var i: Int
  i := 1
  while (i < 10)
    invariant [true, true]
  {
    i := i + 1
  }
}

method loopFalseTrue(this: Ref)
{
  var i: Int
  i := 1
  while (i < 10)
    invariant [false, true]
  {
    i := i + 1
  }
}

method loopTrueFalse(this: Ref)
{
  var i: Int
  i := 1
  while (i < 10)
    //:: ExpectedOutput(invariant.not.established:assertion.false)
    invariant [true, false]
  {
    i := i + 1
  }
}

method loopFalse(this: Ref)
{
  var i: Int
  i := 1
  while (i < 10)
    //:: ExpectedOutput(invariant.not.established:assertion.false)
    invariant false
  {
    i := i + 1
  }
}

method loopTrueExpression(this: Ref)
  requires acc(this.x)
{
  var i: Int
  i := 1
  while (i < 10)
    //:: ExpectedOutput(invariant.not.preserved:insufficient.permission)
    invariant [true, acc(this.x)]
  {
    i := i + 1
  }
}

method loopExpressionTrue(this: Ref)
  ensures acc(this.x)
{
  var i: Int
  i := 1
  while (i < 10)
    invariant [acc(this.x), true]
  {
    i := i + 1
    exhale acc(this.x)
  }
}
