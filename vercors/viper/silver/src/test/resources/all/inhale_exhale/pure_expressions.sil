method aa1()
{
  var x: Int
  x := 1

  // Should be equivalent to assert x == 1.
  assert [x == 0, x == 1]

  // Should be equivalent to assert x == 0.
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert [x == 1, x == 0]
}

method aa2()
{
  var x: Int
  x := 1

  // Should be equivalent to assume x == 0.
  assume [x == 0, x == 1]
  assert false
}

method aa3()
{
  var x: Int
  x := 1

  // Should be equivalent to assume x == 1.
  assume [x == 1, x == 0]
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method aa4()
{
  var x: Int
  x := 1

  // Should be equivalent to assert x == 1 && x == 1.
  assert [x == 0, x == 1] && [x == 0, x == 1]

  // Should be equivalent to assert x == 0 && x == 1.
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert [x == 1, x == 0] && [x == 0, x == 1]
}

method aa5()
{
  var x: Int
  x := 1

  // Should be equivalent to assert x == 1.
  assert [[x == 0, x == 0], x == 1]

  // Should be equivalent to assert x == 1.
  assert [[x == 0, x == 0], [x == 0, x == 1]]
}

method aa6()
{
  var x: Int
  x := 1

  // Should be equivalent to assert x == 1 && x == 1.
  assert [[x == 0, x == 0], [x == 0, x == 1] && x == 1]

  // Should be equivalent to assert x == 1 ==> x == 1.
  assert [[x == 0, x == 0], x == 1 ==> [x == 0, x == 1]]
}

method ie1()
{
  var x: Int
  x := 1

  // Should be equivalent to exhale x == 1.
  exhale [x == 0, x == 1]

  // Should be equivalent to exhale x == 0.
  //:: ExpectedOutput(exhale.failed:assertion.false)
  exhale [x == 1, x == 0]
}

method ie2()
{
  var x: Int
  x := 1

  // Should be equivalent to inhale x == 0.
  inhale [x == 0, x == 1]
  assert false
}

method ie3()
{
  var x: Int
  x := 1

  // Should be equivalent to inhale x == 1.
  inhale [x == 1, x == 0]
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
