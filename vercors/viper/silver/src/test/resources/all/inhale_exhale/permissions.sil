field x: Int

method t1(this: Ref)
{
  inhale [acc(this.x) && this.x == 1, true]
  assert this.x == 1
  exhale [acc(this.x) && this.x == 1, true]
  assert this.x == 1
  exhale [true, this.x == 1]
  exhale [true, acc(this.x)]
  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert this.x == 1
}

method inhaleTrue1(this: Ref)
  requires [true, acc(this.x) && this.x == 1]
{
}

method inhaleTrue2(this: Ref)
  requires [true, acc(this.x)] && [true, this.x == 1]
{
}

method inhaleTrue3(this: Ref)
  requires [true, acc(this.x)]
  requires [true, this.x == 1]
{
}

method inhaleExpression1(this: Ref)
  requires [acc(this.x) && this.x == 1, true]
{
}

method inhaleExpression2(this: Ref)
  requires [acc(this.x), true] && [this.x == 1, true]
{
}

method inhaleExpression3(this: Ref)
  requires [acc(this.x), true]
  requires [this.x == 1, true]
{
}

method exhaleTrue1(this: Ref)
  ensures [acc(this.x) && this.x == 1, true]
{
}

method exhaleTrue2(this: Ref)
  ensures [acc(this.x), true] && [this.x == 1, true]
{
}

method exhaleTrue3(this: Ref)
  ensures [acc(this.x), true]
  ensures [this.x == 1, true]
{
}

method exhaleExpression1WithRequires(this: Ref)
  requires acc(this.x) && this.x == 1
  ensures [true, acc(this.x) && this.x == 1]
{
}

method exhaleExpression2WithRequires(this: Ref)
  requires acc(this.x) && this.x == 1
  ensures [true, acc(this.x)] && [true, this.x == 1]
{
}

method exhaleExpression3WithRequires(this: Ref)
  requires acc(this.x) && this.x == 1
  ensures [true, acc(this.x)]
  ensures [true, this.x == 1]
{
}

method exhaleExpression1WithInhale(this: Ref)
  ensures [true, acc(this.x) && this.x == 1]
{
  inhale acc(this.x) && this.x == 1
}

method exhaleExpression2WithInhale(this: Ref)
  ensures [true, acc(this.x)] && [true, this.x == 1]
{
  inhale acc(this.x) && this.x == 1
}

method exhaleExpression3WithInhale(this: Ref)
  ensures [true, acc(this.x)]
  ensures [true, this.x == 1]
{
  inhale acc(this.x) && this.x == 1
}
