/*
Even though one of the InhaleExhale expression branches might never get
executed, both of them must be checked for wellformedness.

The following methods should fail to verify because contracts are not
self-framing.
*/
field x: Int

/*
Sanity check: wellformedness checks are performed when InhaleExhale
expressions are not used.
*/

method s0(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires this.x == 0
{
}

method s1(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures this.x == 0
{
  inhale acc(this.x) && this.x == 0
}

method s2(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires this != null && this.x == 0
{
}

method s3(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures this != null && this.x == 0
{
  inhale acc(this.x) && this.x == 0
}

/*
The same tests with InhaleExhale expressions.
*/

/*
Inhale.
*/

method i0(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this.x == 0, true]
{
}

method i1(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this.x == 0, true]
{
  inhale acc(this.x) && this.x == 0
}

method i2(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]
{
}

method i3(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]
{
  inhale acc(this.x) && this.x == 0
}

/*
Exhale.
*/

method e0(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: MissingOutput(not.wellformed:insufficient.permission, /Silicon/issue/160/)
  requires [true, this.x == 0]
{
}

method e1(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: MissingOutput(not.wellformed:insufficient.permission, /Silicon/issue/160/)
  ensures [true, this.x == 0]
{
  inhale acc(this.x) && this.x == 0
}

method e2(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: MissingOutput(not.wellformed:insufficient.permission, /Silicon/issue/160/)
  requires [true, this != null && this.x == 0]
{
}

method e3(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: MissingOutput(not.wellformed:insufficient.permission, /Silicon/issue/160/)
  ensures [true, this != null && this.x == 0]
{
  inhale acc(this.x) && this.x == 0
}

/*
Both.
*/

method ie0(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this.x == 0, this.x == 0]
{
}

method ie1(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this.x == 0, this.x == 0]
{
  inhale acc(this.x) && this.x == 0
}

method ie2(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, this != null && this.x == 0]
{
}

method ie3(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, this != null && this.x == 0]
{
  inhale acc(this.x) && this.x == 0
}

/*
More interesting combinations.
*/

/*
    Conditions to check for wellformedness:
    1.   acc(this.x) && true
    2.   true && this != null && this.x == 0 <-- should give an error
    Precondition verified with method body: acc(this.x) && true
*/
method t1(this: Ref)
  requires [acc(this.x), true]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: MissingOutput(not.wellformed:insufficient.permission, /Silicon/issue/160/)
  requires [true, this != null && this.x == 0]
{
}

/*
    Conditions to check for wellformedness:
    1.   true && this != null && this.x == 0 <-- should give an error
    2.   acc(this.x) && true
    Precondition verified with method body: true && this != null && this.x == 0
*/
method t2(this: Ref)
  requires [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires [this != null && this.x == 0, true]
{
}

/*
    Conditions to check for wellformedness:
    1.   true && this != null && this.x == 0 <-- should give an error
    2.   acc(this.x) && true
    Postcondition verified with method body: true && this != null && this.x == 0
*/
method t3(this: Ref)
  ensures [acc(this.x), true]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: MissingOutput(not.wellformed:insufficient.permission, /Silicon/issue/160/)
  ensures [true, this != null && this.x == 0]
{
  inhale acc(this.x) && this.x == 0
}

/*
    Conditions to check for wellformedness:
    1.   acc(this.x) && true
    2.   true && this != null && this.x == 0 <-- should give an error
    Postcondition verified with method body: acc(this.x) && true
*/
method t4(this: Ref)
  ensures [true, acc(this.x)]
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures [this != null && this.x == 0, true]
{
  inhale acc(this.x) && this.x == 0
}
