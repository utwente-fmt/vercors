//:: IgnoreFile(/carbon/issue/255/)

field f: Int

method m(xs1: Set[Ref], xs2: Set[Ref], xs3: Set[Ref], xs4: Set[Ref], xs5: Set[Ref], xs6: Set[Ref],
xs7: Set[Ref], xs8: Set[Ref], xs9: Set[Ref], xs10: Set[Ref], xs11: Set[Ref], ys1: Set[Ref], ys2: Set[Ref], ys3: Set[Ref], ys4: Set[Ref], ys5: Set[Ref], ys6: Set[Ref],
ys7: Set[Ref], ys8: Set[Ref], ys9: Set[Ref], ys10: Set[Ref], ys11: Set[Ref], zs1: Set[Ref], zs2: Set[Ref], zs3: Set[Ref], zs4: Set[Ref], zs5: Set[Ref], zs6: Set[Ref],
zs7: Set[Ref], zs8: Set[Ref], zs9: Set[Ref], zs10: Set[Ref], zs11: Set[Ref], xs: Set[Ref], ys: Set[Ref], zs: Set[Ref], q: Perm) {
  inhale forall x: Ref, y: Ref, z: Ref :: x in xs && y in ys && z in zs ==> acc(x.f) && acc(y.f) && acc(z.f) --* p(x, y, z)

  assume (forall x1: Ref, y1: Ref, z1: Ref :: {acc(x1.f, q) && acc(y1.f, q) && acc(z1.f, q) --* acc(p(x1, y1, z1), q)} x1 in xs1 && y1 in ys1 && z1 in zs1 ==> acc(x1.f, q) && acc(y1.f, q) && acc(z1.f, q) --* acc(p(x1, y1, z1), q))
      && (forall x2: Ref, y2: Ref, z2: Ref :: {acc(x2.f, q) && acc(y2.f, q) && acc(z2.f, q) --* acc(p(x2, y2, z2), q)} x2 in xs2 && y2 in ys2 && z2 in zs2 ==> acc(x2.f, q) && acc(y2.f, q) && acc(z2.f, q) --* acc(p(x2, y2, z2), q))
      && (forall x3: Ref, y3: Ref, z3: Ref :: {acc(x3.f, q) && acc(y3.f, q) && acc(z3.f, q) --* acc(p(x3, y3, z3), q)} x3 in xs3 && y3 in ys3 && z3 in zs3 ==> acc(x3.f, q) && acc(y3.f, q) && acc(z3.f, q) --* acc(p(x3, y3, z3), q))
      && (forall x4: Ref, y4: Ref, z4: Ref :: {acc(x4.f, q) && acc(y4.f, q) && acc(z4.f, q) --* acc(p(x4, y4, z4), q)} x4 in xs4 && y4 in ys4 && z4 in zs4 ==> acc(x4.f, q) && acc(y4.f, q) && acc(z4.f, q) --* acc(p(x4, y4, z4), q))
      && (forall x5: Ref, y5: Ref, z5: Ref :: {acc(x5.f, q) && acc(y5.f, q) && acc(z5.f, q) --* acc(p(x5, y5, z5), q)} x5 in xs5 && y5 in ys5 && z5 in zs5 ==> acc(x5.f, q) && acc(y5.f, q) && acc(z5.f, q) --* acc(p(x5, y5, z5), q))
      && (forall x6: Ref, y6: Ref, z6: Ref :: {acc(x6.f, q) && acc(y6.f, q) && acc(z6.f, q) --* acc(p(x6, y6, z6), q)} x6 in xs6 && y6 in ys6 && z6 in zs6 ==> acc(x6.f, q) && acc(y6.f, q) && acc(z6.f, q) --* acc(p(x6, y6, z6), q))
      && (forall x7: Ref, y7: Ref, z7: Ref :: {acc(x7.f, q) && acc(y7.f, q) && acc(z7.f, q) --* acc(p(x7, y7, z7), q)} x7 in xs7 && y7 in ys7 && z7 in zs7 ==> acc(x7.f, q) && acc(y7.f, q) && acc(z7.f, q) --* acc(p(x7, y7, z7), q))
      && (forall x8: Ref, y8: Ref, z8: Ref :: {acc(x8.f, q) && acc(y8.f, q) && acc(z8.f, q) --* acc(p(x8, y8, z8), q)} x8 in xs8 && y8 in ys8 && z8 in zs8 ==> acc(x8.f, q) && acc(y8.f, q) && acc(z8.f, q) --* acc(p(x8, y8, z8), q))
      && (forall x9: Ref, y9: Ref, z9: Ref :: {acc(x9.f, q) && acc(y9.f, q) && acc(z9.f, q) --* acc(p(x9, y9, z9), q)} x9 in xs9 && y9 in ys9 && z9 in zs9 ==> acc(x9.f, q) && acc(y9.f, q) && acc(z9.f, q) --* acc(p(x9, y9, z9), q))
      && (forall x10: Ref, y10: Ref, z10: Ref :: {acc(x10.f, q) && acc(y10.f, q) && acc(z10.f, q) --* acc(p(x10, y10, z10), q)} x10 in xs10 && y10 in ys10 && z10 in zs10 ==> acc(x10.f, q) && acc(y10.f, q) && acc(z10.f, q) --* acc(p(x10, y10, z10), q))
      && (forall x11: Ref, y11: Ref, z11: Ref :: {acc(x11.f, q) && acc(y11.f, q) && acc(z11.f, q) --* acc(p(x11, y11, z11), q)} x11 in xs11 && y11 in ys11 && z11 in zs11 ==> acc(x11.f, q) && acc(y11.f, q) && acc(z11.f, q) --* acc(p(x11, y11, z11), q))

  var a: Ref
  var b: Ref
  var c: Ref

  assume a in xs1 && b in ys1 && c in zs1
  assume a in xs2 && b in ys2 && c in zs2

  assert acc(a.f, q) && acc(b.f, q) && acc(c.f, q) --* acc(p(a,b,c), q)

  assert q == write ==> false
}

predicate p(x: Ref, y: Ref, z: Ref)
