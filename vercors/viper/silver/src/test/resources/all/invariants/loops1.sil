//:: IgnoreFile(/carbon/issue/182/)

field f: Int

method test01(x: Ref)
  requires acc(x.f)
  ensures  acc(x.f) && x.f == old(x.f)
{
  var n1: Int
  var n2: Int

  label dummy
    invariant acc(x.f, 1/2)
    /* TODO: Label does not represent a loop head - warn about unused invariant? */

  assert acc(x.f)

  label lh1
    invariant acc(x.f, 1/2)

  assert perm(x.f) == 1/2

  n1 := n1 + 1
  if (n1 != 0) {
    goto lh1
  }

  assert acc(x.f)

  label lh2
    invariant acc(x.f, 1/3)

  assert perm(x.f) == 1/3

  n2 := n2 + 1
  if (n2 == 0) {
    goto endofprogram
  }
  goto lh2

  label endofprogram
}

method test02(x: Ref)
  requires acc(x.f)
  ensures  acc(x.f) && x.f == old(x.f)
{
  var n1: Int
  var n2: Int

  label lh1 // outer loop head
    invariant acc(x.f, 1/2)

  assert perm(x.f) == 1/2

  label lh2 // inner loop head
    invariant acc(x.f, 1/3)

  assert perm(x.f) == 1/3

  n2 := n2 + 1
  if (n2 == 0) {
    goto afterl1
  }
  goto lh2 // back-edge inner loop

  label afterl1

  assert perm(x.f) == 1/2

  n1 := n1 + 1
  if (n1 != 0) {
    goto lh1 // back-edge outer loop
  }

  assert n1 == 0
}

method test03(x: Ref)
  requires acc(x.f)
  ensures  acc(x.f) && x.f == old(x.f)
{
  var n1: Int
  var n2: Int

  label lh1 // outer loop head
    invariant acc(x.f, 1/2)

  assert perm(x.f) == 1/2

  label lh2 // inner loop head
    invariant acc(x.f, 1/3)

  assert perm(x.f) == 1/3

  n2 := n2 + 1
  if (n2 == 0) {
    goto endofprogram
  }
  goto lh2 // back-edge inner loop

  // ----- begin dead code
  assert perm(x.f) == 1/2

  n1 := n1 + 1
  if (n1 != 0) {
    goto lh1 // back-edge outer loop
  }

  // ----- end dead code

  label endofprogram
  assert n2 == 0 || n1 == 0
}
