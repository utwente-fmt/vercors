field f: Int

method test01a(x: Ref) {
  inhale (forperm r: Ref [r.f] :: r.f > 0) && acc(x.f)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert x.f > 0
}

method test01b(x: Ref) {
  inhale acc(x.f) && (forperm r: Ref [r.f] :: r.f > 0)
  assert x.f > 0
}

method test02a(x: Ref) {
  inhale acc(x.f) && x.f > 0
  exhale (forperm r: Ref [r.f] :: r.f > 0) && acc(x.f)
}

method test02b(x: Ref) {
  inhale acc(x.f) && x.f > 0
  exhale acc(x.f) && (forperm r: Ref [r.f] :: r.f > 0)
}

method test03a(x: Ref) {
  inhale acc(x.f)
  exhale acc(x.f) && (forperm r: Ref [r.f] :: r.f > 0)
}

method test03b(x: Ref) {
  inhale acc(x.f)
  //:: ExpectedOutput(exhale.failed:assertion.false)
  exhale (forperm r: Ref [r.f] :: r.f > 0) && acc(x.f)
}

method test08(x: Ref, y: Ref)
  requires acc(x.f) && acc(y.f)
  requires x.f > 0 && y.f > 0
{
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  //:: MissingOutput(exhale.failed:insufficient.permission, /Carbon/issue/130/)
  exhale acc(y.f) && (forperm r: Ref [r.f] :: y.f > 0)
    /* forperm is evaluated in the current state, as is its body */
}
