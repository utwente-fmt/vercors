field val: Int

method test01(x: Ref, p: Perm) {
  inhale acc(x.val, p)
  inhale forperm r: Ref [r.val] :: false
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test02(x: Ref, p: Perm) {
  inhale acc(x.val, p)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert forperm r: Ref [r.val] :: false
}

method test03(c1: Ref, c2: Ref, c3: Ref)
  requires acc(c1.val) && acc(c2.val)
  requires c3 == c1 || c3 == c2
{
  inhale forperm r: Ref [r.val] :: r == c3 ==> false
  //:: UnexpectedOutput(assert.failed:assertion.false, /Carbon/issue/131/)  
  assert false
}

method test04(c1: Ref, c2: Ref, c3: Ref)
  requires acc(c1.val) && acc(c2.val)
  requires c3 == c1 || c3 == c2
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert forperm r: Ref [r.val] :: r == c3 ==> false
}

method test07a(c1: Ref, c2: Ref)
  requires acc(c1.val)
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert forperm r: Ref [r.val] :: r == c2 ==> false
}

method test07b(c1: Ref, c2: Ref)
  requires acc(c1.val) && c1 !=  c2
{
  assert forperm r: Ref [r.val] :: r == c2 ==> false
}

method test05(c1: Ref, c2: Ref)
  requires acc(c1.val)
{
  inhale forperm r: Ref [r.val] :: r == c2 ==> false
  inhale c1 == c2
  assert false
}

method test06(c1: Ref) {
  inhale forperm r: Ref [r.val] :: false
  inhale acc(c1.val)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
