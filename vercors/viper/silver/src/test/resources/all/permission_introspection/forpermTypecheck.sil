field f: Int
field g: Int

method m1(x: Ref, y: Ref) {
    inhale acc(x.f)
    inhale x.f > 0

    //:: ExpectedOutput(typechecker.error)
    assert forperm a: Ref, b: Ref [a.f] :: a.f > 0
}

method m2(x: Ref, y: Ref) {
    inhale p1(x, 0)

    //:: ExpectedOutput(typechecker.error)
    assert forperm a: Ref, i: Int [p1(a, i+1)] :: i < 0
}

method m3(xs: Seq[Ref]) {
    inhale |xs| == 10
    inhale forall i: Int :: 0 < i && i < 10 ==> acc(xs[i].f)
    inhale forall i: Int :: 0 < i && i < 10 ==> xs[i].f > 0

    //:: ExpectedOutput(typechecker.error)
    assert forperm i: Int [xs[i].f] :: xs[i].f > 0
}

method m4(x: Ref, j: Int) {
    inhale p1(x, 10)

    //:: ExpectedOutput(typechecker.error)
    assert forperm a: Ref, i: Int [p1(a,(((i*2)-16))/j)] :: i > 0
}

method m5(x: Ref) {
    inhale p2(x, 8, 16)

    //:: ExpectedOutput(typechecker.error)
    assert forperm a: Ref, i: Int [p2(a, i, i*2)] :: i > 0
}

predicate p1(x: Ref, i: Int) {
    acc(x.f) && x.f == i
}

predicate p2(x: Ref, i: Int, j: Int) {
    acc(x.f) && i < x.f && x.f < j
}