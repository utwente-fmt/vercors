field val: Int

method test01a(c1: Ref, c2: Ref)
  requires acc(c1.val, 1/2) && acc(c2.val, 1/2) && c1 == c2
{
  assume perm(c1.val) >= 1/1
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test01b(c1: Ref, c2: Ref, c3: Ref)
  requires acc(c1.val, 1/2) && acc(c2.val, 1/2) && acc(c2.val, 1/2)
  requires c3 == c1 || c3 == c2
{
  assume perm(c3.val) >= 1/1
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test01c(c1: Ref, c2: Ref)
  requires acc(c1.val, 1/2) && acc(c2.val, 1/2)
{
  assume perm(c1.val) >= 1/1
  assume c1 == c2
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test01d(c1: Ref, c2: Ref)
  requires acc(c1.val, 1/2) && acc(c2.val, 1/2)
{
  assume perm(c1.val) >= 1/1
  exhale acc(c1.val, 1/2)
  assume c1 == c2
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test02a(c1: Ref, c2: Ref)
  requires acc(c1.val, 1/2) && acc(c2.val, 1/2) && c1 == c2
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert perm(c1.val) <= 1/2
}

method test02b(c1: Ref, c2: Ref, c3: Ref)
  requires acc(c1.val, 1/2) && acc(c2.val, 1/2) && acc(c3.val, 1/2)
  requires c3 == c1 || c3 == c2
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert perm(c3.val) <= 1/2
}


method test03a(c1: Ref, c2: Ref)
  requires acc(c1.val, 1/2) && acc(c2.val, 1/2) && c1 == c2
{
  assert perm(c1.val) >= 1/1
}

method test03b(c1: Ref, c2: Ref, c3: Ref)
  requires acc(c1.val, 1/2) && acc(c2.val, 1/2) && acc(c3.val, 1/2)
  requires c3 == c1 || c3 == c2
{
  assert perm(c3.val) >= 1/1
}
