field f: Int

function fun01(x: Ref, y: Ref, b: Bool): Int
  requires b ? acc(x.f) : acc(y.f)

method test01(x: Ref, y: Ref)
  requires acc(x.f) && acc(y.f)
{
  var vx: Int := fun01(x, y, true)
  var vy: Int := fun01(x, y, false)
  y.f := 0
  assert vx == fun01(x, y, true)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert vy == fun01(x, y, false)
}

function fun02(x: Ref, y: Ref, b: Bool): Int
  requires acc(x.f, b ? write : none)
  requires acc(y.f, !b ? write : none)

method test02(x: Ref, y: Ref)
  requires acc(x.f) && acc(y.f)
{
  var vx: Int := fun02(x, y, true)
  var vy: Int := fun02(x, y, false)
  y.f := 0
  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/205/)
  assert vx == fun02(x, y, true)
  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/34/)
  assert vy == fun02(x, y, false)
}
