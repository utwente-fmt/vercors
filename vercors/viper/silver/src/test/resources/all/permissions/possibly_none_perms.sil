field f: Int

method test01(x: Ref, b: Bool)
  requires acc(x.f, b ? write : none)
{
  //:: ExpectedOutput(assignment.failed:insufficient.permission)
  var a: Int := x.f
}

method test02(x: Ref, b1: Bool, b2: Bool)
  requires acc(x.f, 1/5)
{
  var a1: Int := x.f

  exhale acc(x.f, b1 ? 1/5 : none)
  inhale acc(x.f, 1/5)
  assert true
  var a2: Int := x.f

  exhale acc(x.f, b2 ? 1/5 : none)
  inhale acc(x.f, 1/5)
  assert true
  var a3: Int := x.f

  assert !b1 ==> a1 == a2 && a2 == a3
  assert !b2 ==> a2 == a3

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert a1 == a3 || a1 == a2 || a2 == a3
}

method test03(x: Ref, b: Bool)
  requires acc(x.f, b ? write : none)
{
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale acc(x.f, wildcard)
}

method permarg(k: Perm) {}

method test04(x: Ref, b: Bool)
  requires acc(x.f, b ? write : none)
{
  var k: Perm
  fresh k
  constraining(k) {
    permarg(k)
  }
}

method test05(x: Ref, b: Bool)
  requires acc(x.f, b ? write : none)
{
  var k: Perm
  fresh k
  constraining(k) {
    //:: ExpectedOutput(exhale.failed:insufficient.permission)
    exhale acc(x.f, k)
  }

  assert !b ==> false
}
