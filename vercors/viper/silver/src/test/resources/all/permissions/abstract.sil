//:: IgnoreFile(/Silicon/issue/35/)

field f: Int

method t1(this: Ref)
{
    var rd: Perm
    var n: Int
    inhale acc(this.f, wildcard)
    inhale (n > 0)
    fresh rd
    constraining(rd) {
        exhale acc(this.f, 2*rd)
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method t2(this: Ref)
{
    var rd: Perm
    var n: Int
    inhale acc(this.f, wildcard)
    inhale (n > 0)
    fresh rd
    constraining(rd) {
        exhale acc(this.f, n*rd)
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method t3(this: Ref)
{
    var rd: Perm
    var n: Int
    inhale acc(this.f, wildcard)
    inhale (n > 0)
    fresh rd
    constraining(rd) {
        exhale acc(this.f, n*rd + 3*rd)
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method t3b(this: Ref)
{
    var rd: Perm
    var n: Int
    inhale acc(this.f, wildcard)
    inhale (n > 0)
    fresh rd
    constraining(rd) {
        exhale acc(this.f, n*rd) && acc(this.f, 3*rd)
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method t3c(this: Ref)
{
    var rd: Perm
    var n: Int
    inhale acc(this.f, wildcard)
    inhale (n > 0)
    fresh rd
    constraining(rd) {
        exhale acc(this.f, 3*rd) && acc(this.f, n*rd)
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method t4(this: Ref)
{
    var rd: Perm
    var n: Int
    inhale acc(this.f, wildcard)
    inhale (n > 0)
    fresh rd
    constraining(rd) {
        exhale acc(this.f, rd+rd)
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method t4b(this: Ref)
{
    var rd: Perm
    var n: Int
    inhale acc(this.f, wildcard)
    inhale (n > 0)
    fresh rd
    constraining(rd) {
        exhale acc(this.f, rd) && acc(this.f, rd)
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method t5(this: Ref)
{
    var rd: Perm
    var n: Int
    inhale acc(this.f, wildcard)
    inhale (n > 0)
    fresh rd
    constraining(rd) {
        exhale acc(this.f, n*(rd + rd))
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method t6(this: Ref)
{
    var rd: Perm
    var n: Int
    inhale acc(this.f, wildcard) && acc(this.f, 1/4);
    inhale (n > 0)
    fresh rd
    constraining(rd) {
        exhale acc(this.f, (1/4) * rd)
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}

method t7(this: Ref)
{
    var rd: Perm
    var n: Int
    inhale acc(this.f, wildcard) && acc(this.f, 1/4);
    inhale (n > 0)
    fresh rd
    constraining(rd) {
        //:: UnexpectedOutput(exhale.failed:insufficient.permission, /silicon/issue/35/)
        exhale acc(this.f, (1/2) * (n * rd + 1/2))
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/35/)
    assert false
}

method t8(this: Ref)
{
    var rd: Perm
    var n: Int
    inhale acc(this.f, wildcard) && acc(this.f, 1/4);
    inhale (n > 0)
    fresh rd
    constraining(rd) {
        //:: UnexpectedOutput(exhale.failed:insufficient.permission, /silicon/issue/35/)
        exhale acc(this.f, (1/2) - (1/4) + n*rd)
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/35/)
    assert false
}

method t9(this: Ref)
{
    var rd: Perm
    var n: Int
    inhale acc(this.f, wildcard) && acc(this.f, 1/4);
    inhale (n > 0)
    fresh rd
    constraining(rd) {
        //:: UnexpectedOutput(exhale.failed:insufficient.permission, /silicon/issue/35/)
        exhale acc(this.f, (1/4) - ((-100)*rd))
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/35/)
    assert false
}

method t10(this: Ref, b:Bool)
{
    var rd: Perm
    var rd2: Perm
    inhale acc(this.f, 1/4);
    fresh rd,rd2
    constraining(rd,rd2) {
        exhale acc(this.f, 2*(b ? (3*rd) : rd2))

        exhale acc(this.f, wildcard)
    }
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}
