field f: Ref

method test01() {
  define A true
  define B true

  exhale A ==> B
}

define X true

method test02() {
  define A true

  inhale X ==> A
  exhale A ==> X
}

method test03(x: Ref)
  requires acc(x.f)
{
  define A acc(x.f)

  inhale A && X
  exhale acc(x.f)
}

define P(x, v) acc(x.f) && x.f == v

method test04(x: Ref)
{
  inhale P(x, null)
  var y: Ref := x
  var z: Ref
  z := new(f)
  y.f := z
  exhale P(y, z) && acc(y.f.f)
}

function fun01(b: Bool): Bool

method test05(x: Int) {
  var i: Int

  define sfx(k) x != k

  assume fun01(sfx(i))

  while (i < 0)
    invariant fun01(sfx(i))
  {
    i := i + 1
    assume false
  }
}

define swap(x, y, t) {
  t.g := x.g
  x.g := y.g
  y.g := t.g
}

field g: Int

method test06() {
  var x: Ref; inhale acc(x.g); x.g := 1
  var y: Ref; inhale acc(y.g); y.g := 2
  var t: Ref; inhale acc(t.g)
  swap(x, y, t)
  assert x.g == 2 && y.g == 1 && t.g == 1
  swap(y, t, x)
  assert x.g == 1 && y.g == 1 && t.g == 1
}

method test07(x: Ref)
  requires acc(x.g)
{
  define gtOrPrune(i, n) {
    if (i <= n) {
      assume false
    }
  }

  x.g := 1
  gtOrPrune(x.g, 5)
  assert false
}

//method test09(x: Ref)
//  requires acc(x.f)
//{
//  define outer() {
//    define inner true
//  }
//
//  outer()
//  assert inner
//}
//
