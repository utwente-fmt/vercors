field val : Int

predicate cell(x:Ref)
{
    acc(x.val)
}

function get(x:Ref) : Int 
  requires cell(x)
{
 unfolding cell(x) in x.val
}

method m(x:Ref, y:Ref)
  requires cell(x) && cell(y)
  {
     assume let z == (x) in (unfolding cell(x) in let w == (y) in unfolding cell(w) in x.val == w.val)
     assume unfolding cell(y) in y.val == 3
     exhale cell(y)
     assert get(x) == 3 // check framing
     inhale cell(y)
     assert get(x) == 3
     //:: ExpectedOutput(assert.failed:assertion.false)    
     assert get(y) == 3
  }