field val: Int
field next: Ref

function length(xs: Ref): Int
	requires acc(SortedList(xs))
	ensures result > 0
{ 1 + unfolding acc(SortedList(xs)) in xs.next == null ? 0 : length(xs.next) }

function itemAt(xs: Ref, i: Int): Int
	requires acc(SortedList(xs))
	requires 0 <= i && i < length(xs)
{ unfolding acc(SortedList(xs)) in i == 0 ? xs.val : itemAt(xs.next, i-1) }

function ascending(xs: Ref): Bool
	requires acc(SortedList(xs))
{ forall i: Int, j: Int :: {itemAt(xs, i), itemAt(xs, j)} 0 <= i && i < j && j < length(xs) ==> itemAt(xs, i) <= itemAt(xs, j) }

predicate SortedList(xs: Ref) {
	   acc(xs.val) && acc(xs.next)
	&& (xs.next != null ==> acc(SortedList(xs.next)))
	&& (xs.next != null ==> xs.val <= itemAt(xs.next, 0) && ascending(xs.next))
}

method insert(xs: Ref, e: Int)
	requires acc(SortedList(xs))
{
	assert unfolding acc(SortedList(xs)) in true /* Peek into the predicate */
    //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/359/)
	assert ascending(xs)
	  /* Used to fail because the triggers of the quantifier inside ascending
	   * were translated into their unlimited form, whereas it should be the
	   * limited form.
	   */
}
