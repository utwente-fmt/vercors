field value: Int;

define validIndex(a, i) (
   0 <= i && i < |a|
)

define HeapArray(array) (
    forall i: Int :: { array[i] } validIndex(array, i) ==> (array[i] != null && acc(array[i].value))
)

method foo(tree: Ref, leftArray: Seq[Ref], rightArray: Seq[Ref], array: Seq[Ref])
    requires HeapArray(array)
{
    //:: ExpectedOutput(assert.failed:seq.index.length)
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    //:: ExpectedOutput(assert.failed:receiver.not.injective)
    //:: MissingOutput(assert.failed:insufficient.permission, /silicon/issue/34/)
    //:: MissingOutput(assert.failed:receiver.not.injective, /silicon/issue/34/)
    assert forall i:Int :: { array[i] } validIndex(rightArray, i - |leftArray| - 1) ==> acc(array[i].value)
}
