//:: IgnoreFile(/Carbon/issue/85/)
// chaliceSuite/examples/iterator2.chalice
domain GlobalKPermission {

  unique function globalK$(): Perm

  axiom globalKReadOnly {
    (globalK$() > none) && (1 / 10000 > globalK$())
  }
}

field old$methodPermission: Perm

field joinable$: Bool

field Listcontents$: Seq[Int]

field Iteratorlist$: Ref

field par$Listinit$this$_1: Ref

field old$Listadd$0: Int

field par$Listadd$this$_2: Ref

field par$Listadd$x: Int

field par$Iteratorinit$this$_6: Ref

field par$Iteratorinit$l: Ref

field old$Iteratordispose$0: Ref

field par$Iteratordispose$this$_7: Ref

field par$Programmain$this$_11: Ref

function Listsize$(this$_3: Ref): Int
  requires this$_3 != null
  requires acc(Listvalid$(this$_3), wildcard)
  ensures 0 <= result
{
  (unfolding acc(Listvalid$(this$_3), wildcard) in |this$_3.Listcontents$|)
}

function IteratorgetList$(this$_8: Ref): Ref
  requires this$_8 != null
  requires acc(Iteratorvalid$(this$_8), wildcard)
  ensures result != null
{
  (unfolding acc(Iteratorvalid$(this$_8), wildcard) in this$_8.Iteratorlist$)
}

predicate List$MonitorInvariant(this$: Ref) {
  true
}

predicate Listvalid$(this$_4: Ref) {
  acc(this$_4.Listcontents$, write)
}

predicate Iterator$MonitorInvariant(this$_5: Ref) {
  true
}

predicate Iteratorvalid$(this$_9: Ref) {
  acc(this$_9.Iteratorlist$, write) && (this$_9.Iteratorlist$ != null) && acc(Listvalid$(this$_9.Iteratorlist$), globalK$())
}

predicate Program$MonitorInvariant(this$_10: Ref) {
  true
}

method Listinit$(this$_1: Ref) returns (k$: Perm)
  requires this$_1 != null
  requires acc(this$_1.Listcontents$, write)
  ensures [(k$ > none) && (write > k$) && (acc(Listvalid$(this$_1), write) && (Listsize$(this$_1) == 0)), true]
{
  var n$: Ref
  var a$: Ref
  var b$: Ref
  var c$: Ref
  fresh k$
  constraining(k$) {
    assert (k$ > none) && (write > k$)
    this$_1.Listcontents$ := Seq[Int]()
    fold acc(Listvalid$(this$_1), write)
    exhale (k$ > none) && (write > k$) && (acc(Listvalid$(this$_1), write) && (Listsize$(this$_1) == 0))
  }
}

method Listadd$(this$_2: Ref, x: Int) returns (k$_1: Perm)
  requires this$_2 != null
  requires acc(Listvalid$(this$_2), write)
  ensures [(k$_1 > none) && (write > k$_1) && (acc(Listvalid$(this$_2), write) && (Listsize$(this$_2) == old(Listsize$(this$_2) + 1))), true]
{
  var n$_1: Ref
  var a$_1: Ref
  var b$_1: Ref
  var c$_1: Ref
  fresh k$_1
  constraining(k$_1) {
    assert (k$_1 > none) && (write > k$_1)
    unfold acc(Listvalid$(this$_2), write)
    this$_2.Listcontents$ := this$_2.Listcontents$ ++ Seq(x)
    fold acc(Listvalid$(this$_2), write)
    exhale (k$_1 > none) && (write > k$_1) && (acc(Listvalid$(this$_2), write) && (Listsize$(this$_2) == old(Listsize$(this$_2) + 1)))
  }
}

method Iteratorinit$(this$_6: Ref, l: Ref) returns (k$_2: Perm)
  requires this$_6 != null
  requires acc(this$_6.Iteratorlist$, write)
  requires l != null
  requires acc(Listvalid$(l), globalK$())
  ensures [(k$_2 > none) && (write > k$_2) && acc(Iteratorvalid$(this$_6), write) && (IteratorgetList$(this$_6) == l), true]
{
  var n$_2: Ref
  var a$_2: Ref
  var b$_2: Ref
  var c$_2: Ref
  fresh k$_2
  constraining(k$_2) {
    assert (k$_2 > none) && (write > k$_2)
    this$_6.Iteratorlist$ := l
    fold acc(Iteratorvalid$(this$_6), write)
    exhale (k$_2 > none) && (write > k$_2) && acc(Iteratorvalid$(this$_6), write) && (IteratorgetList$(this$_6) == l)
  }
}

method Iteratordispose$(this$_7: Ref) returns (k$_3: Perm)
  requires this$_7 != null
  requires acc(Iteratorvalid$(this$_7), write)
  ensures [(k$_3 > none) && (write > k$_3) && acc(Listvalid$(old(IteratorgetList$(this$_7))), globalK$()), true]
{
  var n$_3: Ref
  var a$_3: Ref
  var b$_3: Ref
  var c$_3: Ref
  fresh k$_3
  constraining(k$_3) {
    assert (k$_3 > none) && (write > k$_3)
    unfold acc(Iteratorvalid$(this$_7), write)
    exhale (k$_3 > none) && (write > k$_3) && acc(Listvalid$(old(IteratorgetList$(this$_7))), globalK$())
  }
}

method Programmain$(this$_11: Ref) returns (k$_4: Perm)
  requires this$_11 != null
  ensures [(k$_4 > none) && (write > k$_4), true]
{
  var n$_4: Ref
  var a$_4: Ref
  var b$_4: Ref
  var c$_4: Ref
  var list: Ref
  var newK$: Perm
  var newK$_1: Perm
  var newK$_2: Perm
  var iter1: Ref
  var newK$_3: Perm
  var iter2: Ref
  var newK$_4: Perm
  var newK$_5: Perm
  var newK$_6: Perm
  fresh k$_4
  constraining(k$_4) {
    assert (k$_4 > none) && (write > k$_4)
    list := new(old$methodPermission, joinable$, Listcontents$, Iteratorlist$, par$Listinit$this$_1, old$Listadd$0, par$Listadd$this$_2, par$Listadd$x, par$Iteratorinit$this$_6, par$Iteratorinit$l, old$Iteratordispose$0, par$Iteratordispose$this$_7, par$Programmain$this$_11)
    list.Iteratorlist$ := null
    list.par$Listinit$this$_1 := null
    list.par$Listadd$this$_2 := null
    list.par$Iteratorinit$this$_6 := null
    list.par$Iteratorinit$l := null
    list.old$Iteratordispose$0 := null
    list.par$Iteratordispose$this$_7 := null
    list.par$Programmain$this$_11 := null
    newK$ := Listinit$(list)
    newK$_1 := Listadd$(list, 5)
    newK$_2 := Listadd$(list, 6)
    iter1 := new(old$methodPermission, joinable$, Listcontents$, Iteratorlist$, par$Listinit$this$_1, old$Listadd$0, par$Listadd$this$_2, par$Listadd$x, par$Iteratorinit$this$_6, par$Iteratorinit$l, old$Iteratordispose$0, par$Iteratordispose$this$_7, par$Programmain$this$_11)
    iter1.Iteratorlist$ := null
    iter1.par$Listinit$this$_1 := null
    iter1.par$Listadd$this$_2 := null
    iter1.par$Iteratorinit$this$_6 := null
    iter1.par$Iteratorinit$l := null
    iter1.old$Iteratordispose$0 := null
    iter1.par$Iteratordispose$this$_7 := null
    iter1.par$Programmain$this$_11 := null
    newK$_3 := Iteratorinit$(iter1, list)
    iter2 := new(old$methodPermission, joinable$, Listcontents$, Iteratorlist$, par$Listinit$this$_1, old$Listadd$0, par$Listadd$this$_2, par$Listadd$x, par$Iteratorinit$this$_6, par$Iteratorinit$l, old$Iteratordispose$0, par$Iteratordispose$this$_7, par$Programmain$this$_11)
    iter2.Iteratorlist$ := null
    iter2.par$Listinit$this$_1 := null
    iter2.par$Listadd$this$_2 := null
    iter2.par$Iteratorinit$this$_6 := null
    iter2.par$Iteratorinit$l := null
    iter2.old$Iteratordispose$0 := null
    iter2.par$Iteratordispose$this$_7 := null
    iter2.par$Programmain$this$_11 := null
    newK$_4 := Iteratorinit$(iter2, list)
    newK$_5 := Iteratordispose$(iter1)
    newK$_6 := Iteratordispose$(iter2)
    assert acc(Listvalid$(list), write)
    assert Listsize$(list) == 2
    exhale (k$_4 > none) && (write > k$_4)
  }
}
