field f: Int
field g: Int

predicate Pair(this: Ref) {
  acc(this.f) && acc(this.g) 
}

function sum(p: Ref): Int
  requires acc(Pair(p))
{
  unfolding acc(Pair(p)) in (p.f) + (p.g) 
}

method test08(p:Ref, r:Ref) 
requires acc(Pair(p)) && acc(r.f)
{
  var x:Int 
  x := sum(p)
  exhale acc(r.f)
  assert (unfolding Pair(p) in p.f+p.g == x)
}