field next: Ref
field val: Int

predicate valid(this: Ref) {
  acc(this.next) && acc(this.val) &&
  (this.next != null ==> acc(valid(this.next)))
}

method traverse(list: Ref)
  requires acc(valid(list))
{
  var tmp: Ref := list

  while (tmp != null)
    invariant (tmp != null) ==> acc(valid(tmp))
  {
    unfold acc(valid(tmp))
    tmp := tmp.next
  }
}
