predicate pred(r: Ref)

function fun(r: Ref, i: Int): Ref { r }

function fun2(r: Ref): Ref { r }

method t4b(xs: Seq[Ref], i: Int)
  requires forall x: Ref :: {fun2(x)} x in xs ==> pred(fun(x, i))
  ensures  forall y: Ref :: {fun(y, i)} y in xs ==> pred(fun2(y))
{}



field f: Ref

function at1(xs: Seq[Ref], i: Int): Ref
  requires 0 <= i && i < |xs|
{ xs[i] }

function at2(i: Int, xs: Seq[Ref]): Ref
  requires 0 <= i && i < |xs|
{ xs[i] }

method test02a(xs: Seq[Ref], k: Int) {
  inhale forall i: Int :: {at1(xs, i)} 0 <= i && i < |xs| ==> acc(at1(xs, i).f)

  /* Suppress "receiver at2(...) might not be invariant" error at the final assertion */
  inhale forall i: Int, j: Int :: 0 <= i && i < j && j < |xs| ==> xs[i] != xs[j]

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert forall i: Int :: {at2(i, xs)} 0 <= i && i < |xs| ==> acc(at2(i, xs).f)
}

domain Dummy {
  function D(r1: Ref, r2: Ref): Bool
  axiom def_D { forall r1: Ref, r2: Ref :: D(r1, r2) }
}

method test02b(xs: Seq[Ref], k: Int) {
  inhale forall i: Int :: {at1(xs, i)} 0 <= i && i < |xs| ==> acc(at1(xs, i).f)

  /* Required for proving the final assertion */
  assert forall i: Int :: 0 <= i && i < |xs| ==> at1(xs, i) == at2(i, xs)

  assert forall i: Int :: {at2(i, xs)} 0 <= i && i < |xs| ==> acc(at2(i, xs).f)
}

method test03a(xs: Seq[Ref], k: Int) {
  inhale 0 <= k && k < |xs|
  inhale forall i: Int :: {at2(i, xs)} 0 <= i && i < |xs| ==> acc(at1(xs, i).f)
  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /carbon/issue/242/)
  assert at1(xs, k) != null
}

method test03b(xs: Seq[Ref], k: Int) {
  inhale 0 <= k && k < |xs|
  inhale forall i: Int :: {at2(i, xs)} 0 <= i && i < |xs| ==> acc(at1(xs, i).f)
  assert at2(k, xs) != null
}
