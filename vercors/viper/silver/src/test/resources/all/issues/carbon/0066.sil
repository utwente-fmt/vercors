field x: Int

method test1(this: Ref)
{
  inhale [acc(this.x) && this.x == 1, true]
}

method test2(this: Ref)
{
  inhale [true, acc(this.x) && this.x == 1]
}

method test3(this: Ref)
{
  exhale [acc(this.x) && this.x == 1, true]
}

method test4(this: Ref)
{
  inhale acc(this.x) && this.x == 1
  exhale [true, acc(this.x) && this.x == 1]
}

method test5(this: Ref)
{
  inhale acc(this.x) && this.x == 1
}

method test6(this: Ref)
{
  inhale [acc(this.x), true] && [this.x == 1, true]
}

method test10(this: Ref)
{
  inhale true && [acc(this.x) && this.x == 1, true]
}

method test11(this: Ref)
{
  inhale true && [true, acc(this.x) && this.x == 1]
}

method test12(this: Ref)
{
  exhale true && [acc(this.x) && this.x == 1, true]
}

method test13(this: Ref)
{
  inhale acc(this.x) && this.x == 1
  exhale true && [true, acc(this.x) && this.x == 1]
}

method test14(this: Ref)
{
  // We check both branches only of contracts. Therefore, the following
  // should succeed.
  inhale [true, this.x == 1]
}

method test15(this: Ref)
{
  // We check both branches only of contracts. Therefore, the following
  // should succeed.
  exhale [this.x == 1, true]
}

method e0(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: MissingOutput(not.wellformed:insufficient.permission, /Silicon/issue/235/)
  requires [true, this.x == 0]
{
}

method e1(this: Ref)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: MissingOutput(not.wellformed:insufficient.permission, /Silicon/issue/235/)
  ensures [true, this.x == 0]
{
  inhale acc(this.x) && this.x == 0
}
