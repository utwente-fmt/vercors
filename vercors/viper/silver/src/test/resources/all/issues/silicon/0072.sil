field f: Int

method test01(s: Seq[Ref])
 requires |s| > 2 && acc(s[0].f) && acc(s[1].f)
 requires forall i: Int :: i in [0..1) ==> s[i].f == 0
{}

method test02(s: Seq[Ref])
 requires |s| > 2 && acc(s[0].f) && acc(s[1].f)
 //:: UnexpectedOutput(not.wellformed:insufficient.permission, /silicon/issue/72/)
 requires forall i: Int :: i in [0..2) ==> s[i].f == 0
{}

method test02ProofObligation(s: Seq[Ref]) {
  inhale |s| > 2 && acc(s[0].f) && acc(s[1].f)

  var i: Int
  inhale 0 <= i && i < 2

  //:: UnexpectedOutput(assert.failed:insufficient.permission, /silicon/issue/72/)
  assert acc(s[i].f)
}

method test04(s: Seq[Int])
 requires |s| > 2 && s[0] > 0 && s[1] > 0
 ensures  forall i: Int :: i in [0..2) ==> s[i] > 0
{}

method test05(s: Seq[Ref])
  requires |s| > 2
  requires s[0] != null && s[1] != null
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  requires forall i: Int :: i in [0..2) ==> s[i].f == 0
{}

/* Works with Silicon-QP */
//method test03(s: Seq[Ref])
//  requires |s| > 2
//  requires forall i: Int :: i in [0..1) ==> acc(s[i].f)
//  requires forall i: Int :: i in [1..2) ==> acc(s[i].f)
//  requires forall i: Int :: i in [0..2) ==> s[i].f == 0
//{}
