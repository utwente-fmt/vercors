field next: Ref

/* Originally reported code */

/* good-wildcard.sil */
method main01(t1: Ref, t2: Ref)
  requires acc(t1.next, wildcard)
  requires acc(t2.next, wildcard)
{
  if (t1 == t2) {
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
  }
}

/* bad-wildcard.sil */
method main02(t1: Ref, t2: Ref)
  requires acc(t1.next, wildcard)
  requires acc(t2.next, wildcard)
  requires t1.next != null
  requires t2.next != null
  requires acc(t1.next.next, wildcard)
  requires acc(t2.next.next, wildcard)
{
  if (t1 == t2) {
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
  }
}

/* More regression tests */

method test01(t1: Ref, t2: Ref)
  requires acc(t1.next, wildcard)
  requires acc(t2.next, wildcard)
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert t1 != t2
}

method test02(t1: Ref, t2: Ref)
  requires acc(t1.next, wildcard)
  requires acc(t2.next)
{
  assert t1 != t2
}

method test03(t1: Ref, t2: Ref)
  requires acc(t1.next, 1/3)
  requires acc(t2.next, 1/3)
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert t1 != t2
}

method test04(t1: Ref, t2: Ref)
  requires acc(t1.next, 1/2)
  requires acc(t2.next, 2/3)
{
  assert t1 != t2
}

method test05(t1: Ref, t2: Ref)
  requires acc(t1.next, 1/2)
  requires acc(t2.next, wildcard)
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert t1 != t2
}
