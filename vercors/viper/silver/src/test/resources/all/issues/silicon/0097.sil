domain GlobalKPermission {

  unique function globalK$(): Perm

  axiom globalKReadOnly {
    (globalK$() > none) && (write > globalK$())
  }
}

field old$methodPermission: Perm

field joinable$: Bool

field PseudoListvalue$: Int

field PseudoListnext$: Ref

field par$PseudoListstatic_range_workaround$this$_1: Ref

field par$PseudoListstatic_range_workaround$k$: Perm

function PseudoListget$(this$_2: Ref, index: Int): Bool
  requires this$_2 != null
  requires acc(PseudoListinv$(this$_2), wildcard)
{
  (unfolding acc(PseudoListinv$(this$_2), wildcard) in (index == 0 ? true : PseudoListget$(this$_2.PseudoListnext$, index - 1)))
}

predicate PseudoList$MonitorInvariant(this$: Ref) {
  true
}

predicate PseudoListinv$(this$_3: Ref) {
  acc(this$_3.PseudoListvalue$, write) && acc(this$_3.PseudoListnext$, write) && (this$_3.PseudoListnext$ != null) && acc(PseudoListinv$(this$_3.PseudoListnext$), write)
}

method PseudoListstatic_range_workaround$(this$_1: Ref, k$: Perm)
  requires this$_1 != null
  requires k$ > none
  requires write > k$
  requires acc(PseudoListinv$(this$_1), write)
  ensures acc(PseudoListinv$(this$_1), write)
{
  var n$: Ref
  var a$: Ref
  var b$: Ref
  var c$: Ref
  inhale PseudoListget$(this$_1, 0)
  inhale (forall i: Int :: true && (i in [1..4)) ==> PseudoListget$(this$_1, i))
  assert (forall i: Int :: true && (i in [0..4)) ==> PseudoListget$(this$_1, i))
}
