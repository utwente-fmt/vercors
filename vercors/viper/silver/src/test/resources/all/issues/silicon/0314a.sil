field f: Int
field g: Ref
field h: Set[Ref]

domain dummy {
  function foo(i: Int, j: Int): Bool
  function bar(i: Int): Bool
  function num(x: Ref): Int
}

method test01(x: Ref) {
  inhale acc(x.f)
  x.f := 5
  inhale forall i: Int :: {foo(i, x.f)} 0 < i ==> bar(i)

  assume foo(x.f, 5)
  assert bar(x.f)
}

method test02(x: Ref) {
  inhale acc(x.g) && acc(x.g.f)
  x.g.f := 5
  inhale forall i: Int :: {foo(i, x.g.f)} 0 < i ==> bar(i)

  var y: Ref
  inhale y == x.g
  var z: Ref
  z := x.g
  assume foo(y.f, 5)
  assert bar(z.f)
}

method test03(x: Ref) {
  inhale acc(x.h)
  inhale !(null in x.h)
  inhale forall y: Ref :: {y in x.h} y != null ==> bar(num(y))

  var z1: Ref
  assume z1 in x.h
  assert bar(num(z1))

  inhale acc(x.g)
  assume x.g in x.h
  assert bar(num(x.g))

  var z2: Ref
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert bar(num(z2))
}
