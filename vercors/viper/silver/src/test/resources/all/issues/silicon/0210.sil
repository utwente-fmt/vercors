function silver_length(this: Ref): Int
    requires acc(valid__List(this), wildcard)
    ensures result >= 0
{
    (unfolding acc(valid__List(this), wildcard) in
        (variantOfList(this.List__variant) == fn$$List__Nil()) ? 0: 1 + silver_length(this.List__Node__1))
}


method length_iter(list$1: Ref, rd$1: Perm) returns (res$1: Int)
  requires none < rd$1 && rd$1 < write
  requires acc(valid__List(list$1), rd$1)
  //:: ExpectedOutput(postcondition.violated:insufficient.permission)
  ensures acc(valid__List(list$1), rd$1)
{
    var current$1: Ref
    current$1 := list$1

    var counter$1: Int
    counter$1 := 0

    while (true)
        invariant acc(valid__List(current$1), rd$1)
    {
      unfold acc(valid__List(current$1), rd$1)
      var tail$1: Ref
      tail$1 := current$1.List__Node__1
      if (true && variantOfList(current$1.List__variant) == fn$$List__Node()) {
          counter$1 := counter$1 + 1

          current$1 := tail$1
          assert perm(valid__List(current$1)) > none

        } else {
            fold acc(valid__List(current$1), rd$1)
            goto loop_end
        }

    }
    label loop_end

    res$1 := counter$1
  // Emitting folds for outstanding predicates
}

// Emitting data type definitions


// Emitting silver definition for List
domain List {
    unique function fn$$List__Node(): List
    unique function fn$$List__Nil(): List

    function variantOfList(self: Ref): List

    function isList(self: Ref): Bool

    axiom ax_variantOfList {
        forall x: Ref ::
                variantOfList(x) == fn$$List__Node()||
    variantOfList(x) == fn$$List__Nil()
    }

    axiom ax_isList {
        forall x: Ref ::
            isList(x) == (    variantOfList(x) == fn$$List__Node()||
    variantOfList(x) == fn$$List__Nil())
    }
}

field List__variant: Ref
field List__Node__0: Int
field List__Node__1: Ref


predicate valid__List(this: Ref) {
  acc(this.List__variant) &&
  isList(this.List__variant) &&
  (variantOfList(this.List__variant) == fn$$List__Node() ==> (
    acc(this.List__Node__0)&&
    acc(this.List__Node__1)&&
    acc(valid__List(this.List__Node__1))
  )) &&
  (variantOfList(this.List__variant) == fn$$List__Nil() ==> (
    acc(this.List__Node__0)&&
    acc(this.List__Node__1)
  ))
}
