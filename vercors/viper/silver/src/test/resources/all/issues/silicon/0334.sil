field value: Int;
field left: Ref;
field right: Ref;

predicate BTree(self: Ref) {
  acc(self.left) && (self.left != null ==> BTree(self.left)) &&
  acc(self.right) && (self.right != null ==> BTree(self.right)) &&
  acc(self.value)
}

function tree_size(tree: Ref): Int
  requires tree != null ==> BTree(tree)
{
  tree == null ? 0 : (
    unfolding BTree(tree) in 1 + tree_size(tree.left) + tree_size(tree.right)
  )
}

method toArray(tree: Ref)
  requires tree != null
  requires BTree(tree)
{
  unfold BTree(tree)

  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/334/)
  assert
    forall i: Int, b: Int ::
      (tree_size(tree.left) < i && i < b) ==> (tree_size(tree.left) + 1 < b)
}

function tree_size_fix(tree: Ref, i: Int, b: Int): Int
  requires tree != null ==> BTree(tree)
{
  tree == null ? 0 : (
    unfolding BTree(tree) in 1 + tree_size_fix(tree.left, i, b) + tree_size_fix(tree.right, i, b)
  )
}

method toArray_fix(tree: Ref)
  requires tree != null
  requires BTree(tree)
{
  unfold BTree(tree)
  assert
    forall i: Int, b: Int ::
      (tree_size_fix(tree.left, i, b) < i && i < b) ==> (tree_size_fix(tree.left, i, b) + 1 < b)
}
