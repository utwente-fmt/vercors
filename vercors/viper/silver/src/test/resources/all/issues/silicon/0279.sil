field car: Ref

function f(uref: Ref, vref: Ref): Bool
  requires acc(uref.car)
  requires uref != vref ==> acc(vref.car)
  ensures result == true

method mark(g: Set[Ref])
  requires forall n: Ref :: n in g ==> acc(n.car)
{
  assert forall n1: Ref, n2: Ref :: {f(n1,n2)} n1 in g && n2 in g ==> f(n1,n2)
}



function $(ref:Ref): Bool
  requires acc(ref.car)
  ensures result == true

method mark2(g:Set[Ref])
  requires forall n:Ref :: n in g ==> acc(n.car)
{
  assert forall n1:Ref, n2:Ref :: n1 in g && n2 in g ==> $(n1) && $(n2)
}
