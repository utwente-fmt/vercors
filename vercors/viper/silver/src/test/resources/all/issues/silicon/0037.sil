domain Natural {
  function zero(): Natural
  
  function successor(n: Natural): Natural
}

domain List[A] {
  function nil(t: A): List[A]

  function cons(e: A, l: List[A]): List[A]
  
  function drop(n: Natural, l: List[A]): List[A]

  axiom equalNilNil {
    forall l: Natural, r: Natural :: nil(l) == nil(r)
  }
  
  axiom equalConsNil {
    forall x: Natural, xs: List[Natural], t: Natural :: cons(x, xs) != nil(t)
  }
  
  axiom equalNilCons {
    forall t: Natural, y: Natural, ys: List[Natural] :: nil(t) != cons(y, ys)
  }
  
  axiom equalConsCons {
    forall x: Natural, xs: List[Natural], y: Natural, ys: List[Natural] ::
      (cons(x, xs) == cons(y, ys)) == ((x == y) && (xs == ys))
  }

  axiom dropZeroList {
    forall xs: List[A] :: drop(zero(), xs) == xs
  }

  axiom dropSuccessorNil {
    forall n: Natural, t: A :: drop(successor(n), nil(t)) == nil(t)
  }
  
  axiom dropSuccessorCons {
    forall x: Natural, e: A, xs: List[A] ::
      drop(successor(x), cons(e, xs)) == drop(x, xs)
  }
}

domain Any {
}

method property11()
  ensures forall xs: List[Any] :: drop(zero(), xs) == xs
{ }
