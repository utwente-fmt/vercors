field f: Int
field g: Int

method m1(x: Ref)
  //:: ExpectedOutput(consistency.error)
  requires perm(x.f) == perm(x.g)
  //this is fine because perm occurs in inhale/exhale
  requires [perm(x.f) > perm(x.g), true]
{}

function f1(x: Ref): Bool
  //:: ExpectedOutput(consistency.error)
  requires forperm r: Ref [r.f] :: true
  //this is fine because perm occurs in inhale/exhale
  requires [forperm r: Ref [r.f] :: true, true]

method invariant_test(x: Ref) {
  while (true)
    //:: ExpectedOutput(consistency.error)
    invariant perm(x.f) == perm(x.g)
    //this is fine because perm occurs in inhale/exhale
    invariant [perm(x.f) > perm(x.g), true]
  {}
}

method other_tests(x: Ref) {
  var p1: Perm := perm(x.f)
  var b1: Bool := forperm r: Ref [r.f] :: true
  inhale none <= perm(x.g)
  exhale forperm r: Ref [r.f] :: true
}
