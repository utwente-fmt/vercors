field val: Int

domain Array
{
    function loc(a:Array, i:Int): Ref
}

predicate isArray(this: Array)
{
    //:: ExpectedOutput(typechecker.error)
    forall i:Int :: acc(loc(this,i))
}

domain D1
{
    function loc1(): Ref
}

method m1()
{
    //:: ExpectedOutput(typechecker.error)
    inhale acc(loc1())
}

domain D2
{
    function loc2(): Ref
}

method m2()
    //:: ExpectedOutput(typechecker.error)
    requires acc(loc2())
{
}

predicate p()
method m3()
    requires acc(p())
{
}

function f(): Int
method m4()
    //:: ExpectedOutput(typechecker.error)
    requires acc(f())
{
}

