function f(a: Array) : Bool
    requires forall x:Int :: 0 <= x && x < len(a) ==> acc(loc(a, x).val)
{
    forall k: Int :: 0 <= k && k < len(a) ==> g(a)
}

function g(a: Array) : Bool
    requires forall x:Int :: 0 <= x && x < len(a) ==> acc(loc(a, x).val)

// usual Array definition
domain Array {
    function loc(a: Array, i: Int): Ref
    function len(a: Array): Int
    function first(r: Ref): Array
    function second(r: Ref): Int

    axiom all_diff {
        forall a: Array, i: Int :: {loc(a, i)}
        first(loc(a, i)) == a && second(loc(a, i)) == i
    }

    axiom length_nonneg {
        forall a: Array :: len(a) >= 0
    }

}

field val : Int