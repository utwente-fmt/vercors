function sum_fail(l: Ref) : Int
  requires acc(valid__List(l), wildcard)
{
  (unfolding acc(valid__List(l), wildcard) in
    let c == (l.List__Node__0) in (c.Int__v))
}

function sum_ok(l: Ref) : Ref
  requires acc(valid__List(l), wildcard)
{
  (unfolding acc(valid__List(l), wildcard) in
    let c == (l.List__Node__0) in c)
}


method test(l: Ref)
  requires acc(valid__List(l), wildcard)
  requires (unfolding acc(valid__List(l), wildcard) in
                let c == (l.List__Node__0) in (c.Int__v == 0))
{}

field Int__v: Int
field List__Node__0: Ref

predicate valid__List(this: Ref) {
    acc(this.List__Node__0) &&
    acc(this.List__Node__0.Int__v)
}

function func3(x: Int, y: Int, z: Bool): Bool
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures result == (x != y)
{
  let eq_0 == (x == y) in (let something_0 == ((y == x) || (x == x)) in eq_0 && something_0)
}