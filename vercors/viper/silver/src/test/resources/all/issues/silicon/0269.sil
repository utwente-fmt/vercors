//:: IgnoreFile(/carbon/issue/182/)

field Container_value: Ref

method nested_try_finally_fails(out: Ref)
  requires acc(out.Container_value)
{
  var error_0: Ref
  var try_finally_2: Int := 0

  goto try_finally_0

  label handlerMyException
    try_finally_2 := 0
    goto try_finally

  label try_finally
    assert try_finally_2 == 0 // Holds ...
    if (try_finally_2 > 1) {  // ... hence, the then-branch is dead
      var nonDet: Bool
      if (nonDet) {
        goto __end
      }
      exhale false // Holds (since unreachable)
      // In the CFG, there still is an edge from here to try_finally_0
    } elseif (try_finally_2 > 0) {
      goto __end
    } else {
      goto __end
    }

  // Part of a cycle: try_finally_0 -> handlerMyException -> try_finally -> try_finally_0
  label try_finally_0
    // Loop invariant does not provide permissions to access out.Container_value
    //:: ExpectedOutput(assignment.failed:insufficient.permission)
    out.Container_value := null
    goto handlerMyException

  label __end
}

method nested_try_finally_fixed(out: Ref)
  requires acc(out.Container_value)
{
  var error_0: Ref
  var try_finally_2: Int := 0

  goto try_finally_0

  label handlerMyException
    try_finally_2 := 0
    goto try_finally

  label try_finally
    assert try_finally_2 == 0
    if (try_finally_2 > 1) {
      var nonDet: Bool
      if (nonDet) {
        goto __end
      }
      exhale false
      goto __end /* FIX: No cycle in the CFG any more */
    } elseif (try_finally_2 > 0) {
      goto __end
    } else {
      goto __end
    }

  label try_finally_0
    // Not part of a loop, invariant is not needed, field access verifies
    out.Container_value := null
    goto handlerMyException

  label __end
}



field f: Int

method test(x: Ref) returns (b: Bool)
  requires acc(x.f)
{
  b := false

  label pseudo_loop_head
    invariant true

    assert !b
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert acc(x.f)

    if (b) {
      // Dead, but yields a cycle in the CFG
      goto pseudo_loop_head
    }
}
