field data: Int
field next: Ref

predicate LL(x: Ref, i: Int) {
     acc(x.data, 1/2)
  && acc(x.next)
  && acc(x.next.data, 1/2)
  && acc(LL(x.next, i + 1))
  && (unfolding acc(LL(x.next, i + 1)) in x.next.data == i + 1)
  && x.data == i
  && unfolding acc(LL(x.next, i + 1)) in true
}

method test01(z: Ref) {
  inhale acc(LL(z, 0))

  assert unfolding acc(LL(z, 0)) in z.next.data == 1
}

method test02(z: Ref) {
  inhale acc(LL(z, 0))

  unfold acc(LL(z, 0))
  assert z.next.data == 1
}

method test03(z: Ref) {
  inhale acc(LL(z, 0))

  assert unfolding acc(LL(z, 0)) in
         unfolding acc(LL(z.next, 1)) in
         unfolding acc(LL(z.next.next, 2)) in
         unfolding acc(LL(z.next.next.next, 3)) in
         z.next.next.next.next.data == 4

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

predicate LL2(x: Ref, i: Int) {
     acc(x.data, 1/2)
  && acc(x.next)
  && acc(x.next.data, 1/2)
  && acc(LL2(x.next, i + 1))
  && x.data == i
  && unfolding acc(LL2(x.next, i + 1)) in true
}

method test04(z: Ref) {
  inhale acc(LL2(z, 0))

  assert unfolding acc(LL2(z, 0)) in z.next.data == 1
}

method test05(z: Ref) {
  inhale acc(LL2(z, 0))

  unfold acc(LL2(z, 0))
  assert z.next.data == 1
}
