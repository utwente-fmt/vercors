predicate P() { true }

method test01() {
  inhale acc(P())

  while (true)
    invariant true
    invariant acc(P())
  {
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
  }
}

/* Originally reported code */

domain Process {
  function p_single(n: Int): Process
}

field Ref__y: Int

predicate Ref__hist_idle(diz: Ref, ref: Ref, p: Process)
{ true }

method Ref__do_incr_loop(diz: Ref, n: Int, k: Int, h: Ref)
  requires diz != null
  requires n >= 0
  requires k >= 0
  //requires acc(diz.Ref__y, write)
  requires h != null
  requires acc(Ref__hist_idle(h, diz, p_single(k)), write)
{
  var i: Int
  i := 0
  while (i < n)
    invariant k >= 0
    invariant 0 <= i
    invariant i <= n
    //invariant acc(diz.Ref__y, write)
    invariant h != null
    invariant acc(Ref__hist_idle(h, diz, p_single(k + i)), write)
  {
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
  }
}
