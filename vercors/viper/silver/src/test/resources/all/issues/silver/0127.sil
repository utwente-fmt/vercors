predicate F1(r: Ref) {true}

function F2(r: Ref) : Bool {true}

method F3(r: Ref) returns (res: Bool)

function idf(r: Ref): Ref {r}

method idm(r: Ref) returns (res: Ref)
{
        res := r
}

predicate idp(r: Ref) {true}

method main1(r: Ref)
{
        inhale F1(r) 
}

method main2(r: Ref)
{
        inhale F2(r) 
}

method main3(r: Ref)
{
        inhale acc(F1(r)) 
}

method main4(r: Ref)
        requires acc(F1(r))
{
        unfold  acc(F1(r))
}

method main5(r: Ref)
        requires F1(r)
{
        unfold  F1(r)
}

method main6(r: Ref)
{
        var tmp : Bool
        tmp := F2(r)
}

method main(r: Ref)
{
        var tmp : Bool
        tmp := F3(idf(r)) 
}

