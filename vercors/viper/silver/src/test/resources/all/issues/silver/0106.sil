field f : Int
field g: Int

predicate p1(x: Ref)
{
	//:: ExpectedOutput(consistency.error)
	perm(x.f) == perm(x.g)
}

predicate p2(x: Ref)
{
	//:: ExpectedOutput(consistency.error)
	forperm r: Ref [r.f] :: false
}

predicate p3(x: Ref)
{
	//:: ExpectedOutput(consistency.error)
	[forperm r: Ref [r.f] :: false, true]
}



function f1(x: Ref): Bool
{
	//:: ExpectedOutput(consistency.error)
	perm(x.f) == perm(x.g)
}

function f2(x: Ref): Bool
{
	//:: ExpectedOutput(consistency.error)
	forperm r: Ref [r.f] :: false
}

function f3(x: Ref): Bool
{
	//:: ExpectedOutput(consistency.error)
	[true, perm(x.f) == perm(x.g)]
}
