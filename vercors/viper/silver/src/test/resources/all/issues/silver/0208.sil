define inRangeUpTo(i, k) 0 < i && i <= k

method test(i:Int, j:Int, m:Int) {
  assume i-1 == j
  assume inRangeUpTo(m,j)
  assert inRangeUpTo(m,i-1)
}



domain Foo {
  function foo(i: Int, h: Int): Bool
  axiom foo_ax { forall i: Int :: foo(i, i) }
}

define M(a) forall i: Int :: foo(a, i)

method test02(i: Int) {
  assert foo(i, i)
  assert forall j: Int :: foo(j, j)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert M(i)
}

method test03() {
  assume forall i: Int :: M(i)
  assume M(1)
  assume forall i: Int :: M(i)
}

predicate test05() {
     (forall i: Int :: M(i))
  && M(1)
  && (forall i: Int :: M(i))
}



define N(a) forall i: Int :: boo(a, i)

domain test04 {
  function boo(i: Int, h: Int): Bool

  axiom ax04a {
       (forall i: Int :: N(i))
    && N(1)
    && (forall i: Int :: N(i))
  }
}
