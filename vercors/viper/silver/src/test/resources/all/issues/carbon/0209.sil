domain TrClo {
    function exists_path(EG:Set[Int], start:Ref, end:Ref): Bool 
}

field next:Ref

function $$(refs:Set[Ref]): Set[Int]
    requires forall n:Ref :: n in refs ==> acc(n.next)

method append(g:Set[Ref], x:Ref) 
    requires forall n:Ref :: n in g ==> acc(n.next)
    requires x in g 
    requires forall n:Ref :: n in g ==> exists_path($$(g),x,n) 
{
    label l0

    assert $$(g) == old[l0]($$(g))
    assert $$(g) == old($$(g))

    var old_g:Set[Int] := $$(g)
    assert old_g == old[l0]($$(g))
    assert old_g == old($$(g))

    x.next := null
    assert old_g == old[l0]($$(g))
    assert old_g == old($$(g))
}