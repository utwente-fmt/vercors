field f: Int
field g: Ref

predicate P(x: Ref) {
  acc(x.g) && acc(Q(x.g)) && unfolding acc(Q(x.g)) in x.g.f != 0
}

predicate Q(x: Ref) {
  acc(x.f)
}

method test01(x: Ref)
  requires acc(P(x))
{
  assert unfolding acc(P(x)) in unfolding acc(Q(x.g)) in x.g.f != 0
}



predicate Rec(x: Ref) {
  acc(x.f) && acc(x.g) && (x.g != null ==> acc(Rec(x.g)) && unfolding acc(Rec(x.g)) in x.f < x.g.f)
}

method test02(x: Ref)
  requires acc(Rec(x))
{
  unfold acc(Rec(x))
  assume x.g != null
  unfold acc(Rec(x.g))

  assert x.f < x.g.f
}



predicate MRecA(x: Ref) {
  acc(x.f) && acc(x.g) && (x.g != null ==> acc(MRecB(x.g)) && unfolding acc(MRecB(x.g)) in x.f < x.g.f)
}

predicate MRecB(x: Ref) {
  acc(x.f) && acc(x.g) && (x.g != null ==> acc(MRecA(x.g)) && unfolding acc(MRecA(x.g)) in x.f < x.g.f)
}

method test03(x: Ref)
  requires acc(MRecA(x))
{
  unfold acc(MRecA(x))
  assume x.g != null
  unfold acc(MRecB(x.g))

  assert x.f < x.g.f
}
