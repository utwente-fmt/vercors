field parent : Ref
field rank : Int

predicate uf_bank(b:Set[Ref])
{ (forall l:Ref :: {l in b} l in b ==>
    acc(l.parent) && acc(l.rank) && 0 <= l.rank)
  && true
}

method bad(b:Set[Ref],l:Ref)
  requires uf_bank(b)
  requires l in b
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures false
{
  unfold uf_bank(b);
  fold uf_bank(b);
  unfold uf_bank(b);
  assert true
}
