//:: IgnoreFile(/carbon/issue/187/)

function f(a: Int, b: Int): Bool

function m(a: Int): Int
  requires forall b: Int :: {f(a, b)} f(a,b)
{ 14 }

method client() {
  //:: ExpectedOutput(application.precondition:assertion.false)
  var a: Int := m(3 > 2 ? 3 : 2)
}



//predicate P(a: Int) {
//  forall b: Int :: {f(a, b)} f(a,b)
//}
//
//function fun1(a: Int): Bool
//  requires P(a)
//  requires unfolding P(a) in true
//
//method client2(x: Int, y: Int) {
//  inhale P(x < y ? -1 : 1)
//  assume fun1(x < y ? -1 : 1)
//}
