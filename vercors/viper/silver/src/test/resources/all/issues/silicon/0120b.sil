domain Type {
  unique function A(): Type
  unique function B(): Type

  function typeOf(self: Ref): Type

  axiom ax_typeOfChoices {
    forall x: Ref :: (typeOf(x) == A() || typeOf(x) == B())
  }
}


field a: Ref
field val: Int
field next: Ref

predicate node(this: Ref) {
  acc(this.val) &&
  acc(this.next) &&
  (typeOf(this.next) == A() ==> (
    acc(this.next.a, write) &&
    acc(node(this.next.a))
  ))
}

function length(this: Ref): Int
  requires acc(node(this), write)
  ensures result >= 1
{
  (unfolding acc(node(this), write) in
    (typeOf(this.next) == B()) ? 1 : 1 + length(this.next.a)
  )
}

method prepend(tail: Ref, v: Int) returns (res: Ref)
  requires acc(node(tail))
  ensures acc(node(res))

  // this verifies if the unfold and fold in lines 57 and 58 are removed
  ensures length(res) == old(length(tail)) + 1
{
  var tmp: Ref


  res := new(val, next)
  res.val := v

  tmp := new(a)
  tmp.a := tail
  assume typeOf(tmp) == A()

  res.next := tmp

  unfold acc(node(tail))
  fold acc(node(tail))

  fold acc(node(res))
}