method client(arr: Ref){
	test01(arr)
}

method test01(arr: Ref)
 requires forall p: Int :: true ==> acc(loc(arr, p).val, none)
 ensures  forall p: Int :: true ==> acc(loc(arr, p).val, none)
{}

method test02(arr: Ref)
 ensures forall p: Int :: true ==> acc(loc(arr, p).val, none)
{}

method test03(arr: Ref)
 requires forall p: Int :: true ==> acc(loc(arr, p).val, none)
 //:: ExpectedOutput(postcondition.violated:assertion.false)
 ensures  forall p: Int :: true ==> loc(arr, p) != null
{}

//method test08(arr: Ref) {
// assert forall p: Int :: true ==> acc(null.val, none)
//}
//
//method test09(xs: Seq[Ref]) {
//  inhale 0 < |xs|
//  assert forall p: Int :: true ==> acc(xs[0].val, none)
//}

method test04(arr: Ref) {
 inhale acc(arr.val, none)
 //:: ExpectedOutput(assert.failed:assertion.false)
 assert arr != null
}

method test05(arr: Ref) {
 exhale acc(arr.val, none)
}

method test06(arr: Ref) {
 assert perm(arr.val) == none
}

method test07(arr: Ref) {
  assert perm(null.val) == none
}

/* Encoding of arrays */

field val: Int

domain IArray {
 function loc(a: Ref, i: Int): Ref
 function len(a: Ref): Int
 function first(r: Ref): Ref
 function second(r: Ref): Int

 axiom all_diff {
   forall a: Ref, i: Int :: {loc(a, i)}
     first(loc(a, i)) == a && second(loc(a, i)) == i
 }

 axiom length_nonneg {
   forall a: Ref :: len(a) >= 0
 }
}
