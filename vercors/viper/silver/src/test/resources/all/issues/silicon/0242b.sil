domain Node {
    function default_node(): Node
}

domain Graph {
    function lookup(ref: Ref): Node
}

field m: Int
field l: Ref
field r: Ref

define GRAPH(nodes)
       !(null in nodes)
    && (forall n: Ref :: n in nodes ==> acc(n.l))
    && (forall n: Ref :: n in nodes ==> acc(n.r))
    && (forall n: Ref :: n in nodes ==> acc(n.m))
    && (forall n: Ref :: {n.l in nodes}{n in nodes, n.l}
                n in nodes && n.l != null ==> n.l in nodes)
    && (forall n: Ref :: {n.r in nodes}{n in nodes, n.r}
                n in nodes && n.r != null ==> n.r in nodes)

function purify_node(n: Ref): Node
    requires acc(n.m)
    requires acc(n.l)
    requires acc(n.r)
    ensures result == default_node()

method test()
{
    var vroot: Ref; vroot := new(*)
    vroot.l := vroot
    vroot.r := vroot

    var root: Ref; root := new(*)
    root.l := vroot
    root.r := vroot

    var graph: Set[Ref] := Set(vroot, root)


    assert GRAPH(graph)
    assert root in graph
    assume forall n: Ref :: n in graph ==> lookup(n) == purify_node(n)

    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
}
