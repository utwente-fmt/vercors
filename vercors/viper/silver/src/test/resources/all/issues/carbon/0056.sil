// chaliceSuite/examples/dining-philosophers.chalice
domain GlobalKPermission {

  unique function globalK$(): Perm

  axiom globalKReadOnly {
    (globalK$() > none) && (write > globalK$())
  }
}

field old$methodPermission: Perm

field joinable$: Bool

field Philosopherleft$: Ref

field Philosopherright$: Ref

field par$Philosopherinit$this$_1: Ref

field par$Philosopherinit$k$: Perm

field par$Philosopherinit$f1: Ref

field par$Philosopherinit$f2: Ref

field par$Philosopherrun$this$_2: Ref

field par$Philosopherrun$k$_1: Perm

field par$Programmain$this$_8: Ref

field par$Programmain$k$_2: Perm

function PhilosophergetLeft$(this$_3: Ref): Ref
  requires this$_3 != null
  requires acc(Philosophervalid$(this$_3), wildcard)
  ensures result != null
{
  (unfolding acc(Philosophervalid$(this$_3), wildcard) in this$_3.Philosopherleft$)
}

function PhilosophergetRight$(this$_4: Ref): Ref
  requires this$_4 != null
  requires acc(Philosophervalid$(this$_4), wildcard)
  ensures result != null
{
  (unfolding acc(Philosophervalid$(this$_4), wildcard) in this$_4.Philosopherright$)
}

predicate Philosopher$MonitorInvariant(this$: Ref) {
  true
}

predicate Philosophervalid$(this$_5: Ref) {
  acc(this$_5.Philosopherleft$, write) && acc(this$_5.Philosopherright$, write) && (this$_5.Philosopherleft$ != null) && (this$_5.Philosopherright$ != null)
}

predicate Fork$MonitorInvariant(this$_6: Ref) {
  true && true
}

predicate Program$MonitorInvariant(this$_7: Ref) {
  true
}

method Philosopherinit$(this$_1: Ref, k$: Perm, f1: Ref, f2: Ref)
  requires this$_1 != null
  requires k$ > none
  requires write > k$
  requires (f1 != null) && (f2 != null)
  requires acc(this$_1.Philosopherright$, write) && (acc(this$_1.Philosopherleft$, write) && true)
  ensures acc(Philosophervalid$(this$_1), write)
  ensures (PhilosophergetLeft$(this$_1) == f1) && (PhilosophergetRight$(this$_1) == f2)
{
  var n$: Ref
  var a$: Ref
  var b$: Ref
  var c$: Ref
  this$_1.Philosopherleft$ := f1
  this$_1.Philosopherright$ := f2
  fold acc(Philosophervalid$(this$_1), write)
}

method Philosopherrun$(this$_2: Ref, k$_1: Perm)
  requires this$_2 != null
  requires k$_1 > none
  requires write > k$_1
  requires acc(Philosophervalid$(this$_2), write)
  requires true
  requires true
  requires true
  requires true
  requires true
{
  var n$_1: Ref
  var a$_1: Ref
  var b$_1: Ref
  var c$_1: Ref
  while (true)
    invariant acc(Philosophervalid$(this$_2), write) && true && true && true && true && true
  {
    unfold acc(Philosophervalid$(this$_2), write)
    inhale acc(Fork$MonitorInvariant(this$_2.Philosopherleft$), write)
    unfold acc(Fork$MonitorInvariant(this$_2.Philosopherleft$), write)
    inhale acc(Fork$MonitorInvariant(this$_2.Philosopherright$), write)
    unfold acc(Fork$MonitorInvariant(this$_2.Philosopherright$), write)
    fold acc(Fork$MonitorInvariant(this$_2.Philosopherleft$), write)
    exhale acc(Fork$MonitorInvariant(this$_2.Philosopherleft$), write)
    fold acc(Fork$MonitorInvariant(this$_2.Philosopherright$), write)
    exhale acc(Fork$MonitorInvariant(this$_2.Philosopherright$), write)
    fold acc(Philosophervalid$(this$_2), write)
  }
}

method Programmain$(this$_8: Ref, k$_2: Perm)
  requires this$_8 != null
  requires k$_2 > none
  requires write > k$_2
{
  var n$_2: Ref
  var a$_2: Ref
  var b$_2: Ref
  var c$_2: Ref
  var f1: Ref
  var f2: Ref
  var f3: Ref
  var aristotle: Ref
  var newK$: Perm
  var plato: Ref
  var newK$_1: Perm
  var kant: Ref
  var newK$_2: Perm
  var newK$_3: Perm
  var tk0: Ref
  var newK$_4: Perm
  var tk1: Ref
  var newK$_5: Perm
  var tk2: Ref
  f1 := new(old$methodPermission, joinable$, Philosopherleft$, Philosopherright$, par$Philosopherinit$this$_1, par$Philosopherinit$k$, par$Philosopherinit$f1, par$Philosopherinit$f2, par$Philosopherrun$this$_2, par$Philosopherrun$k$_1, par$Programmain$this$_8, par$Programmain$k$_2)
  f1.Philosopherleft$ := null
  f1.Philosopherright$ := null
  f1.par$Philosopherinit$this$_1 := null
  f1.par$Philosopherinit$f1 := null
  f1.par$Philosopherinit$f2 := null
  f1.par$Philosopherrun$this$_2 := null
  f1.par$Programmain$this$_8 := null
  f2 := new(old$methodPermission, joinable$, Philosopherleft$, Philosopherright$, par$Philosopherinit$this$_1, par$Philosopherinit$k$, par$Philosopherinit$f1, par$Philosopherinit$f2, par$Philosopherrun$this$_2, par$Philosopherrun$k$_1, par$Programmain$this$_8, par$Programmain$k$_2)
  f2.Philosopherleft$ := null
  f2.Philosopherright$ := null
  f2.par$Philosopherinit$this$_1 := null
  f2.par$Philosopherinit$f1 := null
  f2.par$Philosopherinit$f2 := null
  f2.par$Philosopherrun$this$_2 := null
  f2.par$Programmain$this$_8 := null
  f3 := new(old$methodPermission, joinable$, Philosopherleft$, Philosopherright$, par$Philosopherinit$this$_1, par$Philosopherinit$k$, par$Philosopherinit$f1, par$Philosopherinit$f2, par$Philosopherrun$this$_2, par$Philosopherrun$k$_1, par$Programmain$this$_8, par$Programmain$k$_2)
  f3.Philosopherleft$ := null
  f3.Philosopherright$ := null
  f3.par$Philosopherinit$this$_1 := null
  f3.par$Philosopherinit$f1 := null
  f3.par$Philosopherinit$f2 := null
  f3.par$Philosopherrun$this$_2 := null
  f3.par$Programmain$this$_8 := null
  fold acc(Fork$MonitorInvariant(f1), write)
  exhale acc(Fork$MonitorInvariant(f1), write)
  fold acc(Fork$MonitorInvariant(f2), write)
  exhale acc(Fork$MonitorInvariant(f2), write)
  fold acc(Fork$MonitorInvariant(f3), write)
  exhale acc(Fork$MonitorInvariant(f3), write)
  aristotle := new(old$methodPermission, joinable$, Philosopherleft$, Philosopherright$, par$Philosopherinit$this$_1, par$Philosopherinit$k$, par$Philosopherinit$f1, par$Philosopherinit$f2, par$Philosopherrun$this$_2, par$Philosopherrun$k$_1, par$Programmain$this$_8, par$Programmain$k$_2)
  aristotle.Philosopherleft$ := null
  aristotle.Philosopherright$ := null
  aristotle.par$Philosopherinit$this$_1 := null
  aristotle.par$Philosopherinit$f1 := null
  aristotle.par$Philosopherinit$f2 := null
  aristotle.par$Philosopherrun$this$_2 := null
  aristotle.par$Programmain$this$_8 := null
  fresh newK$
  constraining(newK$) {
    Philosopherinit$(aristotle, newK$, f1, f2)
  }
  plato := new(old$methodPermission, joinable$, Philosopherleft$, Philosopherright$, par$Philosopherinit$this$_1, par$Philosopherinit$k$, par$Philosopherinit$f1, par$Philosopherinit$f2, par$Philosopherrun$this$_2, par$Philosopherrun$k$_1, par$Programmain$this$_8, par$Programmain$k$_2)
  plato.Philosopherleft$ := null
  plato.Philosopherright$ := null
  plato.par$Philosopherinit$this$_1 := null
  plato.par$Philosopherinit$f1 := null
  plato.par$Philosopherinit$f2 := null
  plato.par$Philosopherrun$this$_2 := null
  plato.par$Programmain$this$_8 := null
  fresh newK$_1
  constraining(newK$_1) {
    Philosopherinit$(plato, newK$_1, f2, f3)
  }
  kant := new(old$methodPermission, joinable$, Philosopherleft$, Philosopherright$, par$Philosopherinit$this$_1, par$Philosopherinit$k$, par$Philosopherinit$f1, par$Philosopherinit$f2, par$Philosopherrun$this$_2, par$Philosopherrun$k$_1, par$Programmain$this$_8, par$Programmain$k$_2)
  kant.Philosopherleft$ := null
  kant.Philosopherright$ := null
  kant.par$Philosopherinit$this$_1 := null
  kant.par$Philosopherinit$f1 := null
  kant.par$Philosopherinit$f2 := null
  kant.par$Philosopherrun$this$_2 := null
  kant.par$Programmain$this$_8 := null
  fresh newK$_2
  constraining(newK$_2) {
    Philosopherinit$(kant, newK$_2, f1, f3)
  }
  assert true
  fresh newK$_3
  constraining(newK$_3) {
    tk0 := new(old$methodPermission, joinable$, Philosopherleft$, Philosopherright$, par$Philosopherinit$this$_1, par$Philosopherinit$k$, par$Philosopherinit$f1, par$Philosopherinit$f2, par$Philosopherrun$this$_2, par$Philosopherrun$k$_1, par$Programmain$this$_8, par$Programmain$k$_2)
    tk0.Philosopherleft$ := null
    tk0.Philosopherright$ := null
    tk0.par$Philosopherinit$this$_1 := null
    tk0.par$Philosopherinit$f1 := null
    tk0.par$Philosopherinit$f2 := null
    tk0.par$Philosopherrun$this$_2 := null
    tk0.par$Programmain$this$_8 := null
    tk0.joinable$ := true
    tk0.old$methodPermission := newK$_3
    tk0.par$Philosopherrun$this$_2 := aristotle
    tk0.par$Philosopherrun$k$_1 := newK$_3
    exhale true && (aristotle != null) && (newK$_3 > none) && (write > newK$_3) && acc(Philosophervalid$(aristotle), write) && true && true && true && true && true
  }
  fresh newK$_4
  constraining(newK$_4) {
    tk1 := new(old$methodPermission, joinable$, Philosopherleft$, Philosopherright$, par$Philosopherinit$this$_1, par$Philosopherinit$k$, par$Philosopherinit$f1, par$Philosopherinit$f2, par$Philosopherrun$this$_2, par$Philosopherrun$k$_1, par$Programmain$this$_8, par$Programmain$k$_2)
    tk1.Philosopherleft$ := null
    tk1.Philosopherright$ := null
    tk1.par$Philosopherinit$this$_1 := null
    tk1.par$Philosopherinit$f1 := null
    tk1.par$Philosopherinit$f2 := null
    tk1.par$Philosopherrun$this$_2 := null
    tk1.par$Programmain$this$_8 := null
    tk1.joinable$ := true
    tk1.old$methodPermission := newK$_4
    tk1.par$Philosopherrun$this$_2 := plato
    tk1.par$Philosopherrun$k$_1 := newK$_4
    exhale true && (plato != null) && (newK$_4 > none) && (write > newK$_4) && acc(Philosophervalid$(plato), write) && true && true && true && true && true
  }
  fresh newK$_5
  constraining(newK$_5) {
    tk2 := new(old$methodPermission, joinable$, Philosopherleft$, Philosopherright$, par$Philosopherinit$this$_1, par$Philosopherinit$k$, par$Philosopherinit$f1, par$Philosopherinit$f2, par$Philosopherrun$this$_2, par$Philosopherrun$k$_1, par$Programmain$this$_8, par$Programmain$k$_2)
    tk2.Philosopherleft$ := null
    tk2.Philosopherright$ := null
    tk2.par$Philosopherinit$this$_1 := null
    tk2.par$Philosopherinit$f1 := null
    tk2.par$Philosopherinit$f2 := null
    tk2.par$Philosopherrun$this$_2 := null
    tk2.par$Programmain$this$_8 := null
    tk2.joinable$ := true
    tk2.old$methodPermission := newK$_5
    tk2.par$Philosopherrun$this$_2 := kant
    tk2.par$Philosopherrun$k$_1 := newK$_5
    exhale true && (kant != null) && (newK$_5 > none) && (write > newK$_5) && acc(Philosophervalid$(kant), write) && true && true && true && true && true
  }
  assert tk0.joinable$
  inhale true
  tk0.joinable$ := false
  assert tk1.joinable$
  inhale true
  tk1.joinable$ := false
  assert tk2.joinable$
  inhale true
  tk2.joinable$ := false
}
