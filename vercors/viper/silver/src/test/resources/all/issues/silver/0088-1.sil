field Cellx: Int

method Cellvoid(this: Ref, k: Perm)
  requires this != null
  requires k > none
  requires write > k
  requires acc(this.Cellx, k)
  ensures acc(this.Cellx, k)
{
}

method Celltest1(this: Ref, k: Perm)
  requires this != null
  requires k > none
  requires write > k
  requires acc(this.Cellx, k) && (this.Cellx == 1)
  ensures acc(this.Cellx, k) && (this.Cellx == 1)
{
  var n$_3: Ref
  var a$_3: Ref
  var b$_3: Ref
  var c$_3: Ref
  var i: Int
  var newK1: Perm
  var newK2: Perm
  i := 0
  fresh newK1
  constraining(newK1) {
    while (i < 1000)
      invariant write > newK1
      invariant newK1 > none
      invariant acc(this.Cellx, newK1)
    {
      fresh newK2
      constraining(newK2) {
        Cellvoid(this, newK2)
      }
      i := i + 1
    }
  }
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
