domain Array {
  function loc(a: Array, i: Int): Ref
  function len(a: Array): Int
  function first(r: Ref): Array
  function second(r: Ref): Int

  axiom all_diff {
    forall a: Array, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: Array :: len(a) >= 0
  }
}

field val : Int


function dummy(j:Int) : Bool
{
  true
}


method qpTest(a: Array, j:Int)
  requires forall i:Int :: {dummy(i)} -2 <= i && i< 8 ==> acc(loc(a,i+2).val)
  requires 0 <= j && j < 10
{
  assume dummy(j-2)
  loc(a,j).val := 5
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/202/)
  assert exists k:Int :: dummy(k-2) && 0 <= k 
}

domain test{
  function other_dummy(j:Int) : Bool
}

method qpTestTwo(a: Array, j:Int)
  requires forall i:Int :: {other_dummy(i)} -2 <= i && i< 8 ==> acc(loc(a,i+2).val)
  requires 0 <= j && j < 10
{
  assume other_dummy(j-2)
  loc(a,j).val := 5
  assert exists k:Int :: other_dummy(k-2) ==> 0 <= k 
}