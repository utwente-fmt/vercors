// oldC2SCases/LinkedList-NoFunctions.chalice
/*
It seems that the problem is caused by short-circuit evaluation of `&&`
operator when doing definedness check of the exhale.
`checkDefinednessImpl` function in the file
`src/main/scala/viper/carbon/modules/impls/DefaultExpModule.scala`:

1.  checks the left hand side for well-definedness
2.  converts left hand side to pure expression
3.  if purified left hand side may be true, then checks the
    well-definedness of the right hand side.

The problem is that purification of unfolding expression is not defined. It cannot
be simply translated to true, because of short-circuit evaluation:

  // Here the error should be assert false, and if we replaced unfolding
  // with true, we would get insufficient permission.
  exhale (unfolding acc(P(this), write) in false) && this.x == 0

*/
predicate P(this: Ref) {
  true
}

field x: Int

method test0(this: Ref)
  requires acc(P(this), write)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  //:: MissingOutput(postcondition.violated:assertion.false, /Silicon/issue/34/)
  ensures (unfolding acc(P(this), write) in true) && this.x == 0
{
}

method test1(this: Ref)
{
  inhale acc(P(this), write) && this != null
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale (unfolding acc(P(this), write) in true) && this.x == 0
}

method test1Reference(this: Ref)
{
  inhale this != null
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale true && this.x == 0
}

method test2(this: Ref)
{
  inhale acc(P(this), write)
  //:: ExpectedOutput(exhale.failed:assertion.false)
  exhale (unfolding acc(P(this), write) in false) && this.x == 0
}

method test2Reference(this: Ref)
{
  inhale this != null
  //:: ExpectedOutput(exhale.failed:assertion.false)
  exhale false && this.x == 0
}

field y: Int
predicate V(this: Ref) {
  acc(this.y, write) && this.y == 1
}

method test3(this: Ref)
{
  inhale acc(V(this), write)
  //:: ExpectedOutput(exhale.failed:assertion.false)
  exhale (unfolding acc(V(this), write) in this.y == 2) && this.x == 0
}

method test4(this: Ref)
{
  inhale acc(V(this), write)
  //:: ExpectedOutput(exhale.failed:assertion.false)
  exhale (unfolding acc(V(this), write) in this.y) == 2 && this.x == 0
}
