/* See commit 624e1973d61c */

domain GlobalKPermission {

  unique function globalK$(): Perm

  axiom globalKReadOnly {
    (globalK$() > none) && (write > globalK$())
  }
}

field joinable$: Bool
field f: Int
field parX: Ref
field parK: Perm

predicate P(this: Ref) {
  acc(this.f, write)
}

method TestunfoldVRd$(this: Ref, k: Perm)
  requires this != null
  requires k > none
  requires write > k
  requires acc(P(this), write)
{
  var tk1: Ref

  unfold acc(P(this), k)

  tk1 := new(joinable$, f, parX, parK)
  tk1.joinable$ := true
  tk1.parX := this
  tk1.parK := k

  inhale acc(tk1.parX.f, tk1.parK)

  tk1.joinable$ := false

  fold acc(P(this), k)
}
