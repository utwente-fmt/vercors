// chaliceSuite/regressions/internal-bug-10.chalice
field Nodenext$: Ref

field Nodevalue$: Int

function Nodesize$(this$_3: Ref): Int
  requires this$_3 != null
  requires acc(Nodevalid$(this$_3), wildcard)
  ensures result > 0
{
  (unfolding acc(Nodevalid$(this$_3), wildcard) in (this$_3.Nodenext$ != null ? 1 + Nodesize$(this$_3.Nodenext$) : 1))
}

function Nodecontains$(this$_4: Ref, i: Int): Bool
  requires this$_4 != null
  requires acc(Nodevalid$(this$_4), wildcard)
{
  (unfolding acc(Nodevalid$(this$_4), wildcard) in (i == this$_4.Nodevalue$) || (this$_4.Nodenext$ != null) && Nodecontains$(this$_4.Nodenext$, i))
}

predicate Nodevalid$(this$_5: Ref) {
  acc(this$_5.Nodenext$, write) && acc(this$_5.Nodevalue$, write) && ((this$_5.Nodenext$ != null) ==> acc(Nodevalid$(this$_5.Nodenext$), write))
}

method Nodeinit$(this: Ref, k$: Perm, v: Int)
  requires this != null
  requires k$ > none
  requires write > k$
  requires acc(this.Nodenext$, write) && acc(this.Nodevalue$, write)
  ensures acc(Nodevalid$(this), write) && (Nodesize$(this) == 1) && (forall y: Int :: true ==> (Nodecontains$(this, y) == (y == v)))
{
  this.Nodenext$ := null
  this.Nodevalue$ := v
  fold acc(Nodevalid$(this), write)
}

method Nodeadd$(this: Ref, k$_1: Perm, x: Int)
  requires this != null
  requires k$_1 > none
  requires write > k$_1
  requires acc(Nodevalid$(this), write)
  ensures acc(Nodevalid$(this), write)
  ensures Nodesize$(this) == old(Nodesize$(this)) + 1
  ensures (forall y: Int :: true ==> (Nodecontains$(this, y) == old(Nodecontains$(this, y)) || (x == y)))
{
  var n$_1: Ref
  var n: Ref
  var newK$: Perm
  var newK$_1: Perm
  unfold acc(Nodevalid$(this), write)
  if (this.Nodenext$ == null) {
    n$_1 := new(Nodenext$, Nodevalue$)
    n$_1.Nodenext$ := null
    n := n$_1
    fresh newK$
    constraining(newK$) {
      Nodeinit$(n, newK$, x)
    }
    this.Nodenext$ := n
  } else {
    fresh newK$_1
    constraining(newK$_1) {
      Nodeadd$(this.Nodenext$, newK$_1, x)
    }
  }
  fold acc(Nodevalid$(this), write)
}
