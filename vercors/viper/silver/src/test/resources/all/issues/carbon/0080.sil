field f: Int

predicate valid(self: Ref) {
    acc(self.f)
}

function readValid(self:Ref) : Int
  requires acc(valid(self),1/4)
{
  unfolding acc(valid(self),1/4) in self.f
}

method read(a: Ref)
    requires acc(valid(a), write)
    ensures acc(valid(a), write)
{
    assert readValid(a) >= readValid(a)
    assert perm(valid(a)) == write
    assert a!=null ==> perm(a.f) == none

    unfold acc(valid(a), 1/3)

    assert perm(valid(a)) == 2/3
    assert perm(a.f) == 1/3
    assert a.f == readValid(a)

    unfold acc(valid(a), 2/3)

    assert perm(valid(a)) == none
    assert perm(a.f) == write
    a.f := a.f + 1
    assert a.f == old(readValid(a)) + 1

    fold acc(valid(a), 1/3)

    assert perm(valid(a)) == 1/3
    assert perm(a.f) == 2/3
    assert a.f == readValid(a)
    assert readValid(a) == old(readValid(a)) + 1

    fold acc(valid(a), 2/3)

    assert perm(valid(a)) == write
    assert perm(a.f) == none
    assert readValid(a) == old(readValid(a)) + 1
    assert old(perm(a.f)) == none

    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert a.f == readValid(a)
}
