domain Array {
  function loc(a: Array, i: Int): Ref
  function len(a: Array): Int
  function first(r: Ref): Array
  function second(r: Ref): Int

  axiom all_diff {
    forall a: Array, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: Array :: len(a) >= 0
  }
}

field val : Int

  method havocArray() returns (a:Array)
  method havocInt() returns (i:Int)

  method setToArray(vals:Set[Int]) returns (a:Array)
    ensures len(a) == |vals|
    ensures forall i:Int :: 0 <= i && i< len(a) ==> acc(loc(a,i).val)
    ensures forall i:Int :: i in vals ==> exists k: Int :: 0 <= k && k < len(a) && loc(a,k).val == i
    {
      // model allocating an array of size |vals|
      a := havocArray()
      assume len(a) == |vals|
      inhale forall i:Int :: 0 <= i && i< len(a) ==> acc(loc(a,i).val)

      var s : Set[Int] := vals
      var element : Int; var j : Int := 0;

      while (|s| > 0)
      invariant forall i:Int :: 0 <= i && i< len(a) ==> acc(loc(a,i).val)
      invariant s subset vals
      invariant j == |vals setminus s|
      invariant forall i:Int :: {i in vals} i in (vals setminus s) ==> exists k: Int :: 0 <= k && k < j && loc(a,k).val == i
      {
        var t : Set[Int] := s
        element := havocInt()
        assume element in s // choose an element
        loc(a,j).val := element
        s := s setminus Set(element)
        j := j + 1
        assert vals setminus s == (vals setminus t) union Set(element) // or add {i in vals} trigger to loop invariant
      }
    }
