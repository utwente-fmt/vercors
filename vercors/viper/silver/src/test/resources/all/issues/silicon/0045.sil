//:: IgnoreFile(/silicon/issue/216/)
//:: IgnoreFile(/Carbon/issue/79/)

domain Natural {
  function zero(): Natural

  function successor(n: Natural): Natural

  function isZeroOrSuccessor(n: Natural): Bool

  function lessEqual(l: Natural, r: Natural): Bool

  function less(l: Natural, r: Natural): Bool

  function plus(l: Natural, r: Natural): Natural

  function minus(l: Natural, r: Natural): Natural

  function times(l: Natural, r: Natural): Natural

  function minimum(l: Natural, r: Natural): Natural

  function maximum(l: Natural, r: Natural): Natural

  axiom zeroOrSuccessor {
    forall n: Natural :: isZeroOrSuccessor(n)
  }

  axiom isZeroOrSuccessorNatural {
    forall n: Natural :: isZeroOrSuccessor(n) ==
      (n == zero() || exists p: Natural :: n == successor(p))
  }

  axiom equalZeroZero {
    zero() == zero()
  }

  axiom equalZeroSuccessor {
    forall n: Natural :: zero() != successor(n)
  }

  axiom equalSuccessorZero {
    forall n: Natural :: successor(n) != zero()
  }

  axiom equalSuccessorSuccessor {
    forall x: Natural, y: Natural :: (successor(x) == successor(y)) == (x == y)
  }

  axiom lessEqualZeroNatural {
    forall n: Natural :: lessEqual(zero(), n)
  }

  axiom lessEqualSuccessorZero {
    forall n: Natural :: !lessEqual(successor(n), zero())
  }

  axiom lessEqualSuccessorSuccessor {
    forall x: Natural, y: Natural ::
      lessEqual(successor(x), successor(y)) == lessEqual(x, y)
  }

  axiom lessNaturalZero {
    forall n: Natural :: !less(n, zero())
  }

  axiom lessZeroSuccessor {
    forall n: Natural :: less(zero(), successor(n))
  }

  axiom lessSuccessorSuccessor {
    forall x: Natural, y: Natural ::
      less(successor(x), successor(y)) == less(x, y)
  }

  axiom plusZeroNatural {
    forall y: Natural :: plus(zero(), y) == y
  }

  axiom plusSuccessorNatural {
    forall x: Natural, y: Natural ::
      plus(successor(x), y) == successor(plus(x, y))
  }

  axiom minusZeroNatural {
    forall n: Natural :: minus(zero(), n) == zero()
  }

  axiom minusNaturalZero {
    forall x: Natural :: minus(x, zero()) == x
  }

  axiom minusSuccessorSuccessor {
    forall x: Natural, y: Natural ::
      minus(successor(x), successor(y)) == minus(x, y)
  }

  axiom timesZeroNatural {
    forall n: Natural :: times(zero(), n) == zero()
  }

  axiom timesSuccessorNatural {
    forall x: Natural, y: Natural ::
      times(successor(x), y) == plus(y, times(x, y))
  }

  axiom minimumZeroNatural {
    forall y: Natural :: minimum(zero(), y) == zero()
  }

  axiom minimumNaturalZero {
    forall x: Natural :: minimum(x, zero()) == zero()
  }

  axiom minimumSuccessorSuccessor {
    forall x: Natural, y: Natural ::
      minimum(successor(x), successor(y)) == successor(minimum(x, y))
  }

  axiom maximumZeroNatural {
    forall y: Natural :: maximum(zero(), y) == y
  }

  axiom maximumNaturalZero {
    forall x: Natural :: maximum(x, zero()) == x
  }

  axiom maximumSuccessorSuccessor {
    forall x: Natural, y: Natural ::
      maximum(successor(x), successor(y)) == successor(maximum(x, y))
  }
}

domain List[A] {
  function nil(t: A): List[A]

  function cons(e: A, l: List[A]): List[A]

  function isNilOrCons(l: List[A]): Bool

  function empty(l: List[A]): Bool

  function concatenate(l: List[A], r: List[A]): List[A]

  function reverse(l: List[A]): List[A]

  function delete(n: Natural, l: List[Natural]): List[Natural]

  function length(l: List[A]): Natural

  function element(n: Natural, l: List[Natural]): Bool

  function drop(n: Natural, l: List[A]): List[A]

  function take(n: Natural, l: List[A]): List[A]

  function count(n: Natural, l: List[Natural]): Natural

  function butLast(l: List[A]): List[A]

  function last(l: List[Natural]): Natural

  function sorted(l: List[Natural]): Bool

  function insertSorting(n: Natural, l: List[Natural]): List[Natural]

  function insert(n: Natural, l: List[Natural]): List[Natural]

  function insertUnlessPresent(n: Natural, l: List[Natural]): List[Natural]

  function sort(l: List[Natural]): List[Natural]

  function sum(l: List[Natural]): Natural

  function hasMultiple(l: List[Natural]): Bool

  axiom nilOrCons {
    forall l: List[A] :: isNilOrCons(l)
  }

  axiom isNilOrConsList {
    forall l: List[A] :: isNilOrCons(l) == ((exists t: A :: l == nil(t)) ||
      exists e: A, r: List[A] :: l == cons(e, r))
  }

  axiom equalNilNil {
    forall l: Natural, r: Natural :: nil(l) == nil(r)
  }

  axiom equalConsNil {
    forall x: Natural, xs: List[Natural], t: Natural :: cons(x, xs) != nil(t)
  }

  axiom equalNilCons {
    forall t: Natural, y: Natural, ys: List[Natural] :: nil(t) != cons(y, ys)
  }

  axiom equalConsCons {
    forall x: Natural, xs: List[Natural], y: Natural, ys: List[Natural] ::
      (cons(x, xs) == cons(y, ys)) == ((x == y) && (xs == ys))
  }

  axiom emptyNil {
    forall t: A :: empty(nil(t))
  }

  axiom emptyCons {
    forall e: A, l: List[A] :: !empty(cons(e, l))
  }

  axiom concatenateNilList {
    forall t: A, ys: List[A] :: concatenate(nil(t), ys) == ys
  }

  axiom concatenateConsList {
    forall x: A, xs: List[A], ys: List[A] ::
      concatenate(cons(x, xs), ys) == cons(x, concatenate(xs, ys))
  }

  axiom reverseNil {
    forall t: A :: reverse(nil(t)) == nil(t)
  }

  axiom reverseCons {
    forall x: A, xs: List[A], t: A ::
      reverse(cons(x, xs)) == concatenate(reverse(xs), cons(x, nil(t)))
  }

  axiom deleteNaturalNil {
    forall n: Natural, t: Natural :: delete(n, nil(t)) == nil(t)
  }

  axiom deleteNaturalCons {
    forall n: Natural, x: Natural, xs: List[Natural] ::
      delete(n, cons(x, xs)) ==
        ((n == x) ? delete(n, xs) : cons(x, delete(n, xs)))
  }

  axiom lengthNil {
    forall t: A :: length(nil(t)) == zero()
  }

  axiom lengthCons {
    forall e: A, xs: List[A] :: length(cons(e, xs)) == successor(length(xs))
  }

  axiom elementNil {
    forall n: Natural, t: Natural :: !element(n, nil(t))
  }

  axiom elementCons {
    forall n: Natural, x: Natural, xs: List[Natural] ::
      element(n, cons(x, xs)) == ((n == x) || element(n, xs))
  }

  axiom dropZeroList {
    forall xs: List[A] :: drop(zero(), xs) == xs
  }

  axiom dropNaturalNil {
    forall n: Natural, t: A :: drop(n, nil(t)) == nil(t)
  }

  axiom dropSuccessorCons {
    forall x: Natural, e: A, xs: List[A] ::
      drop(successor(x), cons(e, xs)) == drop(x, xs)
  }

  axiom takeZeroList {
    forall l: List[A] :: exists t: A :: take(zero(), l) == nil(t) // AS: edited - this was a forall t:A, but no trigger for nil(t) is typically available
  }

  axiom takeNaturalNil {
    forall n: Natural, t: A :: take(n, nil(t)) == nil(t)
  }

  axiom takeSuccessorCons {
    forall x: Natural, y: A, ys: List[A] ::
      take(successor(x), cons(y, ys)) == cons(y, take(x, ys))
  }

  axiom countNaturalNil {
    forall x: Natural, t: Natural :: count(x, nil(t)) == zero()
  }

  axiom countNaturalCons {
    forall x: Natural, y: Natural, ys: List[Natural] ::
      count(x, cons(y, ys)) == ((x == y) ?
        successor(count(x, ys)) : count(x, ys))
  }

  axiom butLastNil {
    forall t: A :: butLast(nil(t)) == nil(t)
  }

  axiom butLastConsNil {
    forall x: A, t: A :: butLast(cons(x, nil(t))) == nil(t)
  }

  axiom butLastConsCons {
    forall x: A, e: A, l: List[A] ::
      cons(x, cons(e, l)) == cons(x, butLast(cons(e, l)))
  }

  axiom lastNil {
    forall t: Natural :: last(nil(t)) == zero()
  }

  axiom lastConsNil {
    forall x: Natural, t: Natural :: last(cons(x, nil(t))) == x
  }

  axiom lastConsCons {
    forall x: Natural, n: Natural, l: List[Natural] ::
      last(cons(x, cons(n, l))) == last(cons(n, l))
  }

  axiom sortedNil {
    forall t: Natural :: sorted(nil(t))
  }

  axiom sortedConsNil {
    forall x: Natural, t: Natural :: sorted(cons(x, nil(t)))
  }

  axiom sortedConsCons {
    forall x: Natural, y: Natural, ys: List[Natural] ::
      sorted(cons(x, cons(y, ys))) == (lessEqual(x, y) && sorted(cons(y, ys)))
  }

  axiom insertSortingNil {
    forall n: Natural, t: Natural :: insertSorting(n, nil(t)) == cons(n, nil(t))
  }

  axiom insertSortingCons {
    forall n: Natural, x: Natural, xs: List[Natural] ::
      insertSorting(n, cons(x, xs)) == (lessEqual(n, x) ?
        cons(n, cons(x, xs)) : cons(x, insertSorting(n, xs)))
  }

  axiom insertNil {
    forall n: Natural, t: Natural :: insert(n, nil(t)) == cons(n, nil(t))
  }

  axiom insertCons {
    forall n: Natural, x: Natural, xs: List[Natural] ::
      insert(n, cons(x, xs)) == (less(n, x) ?
        cons(n, cons(x, xs)) : cons(x, insert(n, xs)))
  }

  axiom insertUnlessPresentNil {
    forall n: Natural, t: Natural ::
      insertUnlessPresent(n, nil(t)) == cons(n, nil(t))
  }

  axiom insertUnlessPresentCons {
    forall n: Natural, x: Natural, xs: List[Natural] ::
      insertUnlessPresent(n, cons(x, xs)) == ((n == x) ?
        cons(x, xs) : cons(x, insertUnlessPresent(n, xs)))
  }

  axiom sortNil {
    forall t: Natural :: sort(nil(t)) == nil(t)
  }

  axiom sortCons {
    forall x: Natural, xs: List[Natural] ::
      sort(cons(x, xs)) == insertSorting(x, sort(xs))
  }

  axiom sumNil {
    forall t: Natural :: sum(nil(t)) == zero()
  }

  axiom sumCons {
    forall n: Natural, l: List[Natural] :: sum(cons(n, l)) == plus(n, sum(l))
  }

  axiom hasMultipleNil {
    forall t: Natural :: !hasMultiple(nil(t))
  }

  axiom hasMultipleCons {
    forall n: Natural, l: List[Natural] ::
      hasMultiple(cons(n, l)) == (less(successor(zero()), n) || hasMultiple(l))
  }
}

domain Tree[A] {
  function leaf(t: A): Tree[A]

  function node(l: Tree[A], e: A, r: Tree[A]): Tree[A]

  function isLeafOrNode(t: Tree[A]): Bool

  function height(t: Tree[A]): Natural

  function mirror(t: Tree[A]): Tree[A]

  axiom leafOrNode {
    forall t: Tree[A] :: isLeafOrNode(t)
  }

  axiom isLeafOrNodeTree {
    forall t: Tree[A] :: isLeafOrNode(t) == ((exists a: A :: t == leaf(a)) ||
      exists l: Tree[A], e: A, r: Tree[A] :: t == node(l, e, r))
  }

  axiom heightLeaf {
    forall t: A :: height(leaf(t)) == zero()
  }

  axiom heightNode {
    forall l: Tree[A], x: A, r: Tree[A] ::
      height(node(l, x, r)) == successor(maximum(height(l), height(r)))
  }

  axiom mirrorLeaf {
    forall t: A :: mirror(leaf(t)) == leaf(t)
  }

  axiom mirrorNode {
    forall l: Tree[A], x: A, r: Tree[A] ::
      mirror(node(l, x, r)) == node(mirror(r), x, mirror(l))
  }
}

domain Any {
}

/* [2014-09-01 Malte] Carbon and Silicon both fail to verify the postcondition,
 * but I don't know if it is supposed to hold or fail. Hence, the IgnoreOthers
 * annotation.
 * (The example originally didn't terminate in Silicon, see issue #45)
 */
method property01()
//:: IgnoreOthers
  ensures [forall n: Natural, xs: List[Natural] ::
    concatenate(take(n, xs), drop(n, xs)) == xs,
      (forall t_0: Natural :: forall n_3: Natural ::
        concatenate(take(n_3, nil(t_0)), drop(n_3, nil(t_0))) == nil(t_0)) &&
          forall l_0: List[Natural] ::

            isNilOrCons(l_0) ==> /* First: not verified without. */

              (forall n_4: Natural ::
                concatenate(take(n_4, l_0), drop(n_4, l_0)) == l_0) ==>
                  forall e_0: Natural ::

                    /* Second: not verified without. */
                    isZeroOrSuccessor(e_0) ==>

                      forall n_5: Natural ::

                        /* Third: verification too long without. Maybe needed? */
                        isZeroOrSuccessor(n_5) ==>  // TODO: no termination when commented?

                          concatenate(take(n_5, cons(e_0, l_0)),
                            drop(n_5, cons(e_0, l_0))) == cons(e_0, l_0)]
{ }
