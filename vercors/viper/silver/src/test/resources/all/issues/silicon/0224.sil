define access(a) forall k: Int :: 0 <= k && k < length(a) ==> acc(loc(a, k).val)
define bound(a,v) 0 <= v && v < length(a)

function f_loop_simpl(a: IArray) : Int
  requires access(a)

  ensures    0 < result
          && (result < length(a))
          && loc(a,result).val != 0

method test01(a: IArray)
  requires access(a) && 10 < length(a)
{
  var res: Int := f_loop_simpl(a)
  assert loc(a,res).val != 0
}




function f_loop(a: IArray, x: Int, y: Int, n: Int) : Int
  requires access(a)
  requires bound(a,x) && bound(a,y)
  requires 0 <= n && x+n <= length(a) && y+n <= length(a)

  ensures 0 <= result && x+result <= length(a) && y+result <= length(a)
  ensures (x+result < length(a) && y+result < length(a)) ==> loc(a,x+result).val != loc(a,y+result).val
{
     (x+n < length(a) && y+n < length(a) && loc(a,x+n).val == loc(a,y+n).val) ? f_loop(a,x,y,n+1) : n
}


function f_lcp(a : IArray, x : Int, y : Int) : Int
	requires access(a)
	requires bound(a,x) && bound(a,y)

	ensures 0 <= result && x+result <= length(a) && y+result <= length(a)
	ensures (x+result < length(a) && y+result < length(a)) ==> loc(a,x+result).val != loc(a,y+result).val
{
	f_loop(a,x,y,0)
}

method test02(a : IArray, x : Int, y : Int)
{
	var res : Int

	inhale access(a)
	inhale bound(a,x) && bound(a,y)

	res := (x < length(a) && y < length(a) && loc(a,x).val == loc(a,y).val) ? f_loop(a,x,y,1) : 0

	inhale 0 <= res && x+res <= length(a) && y+res <= length(a)
  inhale (x+res < length(a) && y+res < length(a)) ==> loc(a,x+res).val != loc(a,y+res).val

  exhale (x+res < length(a) && y+res < length(a)) ==> loc(a,x+res).val != loc(a,y+res).val
}







field val: Int

domain IArray {
  function loc(a: IArray, i: Int): Ref
  function length(a: IArray): Int
  function first(r: Ref): IArray
  function second(r: Ref): Int

  axiom all_diff {
    forall a: IArray, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: IArray :: length(a) >= 0
  }
}