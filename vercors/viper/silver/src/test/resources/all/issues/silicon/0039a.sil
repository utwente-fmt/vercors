field next: Ref

predicate valid(this: Ref) {
     acc(this.next, write)
  && (this.next != null ==> acc(valid(this.next), write))
}

function at(this: Ref, i: Int): Int
  requires this != null
  requires acc(valid(this), write)
  requires 0 <= i && i < size(this)
{ unfolding acc(valid(this), write) in (i == 0 ? 0 : at(this.next, i - 1)) }
  /* The invocation of 'at(this.next, i - 1)' used to fail due to the inference
   * of local evaluations and non-local branchings.
   * If
   *   requires 0 <= i && i < size(this)
   * was replaced by
   *   requires 0 <= i
   *   requires i < size(this)
   * then it did verify.
   */

function size(this: Ref): Int
  requires this != null
  requires acc(valid(this), write)
  ensures result >= 1
{ unfolding acc(valid(this), write) in (this.next == null ? 1 : 1 + size(this.next)) }
