field foo: Int

method specialVariables()
{
  var resulter: Ref

  resulter := new(foo)

  resulter.foo := 1
}

method types()
{
  var Inter: Ref
  var Permer: Ref
  var Booler: Ref
  var Refer: Ref

  Inter := new(foo)
  Permer := new(foo)
  Booler := new(foo)
  Refer := new(foo)

  Inter.foo := 1
  Permer.foo := 1
  Booler.foo := 1
  Refer.foo := 1
}

method booleanConstants()
{
  var trueer: Ref
  var falseer: Ref

  trueer := new(foo)
  falseer := new(foo)

  trueer.foo := 1
  falseer.foo := 1
}

method nulll()
{
  var nuller: Ref

  nuller := new(foo)

  nuller.foo := 1
}

method declarationKeywords()
{
  var methoder: Ref
  var functioner: Ref
  var predicateer: Ref
  var programer: Ref
  var domainer: Ref
  var axiomer: Ref
  var varer: Ref
  var returnser: Ref
  var fielder: Ref
  var defineer: Ref

  methoder := new(foo)
  functioner := new(foo)
  predicateer := new(foo)
  programer := new(foo)
  domainer := new(foo)
  axiomer := new(foo)
  varer := new(foo)
  returnser := new(foo)
  fielder := new(foo)
  defineer := new(foo)

  methoder.foo := 1
  functioner.foo := 1
  predicateer.foo := 1
  programer.foo := 1
  domainer.foo := 1
  axiomer.foo := 1
  varer.foo := 1
  returnser.foo := 1
  fielder.foo := 1
  defineer.foo := 1
}

method specifications()
{
  var requireser: Ref
  var ensureser: Ref
  var invarianter: Ref

  requireser := new(foo)
  ensureser := new(foo)
  invarianter := new(foo)

  requireser.foo := 1
  ensureser.foo := 1
  invarianter.foo := 1
}

method statements()
{
  var folder: Ref
  var unfolder: Ref
  var inhaleer: Ref
  var exhaleer: Ref
  var newer: Ref
  var asserter: Ref
  var assumeer: Ref
  var gotoer: Ref

  folder := new(foo)
  unfolder := new(foo)
  inhaleer := new(foo)
  exhaleer := new(foo)
  newer := new(foo)
  asserter := new(foo)
  assumeer := new(foo)
  gotoer := new(foo)

  folder.foo := 1
  unfolder.foo := 1
  inhaleer.foo := 1
  exhaleer.foo := 1
  newer.foo := 1
  asserter.foo := 1
  assumeer.foo := 1
  gotoer.foo := 1
}

method controlStructures()
{
  var whileer: Ref
  var ifer: Ref
  var elseifer: Ref
  var elseer: Ref

  whileer := new(foo)
  ifer := new(foo)
  elseifer := new(foo)
  elseer := new(foo)

  whileer.foo := 1
  ifer.foo := 1
  elseifer.foo := 1
  elseer.foo := 1
}

method specialFreshBlock()
{
  var fresher: Ref
  var constraininger: Ref

  fresher := new(foo)
  constraininger := new(foo)

  fresher.foo := 1
  constraininger.foo := 1
}

method sequences()
{
  var Seqer: Ref

  Seqer := new(foo)

  Seqer.foo := 1
}

method setsAndMultisets()
{
  var Seter: Ref
  var Multiseter: Ref
  var unioner: Ref
  var intersectioner: Ref
  var setminuser: Ref
  var subseter: Ref

  Seter := new(foo)
  Multiseter := new(foo)
  unioner := new(foo)
  intersectioner := new(foo)
  setminuser := new(foo)
  subseter := new(foo)

  Seter.foo := 1
  Multiseter.foo := 1
  unioner.foo := 1
  intersectioner.foo := 1
  setminuser.foo := 1
  subseter.foo := 1
}

method proverHintExpressions()
{
  var unfoldinger: Ref
  var iner: Ref

  unfoldinger := new(foo)
  unfoldinger.foo := 1
  iner := new(foo)
  iner.foo := 1
}

method oldExpression()
{
  var older: Ref

  older := new(foo)
  older.foo := 1
}

method quantification()
{
  var foraller: Ref
  var existser: Ref

  foraller := new(foo)
  foraller.foo := 1
  existser := new(foo)
  existser.foo := 1
}

method permissionSyntax()
{
  var accer: Ref
  var wildcarder: Ref
  var writer: Ref
  var noneer: Ref
  var epsiloner: Ref
  var permer: Ref

  accer := new(foo)
  accer.foo := 1
  wildcarder := new(foo)
  wildcarder.foo := 1
  writer := new(foo)
  writer.foo := 1
  noneer := new(foo)
  noneer.foo := 1
  epsiloner := new(foo)
  epsiloner.foo := 1
  permer := new(foo)
  permer.foo := 1
}

method modifiers()
{
  var uniqueer: Ref

  uniqueer := new(foo)
  uniqueer.foo := 1
}
