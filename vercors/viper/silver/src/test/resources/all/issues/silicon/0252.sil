method test1(arr1: IArray, arr2: IArray) {
  inhale forall i: Int :: true ==> acc(loc(arr1, i).val, (0 <= i && i < 10) ? write : none)

  loc(arr1, 0).val := 0
  //:: ExpectedOutput(assignment.failed:insufficient.permission)
  loc(arr2, 0).val := 0
}

 predicate P(x: Ref) { x != null }

 method test2(arr1: IArray, arr2: IArray) {
   inhale forall i: Int :: true ==> acc(P(loc(arr1, i)), (0 <= i && i < 10) ? write : none)

   assert unfolding P(loc(arr1, 0)) in loc(arr1, 0) != null
   //:: ExpectedOutput(unfold.failed:insufficient.permission)
   unfold P(loc(arr2, 0))
 }

/* Encoding of arrays */

field val: Int

domain IArray {
  function loc(a: IArray, i: Int): Ref
  function len(a: IArray): Int
  function first(r: Ref): IArray
  function second(r: Ref): Int

  axiom all_diff {
    forall a: IArray, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom len_nonneg {
    forall a: IArray :: len(a) >= 0
  }
}
