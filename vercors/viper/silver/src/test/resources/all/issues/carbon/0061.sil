// chaliceSuite/examples/producer-consumer.chalice
domain GlobalKPermission {

  unique function globalK$(): Perm

  axiom globalKReadOnly {
    (globalK$() > none) && (write > globalK$())
  }
}

field joinable$: Bool

field Consumerbuffer$: Ref

field par$Producerrun$k$_2: Perm

predicate Producervalid$(this: Ref) {
  true
}

predicate Consumervalid$(this: Ref) {
  true
}

method Programmain$(this: Ref, k$: Perm)
  requires this != null
{
  var producer: Ref
  var newK$_1: Perm
  var tkP: Ref
  var consumer: Ref
  producer := new(joinable$)
  Producerinit$(producer)
  fresh newK$_1
  constraining(newK$_1) {
    tkP := new(joinable$, par$Producerrun$k$_2)
    tkP.joinable$ := true
    tkP.par$Producerrun$k$_2 := newK$_1
    exhale acc(Producervalid$(producer), write)
  }
  //assert tkP.joinable$ â€“ Uncommenting this line, makes the code to verify.
  consumer := new(joinable$, Consumerbuffer$)
  Consumerinit$(consumer)
  exhale acc(Consumervalid$(consumer), write)
  assert tkP.joinable$
}

method Producerinit$(this: Ref)
  requires this != null
  ensures acc(Producervalid$(this), write)
{
  fold acc(Producervalid$(this), write)
}

/*
method Producerrun$(this: Ref, k$_2: Perm)
  requires this != null
  requires acc(Producervalid$(this), write)
{
}
*/

method Consumerinit$(this: Ref)
  requires this != null
  requires acc(this.Consumerbuffer$, write)
  ensures acc(Consumervalid$(this), write)
{
  fold acc(Consumervalid$(this), write)
}

/*
method Consumerrun$(this: Ref, k$_4: Perm)
  requires this != null
  requires acc(Consumervalid$(this), write)
{
}
*/
