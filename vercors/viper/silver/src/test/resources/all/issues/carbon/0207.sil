function elements(this: Array): Set[Int]
  requires
    forall i: Int :: {loc(this, i).val}{i in [0..length(this))}
      i in [0..length(this)) ==> acc(loc(this, i).val)
  ensures
    forall i: Int :: {loc(this,i).val}{i in [0..length(this))}
      i in [0..length(this)) ==> loc(this,i).val in result

method swap01(a: Array, x: Int, y: Int)
   requires forall i: Int :: { loc(a, i).val } 0 <= i && i < length(a) ==> acc(loc(a, i).val)
   requires 0 <= x && x < length(a)
   requires 0 <= y && y < length(a)
   requires x < y
{
  label pre
  
   assume forall e:Int :: e in elements(a) ==> exists j:Int :: j in [0..length(a))

   var tmp: Int := loc(a,x).val
   loc(a,x).val := loc(a,y).val
   loc(a,y).val := tmp

   //:: ExpectedOutput(assert.failed:assertion.false)
   assert elements(a) == old(elements(a))
   assert elements(a) == old[pre](elements(a))
}

method swap02(a: Array, x: Int, y: Int)
{
  inhale
    forall i: Int :: {loc(a, i).val}{i in [0..length(a))}
      i in [0..length(a)) ==> acc(loc(a, i).val)

  inhale 0 <= x && x < length(a)
  inhale 0 <= y && y < length(a)
  inhale x < y

  label pre
  
  assume forall e:Int :: e in elements(a) ==> exists j:Int :: j in [0..length(a))

  var tmp: Int := loc(a,x).val
  loc(a,x).val := loc(a,y).val
  loc(a,y).val := tmp

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert elements(a) == old[pre](elements(a)) // FAILS
}


field val: Int 

domain Array {
  function loc(a: Array, i: Int): Ref
  function length(a: Array): Int
  function first(r: Ref): Array
  function second(r: Ref): Int

  axiom injectivity {
    forall a: Array, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom lengthNonNegative {
    forall a: Array :: {length(a)} length(a) >= 0
  }
}