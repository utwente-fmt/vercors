// chaliceSuite/general-tests/nestedPredicates.chalice
field Nodenext$: Ref

field Nodevalue$: Int

function NodegetNext$(this: Ref): Ref
  requires this != null
  requires acc(Nodevalid$(this), wildcard)
{
  (unfolding acc(Nodevalid$(this), wildcard) in this.Nodenext$)
}

predicate Nodevalid$(this: Ref) {
  acc(this.Nodenext$, wildcard) && acc(this.Nodevalue$, wildcard) && ((this.Nodenext$ != null) ==> acc(Nodevalid$(this.Nodenext$), write))
}

predicate Nodep$(this: Ref) {
  acc(this.Nodenext$, wildcard) && acc(this.Nodevalue$, wildcard) && ((this.Nodenext$ != null) ==> acc(Nodeq$(this.Nodenext$), write))
}

predicate Nodeq$(this: Ref) {
  acc(this.Nodenext$, wildcard) && acc(this.Nodevalue$, wildcard) && ((this.Nodenext$ != null) ==> acc(Nodep$(this.Nodenext$), write))
}

method NodetestNestingUnfold$(this: Ref)
  requires this != null
  requires acc(Nodevalid$(this), write)
{
  unfold acc(Nodevalid$(this), write)
  //:: UnexpectedOutput(assert.failed:assertion.false, /Silicon/issue/154/)
  assert this != this.Nodenext$
  if (this.Nodenext$ != null) {
    unfold acc(Nodevalid$(this.Nodenext$), write)
    assert this.Nodenext$ != this.Nodenext$.Nodenext$
    assert this != this.Nodenext$.Nodenext$
  }
}

method NodetestNestingFold$(this: Ref)
  requires this != null
  requires acc(this.Nodenext$, wildcard) && acc(this.Nodevalue$, wildcard) && acc(this.Nodenext$.Nodenext$, wildcard) && acc(this.Nodenext$.Nodevalue$, wildcard) && (this.Nodenext$ != null) && (this.Nodenext$.Nodenext$ != null) && acc(Nodevalid$(this.Nodenext$.Nodenext$), write)
{
  fold acc(Nodevalid$(this.Nodenext$), write)
  //:: UnexpectedOutput(assert.failed:assertion.false, /Silicon/issue/154/)
  assert this.Nodenext$ != this.Nodenext$.Nodenext$
  fold acc(Nodevalid$(this), write)
  assert this != this.Nodenext$
  assert this != this.Nodenext$.Nodenext$
}

method NodetestNestingUnfolding$(this: Ref)
  requires this != null
  requires acc(Nodevalid$(this), write)
{
  //:: UnexpectedOutput(assert.failed:assertion.false, /Silicon/issue/154/)
  assert this != (unfolding acc(Nodevalid$(this), write) in this.Nodenext$)
  if ((unfolding acc(Nodevalid$(this), write) in this.Nodenext$) != null) {
    assert (unfolding acc(Nodevalid$(this), write) in this.Nodenext$) != (unfolding acc(Nodevalid$(this), write) in (unfolding acc(Nodevalid$(this.Nodenext$), write) in this.Nodenext$.Nodenext$))
    assert this != (unfolding acc(Nodevalid$(this), write) in (unfolding acc(Nodevalid$(this.Nodenext$), write) in this.Nodenext$.Nodenext$))
  }
}

method NodetestNestingUnfoldTwo$(this: Ref)
  requires this != null
  requires acc(Nodep$(this), write)
{
  unfold acc(Nodep$(this), write)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert this != this.Nodenext$
  if (this.Nodenext$ != null) {
    unfold acc(Nodeq$(this.Nodenext$), write)
    //:: ExpectedOutput(assert.failed:assertion.false)
    //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
    assert this.Nodenext$ != this.Nodenext$.Nodenext$
    assert this != this.Nodenext$.Nodenext$
  }
}

method NodetestNestingFoldTwo$(this: Ref)
  requires this != null
  requires acc(this.Nodenext$, wildcard) && acc(this.Nodevalue$, wildcard) && acc(this.Nodenext$.Nodenext$, wildcard) && acc(this.Nodenext$.Nodevalue$, wildcard) && (this.Nodenext$ != null) && (this.Nodenext$.Nodenext$ != null) && acc(Nodep$(this.Nodenext$.Nodenext$), write)
{
  fold acc(Nodeq$(this.Nodenext$), write)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert this != this.Nodenext$
  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
  assert this.Nodenext$ != this.Nodenext$.Nodenext$
  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
  assert this != this.Nodenext$.Nodenext$
}

method NodetestNestingFoldThree$(this: Ref)
  requires this != null
  requires acc(this.Nodenext$, wildcard) && acc(this.Nodevalue$, wildcard) && acc(this.Nodenext$.Nodenext$, wildcard) && acc(this.Nodenext$.Nodevalue$, wildcard) && (this.Nodenext$ != null) && (this.Nodenext$.Nodenext$ != null) && acc(Nodep$(this.Nodenext$.Nodenext$), write)
{
  fold acc(Nodeq$(this.Nodenext$), write)
  fold acc(Nodep$(this), write)
  //:: UnexpectedOutput(assert.failed:assertion.false, /Silicon/issue/154/)
  assert this != this.Nodenext$
  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
  assert this.Nodenext$ != this.Nodenext$.Nodenext$
  assert this != this.Nodenext$.Nodenext$
}

method NodetestNestingUnfoldingTwo$(this: Ref)
  requires this != null
  requires acc(Nodep$(this), write)
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert this != (unfolding acc(Nodep$(this), write) in this.Nodenext$)
  if ((unfolding acc(Nodep$(this), write) in this.Nodenext$) != null) {
    //:: ExpectedOutput(assert.failed:assertion.false)
    //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
    assert (unfolding acc(Nodep$(this), write) in this.Nodenext$) != (unfolding acc(Nodep$(this), write) in (unfolding acc(Nodeq$(this.Nodenext$), write) in this.Nodenext$.Nodenext$))
    assert this != (unfolding acc(Nodep$(this), write) in (unfolding acc(Nodeq$(this.Nodenext$), write) in this.Nodenext$.Nodenext$))
  }
}

method NodetestNestingUnfoldingPrecondition$(this: Ref, x: Ref)
  requires this != null
  requires acc(Nodevalid$(this), write) && (unfolding acc(Nodevalid$(this), write) in this.Nodenext$ == x)
{
  //:: UnexpectedOutput(assert.failed:assertion.false, /Silicon/issue/154/)
  assert this != x
}

method NodetestNestingUnfoldingPostcondition$(this: Ref, x: Ref)
  requires this != null
  requires acc(Nodevalid$(this), write)
  //:: UnexpectedOutput(postcondition.violated:assertion.false, /Silicon/issue/154/)
  ensures acc(Nodevalid$(this), write) && (unfolding acc(Nodevalid$(this), write) in true) && (this != NodegetNext$(this))
{
}
