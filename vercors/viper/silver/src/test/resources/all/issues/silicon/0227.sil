predicate mustSendBounded$(r$: Ref) {
  true
}

method test(this: Ref, c: Ref, n: Int)
  requires this != null
  requires n > 0
  requires (c != null) && acc(mustSendBounded$(c), n * write)
{
  var i: Int
  i := 0

  exhale ((n - i) * write >= none) && acc(mustSendBounded$(c), (n - i) * write)
  exhale (n - i + 1 > 0) && (n - i >= 0)

  while (i < n)
  {
    inhale ((n - i) * write >= none) && acc(mustSendBounded$(c), (n - i) * write)
    inhale (n - i + 1 > 0) && (n - i >= 0)

    // Send Statement:
    // Start of Send----------------------------
    assert c != null
    // Exhaling a send obligation
    exhale acc(mustSendBounded$(c), 1 * write)

    //:: ExpectedOutput(exhale.failed:assertion.false)
    exhale (forperm r$_4: Ref [mustSendBounded$(r$_4)] :: false)
  }
}
