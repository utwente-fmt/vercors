field next:Ref

define GRAPH(nodes) 
    !(null in nodes)
    && ( forall n:Ref :: {n.next} n in nodes ==> acc(n.next) )
    && ( forall n:Ref :: 
        {n.next in nodes}
        {n in nodes, n.next} 
            n in nodes && n.next != null ==> n.next in nodes )

domain Foobar {
    function foo(S:Set[Int], x:Ref, y:Ref): Bool
}

function hfun(g:Set[Ref]): Set[Int]
    requires GRAPH(g)

method reverse_impl(g:Set[Ref])
    requires GRAPH(g)
    ensures GRAPH(g)
    ensures forall x:Ref, y:Ref :: foo(hfun(g),x,y) == foo(old(hfun(g)),y,x)
    ensures forall x:Ref, y:Ref :: foo(hfun(g),x,y) != foo(old(hfun(g)),x,y)
    ensures hfun(g) != old( hfun(g) )

method reverse(g:Set[Ref]) 
    requires GRAPH(g)
{
    // Call a method which modifies the heap in a known way. 
    reverse_impl(g)

    // Nondeterministically choose a branch and try independently proving the assertions. 
    var b1:Bool
    var b2:Bool
    if ( b1 ) {
        // This property is obtained from the postcondition of reverse_impl.
        //  Carbon cannot prove it (because of an incompleteness bug in old expressions). 
        assert forall x:Ref, y:Ref :: foo(hfun(g),x,y) == foo(old(hfun(g)),y,x)

        // Discard this control-flow path. 
        assume false

    } elseif( b2 ) {
        // This property does not follow from reverse_impl's postcondition. 
        // Carbon can prove it (because of an unsoundness bug in old expressions). 
        //:: ExpectedOutput(assert.failed:assertion.false)
        assert forall x:Ref, y:Ref :: foo(hfun(g),x,y) == foo(old(hfun(g)),x,y)

        // The reason Carbon can prove this is that the following two heap-dependent 
        //  functions are assumed to be the same: 
        //:: ExpectedOutput(assert.failed:assertion.false)
        //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
        assert hfun(g) == old( hfun(g) )

        // Even though we explicitly have the opposite from the postcondition of reverse_impl: 
        assert hfun(g) != old( hfun(g) )

        // However, due to the incompleteness from b1, we cannot prove the second postcondition: 
        assert forall x:Ref, y:Ref :: foo(hfun(g),x,y) != foo(old(hfun(g)),x,y)

        // Therefore, in this case the unsoundness does not allow to prove false: 
        assert false

        // Discard this control-flow path. 
        assume false
    }

    // Somke test (supposed to fail). 
   //:: ExpectedOutput(assert.failed:assertion.false)
   //:: MissingOutput(assert.failed:assertion.false, /Silicon/issue/34/)
   assert false
}