//we use the array axiomatization from the lecture
domain Array {
  function loc(a: Array, i: Int): Ref
  function len(a: Array): Int
  function first(r: Ref): Array
  function second(r: Ref): Int

  axiom all_diff {
    forall a: Array, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: Array :: {len(a)} len(a) >= 0
  }
}

field val : Int


define sorted(a, lo, hi)
  forall i: Int, j: Int :: {loc(a, i).val,loc(a, j).val} lo <= i && i<=j && j <= hi ==> loc(a, i).val <= loc(a, j).val


method quicksort_rec(a: Array, lo: Int, hi: Int) returns (permutation: Seq[Int])
  requires lo>=0
  requires forall i: Int :: {loc(a, i).val} lo <= i && i <= hi ==> acc(loc(a, i).val)

  ensures forall i: Int :: {loc(a, i).val} lo <= i && i <= hi ==> acc(loc(a, i).val)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures sorted(a, lo, hi)
{
}

function dummy(x: Int): Bool{
    true
}


