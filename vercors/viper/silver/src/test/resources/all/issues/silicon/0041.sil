field next: Ref

predicate SL(x: Ref) {
     acc(x.next)
  && (x.next != null ==> acc(SL(x.next)))
}

function SL_length(x: Ref): Int
  requires acc(SL(x))
  ensures result > 0
{
  1 + unfolding acc(SL(x)) in
        x.next == null
          ? 0
          : SL_length(x.next)
}

method test01(x: Ref)
  requires acc(SL(x))
  requires SL_length(x) == 2
{
  unfold acc(SL(x))
  unfold acc(SL(x.next))
  assert x.next.next == null
}

method test02() returns (head: Ref)
  ensures acc(SL(head))
  ensures SL_length(head) == 2
{
  var x: Ref
  x := new(next)
  x.next := null

  head := x
  fold acc(SL(head))

  x := new(next)
  x.next := head

  head := x
  fold acc(SL(head))
}

method test03(x: Ref)
  requires acc(SL(x))
  requires SL_length(x) == 2
{
  assert unfolding acc(SL(x)) in
         unfolding acc(SL(x.next)) in
         x.next.next == null
}
