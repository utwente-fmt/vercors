method test1(xs: Set[Ref], ys: Set[Ref], zs: Set[Ref]) {
  assume (xs intersection ys) == zs
  assert (ys intersection xs) == zs
}

method test11(xs: Set[Ref], ys: Set[Ref], zs: Set[Ref], as: Set[Ref]) {
  assume ((xs intersection ys) intersection zs) == as
  assert ((zs intersection ys) intersection xs) == as
}

method test12(xs: Set[Ref], ys: Set[Ref], zs: Set[Ref], as: Set[Ref]) {
  assume ((xs intersection ys) intersection zs) == as
  assert ((xs intersection zs) intersection ys) == as
}

method test13(xs: Set[Ref], ys: Set[Ref], zs: Set[Ref], as: Set[Ref]) {
  assume ((xs intersection ys) intersection zs) == as
  assert (xs intersection (zs intersection ys)) == as
}

method test14(xs: Set[Ref], ys: Set[Ref], zs: Set[Ref], as: Set[Ref]) {
  assume ((xs intersection ys) intersection zs) == as
  assert (ys intersection (zs intersection xs)) == as
}



method test2(xs: Set[Ref], ys: Set[Ref], zs: Set[Ref]) {
  assume (xs union ys) == zs
  assert (ys union xs) == zs
}

method test21(xs: Set[Ref], ys: Set[Ref], zs: Set[Ref], as: Set[Ref]) {
  assume ((xs union ys) union zs) == as
  assert ((zs union ys) union xs) == as
}

method test22(xs: Set[Ref], ys: Set[Ref], zs: Set[Ref], as: Set[Ref]) {
  assume ((xs union ys) union zs) == as
  assert ((xs union zs) union ys) == as
}

method test23(xs: Set[Ref], ys: Set[Ref], zs: Set[Ref], as: Set[Ref]) {
  assume ((xs union ys) union zs) == as
  assert (xs union (zs union ys)) == as
}

method test24(xs: Set[Ref], ys: Set[Ref], zs: Set[Ref], as: Set[Ref]) {
  assume ((xs union ys) union zs) == as
  assert (ys union (zs union xs)) == as
}