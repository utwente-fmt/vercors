domain GlobalKPermission {

  unique function globalK$(): Perm

  axiom globalKReadOnly {
    (globalK$() > none) && (write > globalK$())
  }
}

field old$methodPermission: Perm

field joinable$: Bool

field Nodenext$: Ref

field Nodeval$: Int

field Nodelength$: Int

field old$NodeaddAtEndRec$0: Ref

field old$NodeaddAtEndRec$1: Int

field par$NodeaddAtEndRec$this$_4: Ref

field par$NodeaddAtEndRec$k$: Perm

field par$NodeaddAtEndRec$n: Ref

field par$NodeaddAtEnd$this$_5: Ref

field par$NodeaddAtEnd$k$_1: Perm

field par$NodeaddAtEnd$v: Int

function Nodelseg_length$(this$_2: Ref): Int
  requires this$_2 != null
  requires acc(Nodelseg$(this$_2), wildcard)
{
  (unfolding acc(Nodelseg$(this$_2), wildcard) in this$_2.Nodelength$)
}

function Nodeend$(this$_3: Ref): Ref
  requires this$_3 != null
  requires acc(Nodelseg$(this$_3), wildcard)
{
  (unfolding acc(Nodelseg$(this$_3), wildcard) in (this$_3.Nodelength$ == 1 ? this$_3.Nodenext$ : Nodeend$(this$_3.Nodenext$)))
}

predicate Node$MonitorInvariant(this$: Ref) {
  true
}

predicate Nodelseg$(this$_1: Ref) {
  acc(this$_1.Nodelength$, write) && (this$_1.Nodelength$ > 0) && acc(this$_1.Nodenext$, write) && acc(this$_1.Nodeval$, write) && ((this$_1.Nodelength$ > 1) ==> (this$_1.Nodenext$ != null) && acc(Nodelseg$(this$_1.Nodenext$), write) && (Nodelseg_length$(this$_1.Nodenext$) + 1 == this$_1.Nodelength$))
}

method NodeaddAtEndRec$(this$_4: Ref, k$: Perm, n: Ref)
  requires this$_4 != null
  requires k$ > none
  requires write > k$
  requires acc(Nodelseg$(this$_4), write) && acc(n.Nodenext$, write) && acc(n.Nodeval$, write) && acc(n.Nodelength$, write)
  ensures acc(Nodelseg$(this$_4), write)
  ensures Nodeend$(this$_4) == old(n.Nodenext$)
  ensures Nodelseg_length$(this$_4) == old(Nodelseg_length$(this$_4)) + 1
{
  var n$: Ref
  var a$: Ref
  var b$: Ref
  var c$: Ref
  var newK$_3: Perm
  unfold acc(Nodelseg$(this$_4), write)
  if (this$_4.Nodelength$ == 1) {
    this$_4.Nodenext$ := n
    n.Nodelength$ := 1
    fold acc(Nodelseg$(n), write)
  } else {
    fresh newK$_3
    constraining(newK$_3) {
      NodeaddAtEndRec$(this$_4.Nodenext$, newK$_3, n)
    }
  }
  this$_4.Nodelength$ := this$_4.Nodelength$ + 1
  fold acc(Nodelseg$(this$_4), write)
}

method NodeaddAtEnd$(this$_5: Ref, k$_1: Perm, v: Int)
  requires this$_5 != null
  requires k$_1 > none
  requires write > k$_1
  requires acc(Nodelseg$(this$_5), write)
  requires Nodeend$(this$_5) == null
  ensures acc(Nodelseg$(this$_5), write)
{
  var n$_1: Ref
  var a$_1: Ref
  var b$_1: Ref
  var c$_1: Ref
  var cur: Ref
  var temp: Ref
  var newK$: Perm
  var n: Ref
  var newK$_1: Perm
  var newK$_2: Perm
  cur := this$_5
  unfold acc(Nodelseg$(this$_5), write)
  while (cur.Nodenext$ != null)
    invariant acc(cur.Nodenext$, write) && acc(cur.Nodeval$, write) && acc(cur.Nodelength$, write)
    invariant (this$_5 != cur) ==> acc(Nodelseg$(this$_5), write) && (Nodeend$(this$_5) == cur)
    invariant (cur.Nodelength$ > 0) && ((cur.Nodelength$ > 1) ==> (cur.Nodenext$ != null) && acc(Nodelseg$(cur.Nodenext$), write)) && ((cur.Nodelength$ == 1 ? cur.Nodenext$ : Nodeend$(cur.Nodenext$)) == null)
  {
    temp := cur
    cur := cur.Nodenext$
    if (this$_5 == temp) {
      this$_5.Nodelength$ := 1
      fold acc(Nodelseg$(this$_5), write)
    } else {
      fresh newK$
      constraining(newK$) {
        NodeaddAtEndRec$(this$_5, newK$, temp)
      }
    }
    unfold acc(Nodelseg$(cur), write)
  }
  n := new(old$methodPermission, joinable$, Nodenext$, Nodeval$, Nodelength$, old$NodeaddAtEndRec$0, old$NodeaddAtEndRec$1, par$NodeaddAtEndRec$this$_4, par$NodeaddAtEndRec$k$, par$NodeaddAtEndRec$n, par$NodeaddAtEnd$this$_5, par$NodeaddAtEnd$k$_1, par$NodeaddAtEnd$v)
  n.Nodenext$ := null
  n.old$NodeaddAtEndRec$0 := null
  n.par$NodeaddAtEndRec$this$_4 := null
  n.par$NodeaddAtEndRec$n := null
  n.par$NodeaddAtEnd$this$_5 := null
  n.Nodeval$ := v
  n.Nodenext$ := null
  cur.Nodenext$ := n
  if (cur == this$_5) {
    this$_5.Nodelength$ := 1
    fold acc(Nodelseg$(this$_5), write)
  } else {
    fresh newK$_1
    constraining(newK$_1) {
      NodeaddAtEndRec$(this$_5, newK$_1, cur)
    }
  }
  fresh newK$_2
  constraining(newK$_2) {
    NodeaddAtEndRec$(this$_5, newK$_2, n)
  }
}
