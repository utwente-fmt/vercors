field f: Int

method test() {
  inhale forall x: Ref :: {x.f} true
}

field val: Int

function havoc(): Set [Ref]

method clientA(){
  var a: Ref
  a := new(*)
  var refSet_b1: Set [Ref]
  refSet_b1 := havoc()
  assume forall r: Ref:: { r in refSet_b1 } { r.val } r in refSet_b1 <==> perm(r.val) > none
}

method clientB(){
  var a: Ref
  a := new(*)
  var refSet_b1: Set [Ref]
  refSet_b1 := havoc()
  assume forall r: Ref:: { r in refSet_b1 } { r.val } r in refSet_b1 <==> perm(r.val) > none
  exhale forall r: Ref:: { r in refSet_b1 } r in refSet_b1 ==> acc(r.val, perm(r.val))
}
