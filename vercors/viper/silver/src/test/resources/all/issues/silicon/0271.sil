//:: IgnoreFile(/silicon/issue/271/)

field f: Int
field g: Int

predicate pair(x: Ref) {
  [acc(x.f) && acc(x.g),
   acc(x.g) && acc(x.f)]
}

method test01(x: Ref) {
  inhale acc(x.f) && x.f == 22
  inhale acc(x.g) && x.g == 3

  fold acc(pair(x))
  unfold acc(pair(x))

  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/271/)
  assert x.f == 3 && x.g == 22
}



function getf(x: Ref): Int
  requires [acc(x.f) && acc(x.g),
            acc(x.g) && acc(x.f)]
{ x.f }

method test02(x: Ref) {
  inhale acc(x.f) && x.f == 22
  inhale acc(x.g) && x.g == 3

  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/271/)
  assert getf(x) == 3
}
