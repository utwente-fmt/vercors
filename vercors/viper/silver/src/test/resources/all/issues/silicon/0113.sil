field next: Ref
field value: Int

function contains(this: Ref, i: Int): Bool
  requires this != null
  requires acc(valid(this), wildcard)
{
  (unfolding acc(valid(this), wildcard) in (i == this.value) || (this.next != null) && contains(this.next, i))
}

predicate valid(this: Ref) {
  acc(this.next) && acc(this.value) && ((this.next != null) ==> acc(valid(this.next)))
}

method addother(this: Ref, i: Int)
  requires this != null
  requires acc(valid(this))
  ensures acc(valid(this))
  ensures forall x: Int :: (contains(this, x) == old(contains(this, x)) || (x == i))
{
  var n: Ref
  
  unfold acc(valid(this))
  
  if (this.next != null) {
    // assert acc(this.next) && (this.next != null) && acc(valid(this.next))
    addother(this.next, i)
    // assert acc(this.next)
    // assert (this.next != null)
    // assert acc(valid(this.next))
    // assert (forall x: Int :: (contains(this.next, x) == old(contains(this.next, x)) || (x == i)))
  } else {
    n := new (*)
    this.next := n
    this.next.value := i
    this.next.next := null
    fold acc(valid(this.next))
    // assert (forall x: Int :: true ==> (contains(this.next, x) == (x == i)))
  }
  
  fold acc(valid(this))
}
