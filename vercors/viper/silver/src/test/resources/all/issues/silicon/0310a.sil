//:: IgnoreFile(/carbon/issue/216/)

field f: Ref;

method test01() {
  var xs: Set[Ref]
  var oldxs: Set[Ref] := xs
  var y: Ref

  inhale y in xs
  inhale forall x: Ref :: x in xs ==> acc(x.f)

  package (forall x: Ref :: x in xs ==> acc(x.f)) --* (forall x: Ref :: x in oldxs ==> acc(x.f))
  xs := xs setminus Set(y)
  //:: ExpectedOutput(apply.failed:wand.not.found)
  apply   (forall x: Ref :: x in xs ==> acc(x.f)) --* (forall x: Ref :: x in oldxs ==> acc(x.f))
}

method test03() {
  var xs: Set[Ref]
  var oldxs: Set[Ref] := xs
  var y: Ref

  inhale y in xs
  inhale forall x: Ref :: x in xs ==> acc(x.f)

  package (forall x: Ref :: x in xs ==> acc(x.f)) --* (forall x: Ref :: x in oldxs ==> acc(x.f))
  xs := xs setminus Set[Ref]()
  apply   (forall x: Ref :: x in xs ==> acc(x.f)) --* (forall x: Ref :: x in oldxs ==> acc(x.f))
}

define SegAcc(seq, start, i, end)
  start <= i && i < end ==> acc(seq[i].f)

method test02() {
  var xs: Seq[Ref]
  var oldxs: Seq[Ref] := xs

  inhale 10 < |xs|
  inhale forall i: Int :: SegAcc(xs, 0, i, |xs|)

  package (forall i: Int :: SegAcc(xs, 0, i, |xs|)) --* (forall i: Int :: SegAcc(oldxs, 0, i, |oldxs|))
  xs := xs[1..]
  //:: ExpectedOutput(apply.failed:wand.not.found)
  apply   (forall i: Int :: SegAcc(xs, 0, i, |xs|)) --* (forall i: Int :: SegAcc(oldxs, 0, i, |oldxs|))
}
