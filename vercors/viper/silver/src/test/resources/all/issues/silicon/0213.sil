//:: IgnoreFile(/carbon/issue/216/)
field f1: Ref
field f2: Ref
field val: Int

predicate Foo(self: Ref) {
    acc(self.f1) &&
    acc(self.f1.val) &&
    acc(self.val)
}

define A(res) acc(res.val)
define B1(x) (
    acc(Foo(x), write) &&
    (unfolding acc(Foo(x), 1/2) in x.val) == old(unfolding acc(Foo(x), 1/2) in x.val)
)

method silicon_fail(x: Ref) returns (res: Ref)
    requires acc(Foo(x), write)
    ensures acc(res.val)
    ensures A(res) --* B1(x)
{
    unfold acc(Foo(x), write)
    res := x.f1
    package (A(res)) --* B1(x) {
        fold acc(Foo(x))
    }
}

define B2(x) (
    acc(Foo(x), write) &&
    (unfolding acc(Foo(x), 1/2) in x.val) == 10
)



method silicon_ok1(x: Ref) returns (res: Ref)
    requires acc(Foo(x), write)
    ensures acc(res.val)
    ensures A(res) --* B2(x)
{
    unfold acc(Foo(x), write)
    res := x.f1
    x.val := 10
    package (A(res)) --* B2(x) {
        fold acc(Foo(x))
    }
}

define B3(x) (
    acc(x.val) &&
    x.val == old(x.val)
)
method silicon_ok2(x: Ref) returns (res: Ref)
    requires acc(x.f1)
    requires acc(x.f1.val)
    requires acc(x.val)
    ensures acc(res.val)
    ensures A(res) --* B3(x)
{
    res := x.f1
    package A(res) --* B3(x)
}
