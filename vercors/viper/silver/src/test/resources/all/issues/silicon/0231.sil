predicate P(r: Ref)

method test01(this: Ref)
  requires acc(P(this));
{
  exhale perm(P(this)) == write &&
         acc(P(this)) &&
         perm(P(this)) == none
}

method test02a(this: Ref)
  requires acc(P(this));
{
  //:: ExpectedOutput(exhale.failed:assertion.false)
  exhale (forperm r: Ref [P(r)] :: false) &&
         acc(P(this)) &&
         (forperm r: Ref [P(r)] :: false)
}

method test02b(this: Ref)
  requires acc(P(this));
{
  exhale /*(forperm[P] r :: false &&)*/
         acc(P(this)) &&
         (forperm r: Ref [P(r)] :: false)
}


method test04a(this: Ref) {
  inhale acc(P(this))

  //:: ExpectedOutput(exhale.failed:assertion.false)
  exhale acc(P(this)) && perm(P(this)) >= write
}

method test04b(this: Ref) {
  inhale acc(P(this))

  exhale acc(P(this))
  exhale (perm(P(this)) >= write ==> acc(P(this)))
}

method test04c(this: Ref) {
  inhale acc(P(this))

  exhale acc(P(this)) && (perm(P(this)) >= write ==> acc(P(this)))
}


method test03a(this: Ref)
{
  while (true)
    invariant [acc(P(this), write), true]
    invariant [true, (perm(P(this)) > none) ==> acc(P(this))]
    invariant [true, (perm(P(this)) >= write) ==> acc(P(this))] // Previously failed unexpectedly
  {}
}


method test03b(this: Ref)
{
  while (true)
    invariant [acc(P(this), write), true]
    invariant [true, (perm(P(this)) > none) ==> acc(P(this))]
    invariant [true, (perm(P(this)) >= write) ==> acc(P(this))]
  {
    exhale acc(P(this))
  }
}
