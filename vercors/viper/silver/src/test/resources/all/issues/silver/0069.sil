field f : Int

function g(x:Ref) : Int
  requires acc(x.f,write)
  //:: ExpectedOutput(consistency.error)
  ensures acc(x.f,write)
{ 0 }

method test(x: Ref) {
  inhale acc(x.f)
  var n: Int
  n := g(x)
}

field val:Ref

function f1(x:Ref):Int
  requires acc(x.val) && 1==1
  //:: ExpectedOutput(consistency.error)
  ensures acc(x.val) && 2==3

predicate P(x: Ref) { true }

function f2(x: Ref): Int
  requires P(x)
  ensures unfolding acc(P(x), 1/2) in true

function f3(x: Ref): Int
  requires true --* true
  //:: ExpectedOutput(consistency.error)
  ensures true --* true

function f4(x: Ref): Int
  requires true --* true
  ensures applying (true --* true) in true
