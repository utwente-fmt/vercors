domain Array {
  
  function loc(a: Array, i: Int): Ref
  
  function length(a: Array): Int
  
  function ref_to_array(ref: Ref): Array
  
  function ref_to_index(ref: Ref): Int
  
  axiom all_diff {
    (forall a: Array, i: Int :: { loc(a, i) } 0 <= i ==> ref_to_array(loc(a, i)) == a && ref_to_index(loc(a, i)) == i)
  }
  
  axiom length_nonneg {
    (forall a: Array :: length(a) >= 0)
  }
}

field val: Int

function p(q: Int, size: Int, rdAmount: Perm): Perm
  ensures (q % 2 != 0 && size >= 1 && q >= 0 && size >= 1 + q && ((q != 0 || result == write) && (q == 0 || result == write)) || q % 2 != 0 && (q + 1) % 2 == 0 && size >= 2 + q && q >= 0 && q >= -1 && size >= 1 + q && result == write || q % 2 != 0 && q % 2 == 0 && size >= 1 + q && q >= 0 && q >= 0 && size >= 1 + q && result == write || q % 2 != 0 && (q + 2) % 2 == 0 && size >= 3 + q && q >= 0 && q >= -2 && size >= 1 + q && result == write || q % 2 != 0 && (q + 1) % 2 == 0 && size >= 2 + q && q >= 0 && q >= -1 && size >= 1 + q && result == write || ((q + 1) % 2 != 0 && size >= 1 && q >= -1 && size >= 2 + q && ((q != 0 || result == rdAmount) && (q == 0 || result == none) && (q == 0 || result == none)) || (q + 1) % 2 != 0 && (q + 1) % 2 == 0 && size >= 2 + q && q >= -1 && q >= -1 && size >= 2 + q && result == none || (q + 1) % 2 != 0 && q % 2 == 0 && size >= 1 + q && q >= -1 && q >= 0 && size >= 2 + q && result == rdAmount || (q + 1) % 2 != 0 && (q + 2) % 2 == 0 && size >= 3 + q && q >= -1 && q >= -2 && size >= 2 + q && result == none || (q + 1) % 2 != 0 && (q + 1) % 2 == 0 && size >= 2 + q && q >= -1 && q >= -1 && size >= 2 + q && result == none) || (size >= 1 && size >= 2 && ((q != 0 || q == 1 || result == rdAmount) && (q == 0 || q == 1 || result == none) && (q == 1 || q == 0 || result == none) && (q != 1 || q != 0 || result == write) && (q != 1 || q == 0 || result == write)) || (q + 1) % 2 == 0 && size >= 2 + q && q >= -1 && size >= 2 && ((q == 1 || result == none) && (q != 1 || result == write)) || q % 2 == 0 && size >= 1 + q && q >= 0 && size >= 2 && ((q == 1 || result == rdAmount) && (q != 1 || result == write)) || (q + 2) % 2 == 0 && size >= 3 + q && q >= -2 && size >= 2 && ((q == 1 || result == none) && (q != 1 || result == write)) || (q + 1) % 2 == 0 && size >= 2 + q && q >= -1 && size >= 2 && ((q == 1 || result == none) && (q != 1 || result == write))) || ((q + 2) % 2 != 0 && size >= 1 && q >= -2 && size >= 3 + q && ((q != 0 || result == rdAmount) && (q == 0 || result == none) && (q == 0 || result == none)) || (q + 2) % 2 != 0 && (q + 1) % 2 == 0 && size >= 2 + q && q >= -2 && q >= -1 && size >= 3 + q && result == none || (q + 2) % 2 != 0 && q % 2 == 0 && size >= 1 + q && q >= -2 && q >= 0 && size >= 3 + q && result == rdAmount || (q + 2) % 2 != 0 && (q + 2) % 2 == 0 && size >= 3 + q && q >= -2 && q >= -2 && size >= 3 + q && result == none || (q + 2) % 2 != 0 && (q + 1) % 2 == 0 && size >= 2 + q && q >= -2 && q >= -1 && size >= 3 + q && result == none)) && (((q + 1) % 2 == 0 || size < 1 || q < -1 || size < 2 + q || (q != 0 || result >= rdAmount) && (q == 0 || result >= none) && (q == 0 || result >= none)) && ((q + 1) % 2 == 0 || q % 2 != 0 || size < 1 + q || q < -1 || q < 0 || size < 2 + q || result >= rdAmount) && ((q + 1) % 2 == 0 || (q + 1) % 2 != 0 || size < 2 + q || q < -1 || q < -1 || size < 2 + q || result >= none) && ((q + 1) % 2 == 0 || (q + 1) % 2 != 0 || size < 2 + q || q < -1 || q < -1 || size < 2 + q || result >= none) && ((q + 1) % 2 == 0 || (q + 2) % 2 != 0 || size < 3 + q || q < -1 || q < -2 || size < 2 + q || result >= none) && ((q % 2 == 0 || size < 1 || q < 0 || size < 1 + q || (q != 0 || result >= write) && (q == 0 || result >= write)) && (q % 2 == 0 || q % 2 != 0 || size < 1 + q || q < 0 || q < 0 || size < 1 + q || result >= write) && (q % 2 == 0 || (q + 1) % 2 != 0 || size < 2 + q || q < 0 || q < -1 || size < 1 + q || result >= write) && (q % 2 == 0 || (q + 1) % 2 != 0 || size < 2 + q || q < 0 || q < -1 || size < 1 + q || result >= write) && (q % 2 == 0 || (q + 2) % 2 != 0 || size < 3 + q || q < 0 || q < -2 || size < 1 + q || result >= write)) && ((size < 1 || size < 2 || (q != 0 || q == 1 || result >= rdAmount) && (q == 0 || q == 1 || result >= none) && (q == 1 || q == 0 || result >= none) && (q != 1 || q != 0 || result >= write) && (q != 1 || q == 0 || result >= write)) && (q % 2 != 0 || size < 1 + q || q < 0 || size < 2 || (q == 1 || result >= rdAmount) && (q != 1 || result >= write)) && ((q + 1) % 2 != 0 || size < 2 + q || q < -1 || size < 2 || (q == 1 || result >= none) && (q != 1 || result >= write)) && ((q + 1) % 2 != 0 || size < 2 + q || q < -1 || size < 2 || (q == 1 || result >= none) && (q != 1 || result >= write)) && ((q + 2) % 2 != 0 || size < 3 + q || q < -2 || size < 2 || (q == 1 || result >= none) && (q != 1 || result >= write))) && (((q + 2) % 2 == 0 || size < 1 || q < -2 || size < 3 + q || (q != 0 || result >= rdAmount) && (q == 0 || result >= none) && (q == 0 || result >= none)) && ((q + 2) % 2 == 0 || q % 2 != 0 || size < 1 + q || q < -2 || q < 0 || size < 3 + q || result >= rdAmount) && ((q + 2) % 2 == 0 || (q + 1) % 2 != 0 || size < 2 + q || q < -2 || q < -1 || size < 3 + q || result >= none) && ((q + 2) % 2 == 0 || (q + 1) % 2 != 0 || size < 2 + q || q < -2 || q < -1 || size < 3 + q || result >= none) && ((q + 2) % 2 == 0 || (q + 2) % 2 != 0 || size < 3 + q || q < -2 || q < -2 || size < 3 + q || result >= none)))

method testspec_skipping_indices1(arr: Array, size: Int, rdAmount: Perm)
  requires none < rdAmount && rdAmount < write
  requires (forall j: Int :: acc(loc(arr, j).val, p(j, size, rdAmount)))
  {
    //:: ExpectedOutput(assert.failed:insufficient.permission)    
    assert forall j:Int :: acc(loc(arr,j).val, (j < 0 || j >= size ? none : write)) // should fail! 
    assert forall j:Int :: acc(loc(arr,j).val, (j < 0 || j >= size ? none : (j % 2 == 0 ? rdAmount : write)))
    assert forall j:Int :: (j < 0 || j >= size ? none : (j % 2 == 0 ? rdAmount : write)) <= p(j, size, rdAmount)
    assert forall j:Int :: (j < 0 || j >= size ? none : (j % 2 == 0 ? rdAmount : write)) >= p(j, size, rdAmount)
    assert forall j:Int :: acc(loc(arr,j).val, (j < 0 || j >= size ? none : write)) // should fail, and does 
  }

method testspec_skipping_indices2(arr: Array, size: Int, rdAmount: Perm)
  requires none < rdAmount && rdAmount < write
  requires (forall j: Int :: acc(loc(arr, j).val, p(j, size, rdAmount)))
  {
    //assert forall j:Int :: acc(loc(arr,j).val, (j < 0 || j >= size ? none : write)) // should fail! 
    assert forall j:Int :: acc(loc(arr,j).val, (j < 0 || j >= size ? none : (j % 2 == 0 ? rdAmount : write)))
    assert forall j:Int :: (j < 0 || j >= size ? none : (j % 2 == 0 ? rdAmount : write)) <= p(j, size, rdAmount)
    assert forall j:Int :: (j < 0 || j >= size ? none : (j % 2 == 0 ? rdAmount : write)) >= p(j, size, rdAmount)
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    assert forall j:Int :: acc(loc(arr,j).val, (j < 0 || j >= size ? none : write)) // should fail, and does 
  }
