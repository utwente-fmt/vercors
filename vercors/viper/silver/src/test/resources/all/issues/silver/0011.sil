domain List1[T] {
  //:: ExpectedOutput(typechecker.error)
  function nil1(): List[X] /* X has not been declared! */

  function cons1(x: T, xs: List1[T]): List1[T]
}



domain Domain2[A] {
  function d2fun1(a: A): A
}

domain Any {}

method test3()
  requires forall a: Any :: d2fun1(a) == a
{}




domain Natural {
  function zero(): Natural

  function successor(n: Natural): Natural
}

domain List[A] {
  function nil(t: A): List[A]

  function cons(e: A, l: List[A]): List[A]

  function take(n: Natural, l: List[A]): List[A]

  axiom takeSuccessorCons {
    /* y should have same type A as elements of ys - hence this is not valid for all instances of List and hence rejected. */
    forall x: Natural, y: Natural, ys: List[A] ::
  //:: ExpectedOutput(typechecker.error)
      take(successor(x), cons(y, ys)) == cons(y, take(x, ys))
  }
}

/* Many axioms omitted. */

method property()
  ensures forall xs: List[Any] :: exists t: Any :: take(zero(), xs) == nil(t)
{ }
