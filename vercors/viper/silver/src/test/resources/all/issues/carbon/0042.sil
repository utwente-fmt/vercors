domain Unknown {
  function unknown(x:Int): Perm
}

field unknown_x: Int
field unknown_y: Int

method test02(x: Int) {
  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/135/)
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/42/)
  assert unknown(x) >= none
}

function fun01(x: Int): Perm
{ x <= 0 ? fun01(x + 1) : 1 / x }

method test03(x: Int) {
  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/135/)
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/42/)
  assert fun01(x) >= none
}

predicate token(diz: Ref){
  acc(diz.unknown_x,wildcard) && acc(diz.unknown_y,unknown(diz.unknown_x))
}

method test01(diz: Ref)
  requires acc(token(diz))
  ensures  acc(token(diz))
{
  unfold acc(token(diz))
  fold acc(token(diz))
  //:: ExpectedOutput(fold.failed:insufficient.permission)
  fold acc(token(diz))
}
