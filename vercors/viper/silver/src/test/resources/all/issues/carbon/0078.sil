// This issue exposed a Z3 feature/bug, in that multiple multi-pattern annotations will sometimes be ignored. 
// This can be worked around by passing an option to Z3: smt.qi.max_multi_patterns=1000
// It seems hard to write a small regression for this behaviour, since Z3 has other behaviour which kicks in for small examples.
// See also: https://github.com/Z3Prover/z3/issues/316

field Point__x: Int
field Point__y: Int

method add(p: Ref, v: Int, rd: Perm) returns (r: Ref)
    requires none < rd && rd < write
    requires acc(p.Point__x, rd) && acc(p.Point__y, rd)
    ensures acc(r.Point__x, rd) && acc(r.Point__y, rd)
    ensures acc(p.Point__x, rd) && acc(p.Point__y, rd)
    ensures r.Point__x == p.Point__x + v
    ensures r.Point__y == p.Point__y + v
{
    r := new(Point__x, Point__y)
    r.Point__x := p.Point__x + v
    r.Point__y := p.Point__y + v
}

method main() {
    var rd: Perm
    var p1: Ref
    var p2: Ref
    var p1_m : Ref

    p1 := new(Point__x, Point__y)
    p1.Point__x := 10
    p1.Point__y := 20

    fresh rd
    p1_m := new(Point__x, Point__y)
    p1_m.Point__x := p1.Point__x
    p1_m.Point__y := p1.Point__y
    
    // p1 moved into function add, remove all permissions
    exhale acc(p1.Point__x)
    exhale acc(p1.Point__y)
    p2 := add(p1_m, 5, rd)

    assert p2.Point__x == 15
}