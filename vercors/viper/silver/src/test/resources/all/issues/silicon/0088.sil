field f: Int

function fib(n: Int): Int
  requires n >= 0
  ensures (result == 0) == (n == 0)
  ensures result >= 0
{ n <= 1 ? n : fib(n - 1) + fib(n - 2) }

method test1() {
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert forall n: Int :: n >= 1 ==> fib(n) >= fib(n + 1)
}


predicate P(x: Ref) { true }

method test2(x: Ref)
  requires acc(P(x))
{
  assert forall n: Int :: n >= 1 ==> unfolding acc(P(x)) in n < n + 1
    /* Failed previously */
}
