field next: Ref

predicate valid(this: Ref) {
     acc(this.next, write)
  && (this.next != null ==> acc(valid(this.next), write))
}

function size(this: Ref): Int
  requires this != null
  requires acc(valid(this), write)
  ensures result >= 1
{ unfolding acc(valid(this), write) in (this.next == null ? 1 : 1 + size(this.next)) }

method unfoldOnce(this: Ref)
  requires this != null
  requires acc(valid(this), write)
  requires size(this) == 1
{
  unfold acc(valid(this), write)

  assert this.next == null

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert this.next != null
}

method unfoldTwice(this: Ref)
  requires this != null
  requires acc(valid(this), write)
  requires size(this) == 2
{
  unfold acc(valid(this), write)
  unfold acc(valid(this.next), write)

  assert this.next.next == null
}

method unfoldThrice(this: Ref)
  requires this != null
  requires acc(valid(this), write)
  requires size(this) == 3
{
  unfold acc(valid(this), write)
  unfold acc(valid(this.next), write)
  unfold acc(valid(this.next.next), write)

  assert this.next.next.next == null
}

function size_0(this: Ref): Int
  requires this != null
  requires acc(valid(this), write)
  ensures result >= 1
{
  unfolding acc(valid(this), write) in (
    this.next == null
      ? 1
      : unfolding acc(valid(this.next), write) in (this.next.next == null ? 2 : 2 + size_0(this.next.next)))
}

method unrollExpression(this: Ref)
  requires this != null
  requires acc(valid(this), write)
  requires size_0(this) == 2
{
  assert
    unfolding acc(valid(this), write) in
      unfolding acc(valid(this.next), write) in
        this.next.next == null
}
