predicate TK(n: Int)

field f: Int

method test(x: Ref) {
  var n0: Int

  inhale acc(x.f) && x.f == n0
  inhale TK(n0)

  exhale acc(x.f)
  inhale acc(x.f)
  var S1: Set[Int]
  assume
    forall m: Int :: {m in S1}
      m in S1 <==> n0 <= m &&
                   (m == n0 ||
                    (forall k: Int :: {TK(k)} n0 <= k && k < m ==> perm(TK(k)) == none))

  var rnd: Int

  if (rnd == 0) {
    assume x.f in S1
    //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/257/)
    assert x.f == n0
  } elseif (rnd == 1) {
    var n1: Int
    assume n1 in S1
    //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/257/)
    assert n1 == n0
  }
}
