function prio(this: Ref): Int

/*****************************************************************
 * List Nodes
 *****************************************************************/

field data: Ref
field next: Ref

predicate Lseg(this: Ref, end: Ref)
{
  this != end ==>
	acc(this.data) && acc(this.next) &&
  (this.next != null ==> acc(Lseg(this.next, end)) &&
  	unfolding acc(Lseg(this.next, end)) in this.next != end ==> prio(this.data) <= prio(this.next.data))
}

function contentNodes(this: Ref, end: Ref): Seq[Ref]
  requires acc(Lseg(this, end))
  ensures  this == end <==> result == Seq[Ref]()
  ensures  this != end ==> 0 < |result|
  ensures  this != end ==> result[0] == unfolding acc(Lseg(this, end)) in this.data
  ensures  this != end ==>
    forall i: Int, j: Int ::
      0 <= i && i < j && j < |result| ==>
        prio(result[i]) <= prio(result[j])
{
  this == end ? Seq[Ref]() :
                unfolding acc(Lseg(this, end)) in (
                    Seq(this.data) ++ (this.next == null ? Seq[Ref]() : contentNodes(this.next, end))
                )
}

