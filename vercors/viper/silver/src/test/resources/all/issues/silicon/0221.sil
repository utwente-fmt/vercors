//:: IgnoreFile(/carbon/issue/216/)
predicate P(x: Ref) { true }

method test01(x: Ref) {
  package (acc(P(x))) --* true {
      unfold acc(P(x))
  }
  assert  acc(P(x)) --* true
}

method test02(x: Ref) {
  package acc(P(x)) --* acc(P(x)) && unfolding acc(P(x)) in true
  assert  acc(P(x)) --* acc(P(x)) && unfolding acc(P(x)) in true
}

method test03(x: Ref, y: Ref, z: Ref) {
  inhale  acc(P(x)) && acc(P(y)) && acc(P(z))
  package (acc(P(y)) && acc(P(z))) --* acc(P(z)) && unfolding acc(P(z)) in true {
      unfold acc(P(x))
      unfold acc(P(y))
  }
  assert  acc(P(y)) && acc(P(z)) --* acc(P(z)) && unfolding acc(P(z)) in true
  assert  acc(P(y)) && acc(P(z))

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert  acc(P(x))
}

method test04(x: Ref, y: Ref) {
  inhale  acc(P(y))
  //:: ExpectedOutput(wand.not.wellformed)
  //:: MissingOutput(wand.not.wellformed, /carbon/issue/105/)
  //:: UnexpectedOutput(package.failed:insufficient.permission, /carbon/issue/105/)
  //:: MissingOutput(wand.not.wellformed, /silicon/issue/201/)
  //:: UnexpectedOutput(package.failed:insufficient.permission, /silicon/issue/201/)
  package acc(P(x)) --* acc(P(x)) && unfolding acc(P(y)) in true // The RHS is not self-framing
}
