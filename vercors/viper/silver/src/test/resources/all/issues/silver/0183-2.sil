function prio(this: Ref): Int

/*****************************************************************
 * List Nodes
 *****************************************************************/

field data: Int
field next: Ref

predicate lseg(this: Ref, end: Ref)
{
  this != end ==>
	acc(this.data) && acc(this.next) && lseg(this.next, end)
}



/*****************************************************************
 * Lists
 *****************************************************************/

field head: Ref

predicate List(this: Ref)
{
  acc(this.head) && lseg(this.head, null)
}

method insert(this: Ref, elem: Int) returns (idx: Int)
  requires List(this)
  ensures  List(this)
{
  idx := 0;  var tmp: Ref
  unfold List(this)
  if(this.head != null) { unfold lseg(this.head, null) } 

  if(this.head == null || elem <= this.head.data)
  {
    //:: ExpectedOutput(parser.error)
    ... // allocate new node at this.head, fold predicates
    tmp := new(data,next) // allocate new node
    tmp.data := elem;  tmp.next := this.head
    fold lseg(this.head, null)
    fold lseg(tmp, null);  this.head := tmp
  } else {
    var hd : Ref := this.head
    var ptr: Ref := hd // running variable
    idx := idx + 1

    fold lseg(hd, hd)  // for loop invariant $\label{lseg-establish-inv}$
    while(ptr.next != null &&
        unfolding lseg(ptr.next, null) in ptr.next.data < elem)
      invariant lseg(hd, ptr) && acc(ptr.next) && acc(ptr.data) //$\label{lseg-loopinv}$
      invariant lseg(ptr.next, null) //$\label{lseg-loopinv-end}$
    {
      unfold lseg(ptr.next, null)
      idx := idx + 1;  var ptrn: Ref := ptr.next
      fold lseg(ptrn, ptrn);  fold lseg(ptr, ptrn)
      concat(hd, ptr, ptrn) // add to end of list segment
      ptr := ptrn
    }
    //... // allocate new node at ptr.next, fold predicates
    tmp := new(data,next)
    tmp.data := elem
    tmp.next := ptr.next
    ptr.next := tmp
    fold lseg(ptr.next, null);  fold lseg(ptr, null)
    concat(hd, ptr, null) // concat two lsegs to obtain full list $\label{lseg-obtain-list}$
  } //$\label{lseg-insert-end}$
  fold List(this)
}

method concat(this: Ref, ptr: Ref, end: Ref)
  requires lseg(this, ptr) && lseg(ptr, end)
  requires end != null ==> acc(end.next, 1/2) // not forming a cycle
  ensures  lseg(this, end)
  ensures  end != null ==> acc(end.next, 1/2)
{
	if(this != ptr) {
		unfold lseg(this, ptr);  concat(this.next, ptr, end)
		fold lseg(this, end)
  }
}


//@TIMING:{"total":0.034,"timings":[9,91,92]}