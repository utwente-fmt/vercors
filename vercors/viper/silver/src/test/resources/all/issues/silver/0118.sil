function zip(xs: Seq[Ref], ys: Seq[Ref]): Seq[Ref]
  requires |xs| == |ys| || |xs| == |ys| + 1
{
  (ys == Seq[Ref]())
    ? xs
    : Seq(xs[0], ys[0]) ++ zip(xs[1..], ys[1..])
}

method test02(xs: Seq[Ref], ys: Seq[Ref], x: Ref, y: Ref)
  requires xs == Seq(x)
  requires ys == Seq(y)
  //:: UnexpectedOutput(postcondition.violated:assertion.false, /silver/issue/118/)
  ensures  Seq(x, y) == zip(xs, ys) // Fails w/o A1
{
  // assert zip(xs, ys) == Seq(x, y) ++ zip(xs[1..], ys[1..]) // (A1) Needed
  // assert zip(xs, ys) == Seq(x, y) ++ zip(Seq[Ref](), Seq[Ref]()) // Succeeds with A1
}

method test01(xs: Seq[Ref], ys: Seq[Ref])
  requires |xs| == |ys| || |xs| == |ys| + 1
{
  assert
    zip(xs, ys)
      ==
    ((ys == Seq[Ref]())
      ? xs
      : Seq(xs[0], ys[0]) ++ zip(xs[1..], ys[1..]))
}

