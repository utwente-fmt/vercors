function fun01(): Int
  ensures result != 0
  ensures 1 \ result != 2
  
function fun02(): Int
  ensures result != 0
  ensures 1 \ result != 2
  { 1 }
  
function fun03(): Int
  ensures [result != 0, true]
  //:: ExpectedOutput(not.wellformed:division.by.zero)
  //:: MissingOutput(not.wellformed:division.by.zero, /silicon/issue/160/)
  ensures 1 \ result != 2
  
function fun04(): Int
  ensures [result != 0, true]
  ensures 1 \ result != 2
  { 1 }
  
function fun05(): Int
  ensures [true, result != 0]
  //:: ExpectedOutput(not.wellformed:division.by.zero)
  ensures 1 \ result != 2
  
function fun06(): Int
  ensures [true, result != 0]
  //:: UnexpectedOutput(not.wellformed:division.by.zero, /silicon/issue/160/)
  ensures 1 \ result != 2
  { 1 }
  
function fun07(): Int
  ensures [true, result != 0]
  ensures [true, 1 \ result != 2]
  
function fun08(): Int
  ensures [true, result != 0]
  ensures [true, 1 \ result != 2]
  { 1 }
  
function fun11(x: Int): Int
  requires x != 0
  requires 1 \ x != 2
  
function fun12(x: Int): Int
  requires x != 0
  requires 1 \ x != 2
  { 1 }
  
function fun13(x: Int): Int
  requires [x != 0, true]
  //:: ExpectedOutput(not.wellformed:division.by.zero)
  //:: MissingOutput(not.wellformed:division.by.zero, /silicon/issue/160/)
  requires 1 \ x != 2
  
function fun14(x: Int): Int
  requires [x != 0, true]
  //:: ExpectedOutput(not.wellformed:division.by.zero)
  //:: MissingOutput(not.wellformed:division.by.zero, /silicon/issue/160/)
  requires 1 \ x != 2
  { 1 }
  
function fun15(x: Int): Int
  requires [true, x != 0]
  //:: ExpectedOutput(not.wellformed:division.by.zero)
  requires 1 \ x != 2
  
function fun16(x: Int): Int
  requires [true, x != 0]
  //:: ExpectedOutput(not.wellformed:division.by.zero)
  requires 1 \ x != 2
  { 1 }
  
function fun17(x: Int): Int
  requires [true, x != 0]
  requires [true, 1 \ x != 2]
  
function fun18(x: Int): Int
  requires [true, x != 0]
  requires [true, 1 \ x != 2]
  { 1 }