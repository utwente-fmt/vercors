/* Various expressions used while fixing bugs in the parser */

field f: Ref
field g: Int

function sq(i: Int): Int {i * i}

function id(x: Ref): Ref {x}

predicate P(x: Ref) { acc(x.g, write) && x.g > 0 }

method test(x: Ref)
  requires acc(x.g) && acc(x.f)
  requires acc(x.f.g)
{
  assume false
  assert false

  var a: Int := 0

  assert 1 + 1 > 0
  assert 0 < 1 + 1
  assert x.g > 1 + 1
  assert x.g > 1 + x.g
  assert x.g > x.g + 1
  assert x.f.g > x.f.g + 1
  assert 1 != 1 - 1 * 1
  assert sq(a) * sq(a) < a
  assert 1 + sq(a) * sq(a) + sq(x.g) != 3

  a := 1
  x.g := 1
  x.f.g := 1
  id(x).g := 1

  fold acc(P(x), write)
  fold acc(P(x))

  assert id(x).g == unfolding acc(P(x)) in x.g
  assert id(x).g == (unfolding acc(P(x)) in x).g

  assert |[-1..10)| == 11

  inhale acc(x.f, wildcard)
  inhale a > 0
}

field integer: Int

method foo(x: Ref) returns (n: Int)
  requires acc(x.integer)
  ensures acc(x.integer) && n < x.integer
{
  n := x.integer
  x.integer := n + 1
}

field Node_n: Ref

method test2(this: Ref)
  requires this != null && acc(this.Node_n, write)
{
  assume false
  assert this != this.Node_n
}
