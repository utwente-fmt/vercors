domain GlobalKPermission {

  unique function globalK$(): Perm

  axiom globalKReadOnly {
    (globalK$() > none) && (write > globalK$())
  }
}

field old$methodPermission: Perm

field joinable$: Bool

field Nodenext$: Ref

field Nodeval$: Int

field old$Nodereverse_in_place$0: Seq[Int]

field par$Nodereverse_in_place$this$_4: Ref

field par$Nodereverse_in_place$k$: Perm

function Nodevals$(this$_2: Ref): Seq[Int]
  requires this$_2 != null
  requires acc(Nodelist$(this$_2), wildcard)
{
  (unfolding acc(Nodelist$(this$_2), wildcard) in (this$_2.Nodenext$ == null ? Seq(this$_2.Nodeval$) : Seq(this$_2.Nodeval$) ++ Nodevals$(this$_2.Nodenext$)))
}

function Nodereverse_vals$(this$_3: Ref): Seq[Int]
  requires this$_3 != null
  requires acc(Nodelist$(this$_3), wildcard)
{
  (unfolding acc(Nodelist$(this$_3), wildcard) in (this$_3.Nodenext$ == null ? Seq(this$_3.Nodeval$) : Nodereverse_vals$(this$_3.Nodenext$) ++ Seq(this$_3.Nodeval$)))
}

predicate Node$MonitorInvariant(this$: Ref) {
  true
}

predicate Nodelist$(this$_1: Ref) {
  acc(this$_1.Nodenext$, write) && acc(this$_1.Nodeval$, write) && ((this$_1.Nodenext$ != null) ==> acc(Nodelist$(this$_1.Nodenext$), write))
}

method Nodereverse_in_place$(this$_4: Ref, k$: Perm) returns (r: Ref)
  requires this$_4 != null
  requires k$ > none
  requires write > k$
  requires acc(Nodelist$(this$_4), write)
  ensures (r != null) && acc(Nodelist$(r), write)
  ensures Nodevals$(r) == old(Nodereverse_vals$(this$_4))
{
  var n$: Ref
  var a$: Ref
  var b$: Ref
  var c$: Ref
  var l: Ref
  var y: Ref
  l := this$_4
  r := null
  while (l != null)
    invariant (l != null) ==> acc(Nodelist$(l), write)
    invariant (r != null) ==> acc(Nodelist$(r), write)
    invariant old(Nodereverse_vals$(this$_4)) == (l == null ? Seq[Int]() : Nodereverse_vals$(l)) ++ (r == null ? Seq[Int]() : Nodevals$(r))
  {
    if (r != null) {
      unfold acc(Nodelist$(r), write)
      fold acc(Nodelist$(r), write)
    }
    unfold acc(Nodelist$(l), write)
    if (l.Nodenext$ != null) {
      unfold acc(Nodelist$(l.Nodenext$), write)
      fold acc(Nodelist$(l.Nodenext$), write)
    }
    y := l.Nodenext$
    l.Nodenext$ := r
    r := l
    fold acc(Nodelist$(r), write)
    l := y
  }
}
