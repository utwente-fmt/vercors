field next : Ref
field val : Int

predicate list(start : Ref)
{
  acc(start.val) && acc(start.next) && 
    (start.next != null ==> list(start.next))
}

function elems(start: Ref) : Seq[Int]
  requires list(start)
{
  unfolding list(start) in (
    (start.next == null ?
      Seq(start.val) :
      Seq(start.val) ++ elems(start.next)
    )
  )  
}

predicate lseg(start : Ref, end:Ref)
{
  acc(start.val) && acc(start.next) && 
    (start.next != end ==> lseg(start.next,end))
}

function lsegelems(start: Ref, end: Ref) : Seq[Int]
  requires lseg(start,end)
{
  unfolding lseg(start,end) in (
    (start.next == end ?
      Seq(start.val) :
      Seq(start.val) ++ lsegelems(start.next,end)
    )
  )  
}


method addAtEnd(l1:Ref, l2:Ref)
requires lseg(l1,l2) && acc(l2.val) && acc(l2.next) && list(l2.next)
ensures lseg(l1,old(l2.next)) && list(old(l2.next)) && elems(old(l2.next))==old(elems(l2.next)) && lsegelems(l1,old(l2.next)) == old(lsegelems(l1,l2)) ++ Seq(old(l2.val))
{
unfold lseg(l1, l2) // acc(l1.next)

var end: Ref := l2.next
unfold list(end) // acc(end.next)
//assert l2 != end // necessary for Silicon : follows from permissions
//assume l2 != end
assume (l1.next == l2) // was an if-condition
fold lseg(l2, end)
fold lseg(l1, end)
fold list(end)

//:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/286/)
assert lsegelems(l1,old(l2.next)) == old(lsegelems(l1,l2)) ++ Seq(old(l2.val))
}
