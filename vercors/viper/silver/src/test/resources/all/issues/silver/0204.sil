//:: IgnoreFile(/carbon/issue/216/)
field val: Int

define NodeSeg() (
    (forall n: Ref :: acc(n.val))
)

method test1(head: Ref)
{
	package (NodeSeg()) --* true
	exhale  (NodeSeg()) --* true
}

method test2(head: Ref)
{
	package (forall n: Ref :: acc(n.val)) --* true
	exhale  (forall n: Ref :: acc(n.val)) --* true
}

method test3(xs: Set[Bool]) {
  package (forall b1: Bool :: b1 in xs ==> true) --* true
  exhale  (forall b2: Bool :: b2 in xs ==> true) --* true
}

domain foo {
  function f1(x: Int): Bool
  function f2(x: Int, y: Int): Bool
  function f3(x: Int, y: Int, z: Int): Bool

  function g2(x: Int, y: Ref): Bool

  axiom f1def { forall x: Int :: f1(x) }
}

method test4() {
  package
        (forall x: Int, y: Int :: f2(x, y) ==> (forall z: Int :: f3(x, y, z)))
    --* (forall q: Int :: f1(q))

  exhale
        (forall a: Int, b: Int :: f2(a, b) ==> (forall q: Int :: f3(a, b, q)))
    --* (forall c: Int :: f1(c))
}

method test5() {
  package
        (forall x: Int, y: Int :: f2(x, y) ==> (forall z: Int :: f3(x, y, z)))
    --* (forall q: Int :: f1(q))

  //:: ExpectedOutput(exhale.failed:wand.not.found)
  exhale
        (forall x: Int, y: Int :: f2(y, x) ==> (forall z: Int :: f3(x, y, z)))
    --* (forall q: Int :: f1(q))
}

method test6() {
  package (forall x: Int, y: Int :: f2(x, y)) --* true

  //:: ExpectedOutput(exhale.failed:wand.not.found)
  exhale (forall x: Int :: forall y: Int :: f2(x, y)) --* true
    /* Current wand lookup algorithm is too syntactical/structural */
}

method test7() {
  package (forall x: Int, y: Ref :: g2(x, y)) --* true

  //:: ExpectedOutput(exhale.failed:wand.not.found)
  exhale  (forall y: Ref, x: Int :: g2(x, y)) --* true
    /* Current wand lookup algorithm is too syntactical/structural */
}
