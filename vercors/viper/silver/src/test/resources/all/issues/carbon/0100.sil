// oldC2SCases/unrelatedLockchange.chalice
field mustReleaseBounded$: Ref

field mustReleaseUnbounded$: Ref

field Main$f: Int

predicate Main$MonitorInvariant(this$_2: Ref) {
  true && acc(this$_2.Main$f, write)
}

method Main$change(this: Ref, m: Ref, n: Int)
  requires this != null
  requires m != null
  ensures [true, perm(m.mustReleaseBounded$) == none]
  ensures [true, write - perm(m.mustReleaseBounded$) == write]
  ensures [true, acc(m.mustReleaseUnbounded$, write - perm(m.mustReleaseBounded$))] 
  ensures [true, (forperm r$_15: Ref [r$_15.mustReleaseUnbounded$] :: false)]
{
  assert m != null
  // Check if we already acquired lock
  assert perm(m.mustReleaseBounded$) + perm(m.mustReleaseUnbounded$) == none
  inhale acc(Main$MonitorInvariant(m), write)
  unfold acc(Main$MonitorInvariant(m), write)
  // Inhaling an unbounded (= fresh) release obligation
  inhale acc(m.mustReleaseUnbounded$, write)
  m.Main$f := n
}
