method multiple_arrays(arr1: Array, arr2: Array)
requires forall i: Int :: true ==> acc(loc(arr1, i).val, 0 <= i && i < 10 ? write : none)
{
    var t: Int := 0
    while (t < 10)
	invariant forall i: Int :: true ==> acc(loc(arr1, i).val, 0 <= i && i < 10 ? write : none)
	invariant 0 <= t && t <= 10
    {
        loc(arr1, t).val := 0
        //:: ExpectedOutput(assignment.failed:insufficient.permission)
        loc(arr2, t).val := 0
        t := t + 1
    }
}

field val: Int

domain Array {
	function loc(a: Array, i: Int): Ref
	function length(a: Array): Int
	function ref_to_array(ref: Ref): Array
	function ref_to_index(ref: Ref): Int

	axiom all_diff {
		forall a: Array, i: Int :: {loc(a, i)} ref_to_array(loc(a, i)) == a && ref_to_index(loc(a, i)) == i
	}
	axiom length_nonneg {
		forall a:Array :: length(a) >= 0
	}
}
