field f: Ref

predicate P(r$: Ref) {
  true
}

method test(c: Ref, d: Ref, e: Ref)
{
  inhale acc(P(c), write)
  inhale acc(P(d), write)
  //:: UnexpectedOutput(exhale.failed:insufficient.permission, /Silicon/issue/232/)
  exhale (perm(P(e)) > none ? acc(P(e), perm(P(e))) : true)
}

method test1(this: Ref)
  requires acc(P(this), write);
{
  exhale acc(P(this), none);
  exhale acc(P(this), perm(P(this)));
}

method test2(this: Ref)
  requires acc(P(this), write);
{
  exhale (perm(P(this)) > none ? acc(P(this), perm(P(this))) : true)
}

method test3(this: Ref)
  requires acc(this.f, write)
  requires acc(P(this.f), write);
{
  exhale acc(P(this.f), perm(P(this.f)));
}

method test4(this: Ref)
  requires acc(this.f, write)
  requires acc(P(this.f), write);
{
  exhale (perm(P(this.f)) > none ? acc(P(this.f), perm(P(this.f))) : true)
}

method test5(this: Ref, a: Ref)
  requires acc(this.f, 1/10)
  requires acc(P(a), write);
{
  exhale (perm(P(this.f)) > none ? acc(P(this.f), perm(P(this.f))) : true)
}

method test6(this: Ref, a: Ref, b: Ref)
{
  inhale acc(P(this), write);
  exhale (perm(P(this)) > none ? acc(P(this), perm(P(this))) : true)
  inhale acc(P(a), write);
  exhale (perm(P(a)) > none ? acc(P(a), perm(P(a))) : true)
  inhale acc(P(b), write);
  exhale (perm(P(b)) > none ? acc(P(b), perm(P(b))) : true)
}
