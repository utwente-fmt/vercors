field val: Int

field nxt: Ref

function fun(x: Ref): Int
  requires x != null
  requires acc(list(x), wildcard)
{ 1 }

predicate list(x: Ref) {
  acc(x.val, write) && acc(x.nxt, write) && ((x.nxt != null) ==> acc(list(x.nxt), write))
}

method lemma(x: Ref, k: Perm)
  requires x != null
  requires k > none
  requires acc(list(x), k)
  ensures  acc(list(x), k)
  ensures  fun(x) > 0 
{
  var k1: Perm
  
  unfold acc(list(x), k)
  
  if (x.nxt != null) {
    fresh k1
    constraining(k1) {
      lemma(x.nxt, k1)
    }
  }
  
  fold acc(list(x), k)
}
