// oldC2SCases/linked_list.chalice
field Listvalue$: Int

field Listnext$: Ref

function Listlen$(this$_2: Ref): Int
  requires this$_2 != null
  requires acc(Listinv$(this$_2), wildcard)
{
  (unfolding acc(Listinv$(this$_2), wildcard) in (this$_2.Listnext$ == null ? 1 : 1 + Listlen$(this$_2.Listnext$)))
}

function Listget$(this$_3: Ref, index: Int): Int
  requires this$_3 != null
  requires acc(Listinv$(this$_3), wildcard)
  requires 0 <= index
  requires index < Listlen$(this$_3)
{
  (unfolding acc(Listinv$(this$_3), wildcard) in (index == 0 ? this$_3.Listvalue$ : Listget$(this$_3.Listnext$, index - 1)))
}

predicate Listinv$(this$_1: Ref) {
  acc(this$_1.Listvalue$, write) && acc(this$_1.Listnext$, write) && ((this$_1.Listnext$ != null) ==> acc(Listinv$(this$_1.Listnext$), write))
}

method Listappend$(this$_4: Ref, k$: Perm, newval: Int)
  requires this$_4 != null
  requires k$ > none
  requires write > k$
  requires acc(Listinv$(this$_4), write)
  requires 0 < Listlen$(this$_4)
  ensures acc(Listinv$(this$_4), write)
  ensures Listlen$(this$_4) > 0
  ensures Listlen$(this$_4) == old(Listlen$(this$_4)) + 1
  //:: UnexpectedOutput(postcondition.violated:assertion.false, /silicon/issue/359/)
  ensures Listget$(this$_4, Listlen$(this$_4) - 1) == newval
  ensures (forall i: Int :: true && (i in [0..old(Listlen$(this$_4)))) ==> (Listget$(this$_4, i) == old(Listget$(this$_4, i))))
{
  var n$: Ref
  var n: Ref
  var newK$: Perm
  var newK$_1: Perm
  unfold acc(Listinv$(this$_4), write)
  if (this$_4.Listnext$ == null) {
    n$ := new(Listvalue$, Listnext$)
    n$.Listnext$ := null
    n := n$
    n.Listvalue$ := newval
    n.Listnext$ := null
    fold acc(Listinv$(n), write)
    this$_4.Listnext$ := n
    assert Listget$(this$_4.Listnext$, Listlen$(n) - 1) == newval
  } else {
    fresh newK$
    constraining(newK$) {
      Listlemma_len_positive$(this$_4.Listnext$, newK$)
    }
    fresh newK$_1
    constraining(newK$_1) {
      Listappend$(this$_4.Listnext$, newK$_1, newval)
    }
  }
  fold acc(Listinv$(this$_4), write)
}

method Listlemma_len_positive$(this$_5: Ref, k$_1: Perm)
  requires this$_5 != null
  requires k$_1 > none
  requires write > k$_1
  requires acc(Listinv$(this$_5), k$_1)
  ensures acc(Listinv$(this$_5), k$_1)
  ensures Listlen$(this$_5) > 0
{
  var n$_1: Ref
  var newK$_2: Perm
  unfold acc(Listinv$(this$_5), k$_1)
  if (this$_5.Listnext$ != null) {
    fresh newK$_2
    constraining(newK$_2) {
      Listlemma_len_positive$(this$_5.Listnext$, newK$_2)
    }
  }
  fold acc(Listinv$(this$_5), k$_1)
}
