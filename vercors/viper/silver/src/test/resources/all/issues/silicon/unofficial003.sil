/* Examples of nested branches, which (at some point) were not properly handled
 * by the code responsible for axiomatising functions. The problem was reported
 * by Alex Summers.
 */

field v: Int
field r: Ref
field l: Ref

function fun01(x: Ref, b1: Bool, b2: Bool): Int
  requires acc(x.v, 1/3)
  requires b1 ==> acc(x.v, 1/3)
  requires b2 ==> acc(x.v, 1/3)
{
  x.v
}

method test01(x: Ref, b1: Bool, b2: Bool)
  requires acc(x.v)
{
  x.v := 4
  assert fun01(x, b2, b1) == 4
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}


predicate P01(x: Ref, b: Bool) {
     (b ==> acc(x.v))
  && acc(x.r) && (x.r != null ==> acc(P01(x.r, b)))
}

function fun02(x: Ref, b: Bool): Bool
  requires acc(P01(x, b))
{
  unfolding acc(P01(x, b)) in (x.r == null ? b : fun02(x.r, b))
}

method test02(x: Ref, b: Bool)
  requires acc(P01(x, b))
{
  unfold P01(x, b)
  assume b && x.r == null
  fold P01(x, b)
  assert fun02(x, b)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert !fun02(x, b)
}

method test03(x: Ref, b: Bool)
  requires acc(P01(x, b))
{
  unfold P01(x, b)
  assume b
  fold P01(x, b)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun02(x, b)
}


predicate Tree(x: Ref) {
     acc(x.v)
  && acc(x.l) && (x.l != null ==> acc(Tree(x.l)))
  && acc(x.r) && (x.r != null ==> acc(Tree(x.r)))
}

function vals(x: Ref): Seq[Int]
  requires acc(Tree(x))
{
  unfolding acc(Tree(x)) in (x.l == null ? Seq[Int]() : vals(x.l)) ++ Seq(x.v) ++ (x.r == null ? Seq[Int]() : vals(x.r))
}
