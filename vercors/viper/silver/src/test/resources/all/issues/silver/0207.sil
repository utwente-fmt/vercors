domain Foo {
  function foo(): Foo
  function bar(f: Foo): Foo
}

define qux(f) f == foo()

method test(f: Foo)
  requires qux(bar(f))



/* Originally filed example */

define isNull(t) t == nullNode()

domain BST {
  function value(t: BST): Int
  function left(t: BST): BST
  function right(t: BST): BST
  function nullNode(): BST
  function isParent(p: BST, c: BST): Bool

//  axiom isNull_recursive {
//    forall t: BST :: {nullNode()} /* Illegal trigger */
//      isNull(t) ==> isNull(left(t)) && isNull(right(t))
//  }
  axiom left_smaller {
    forall t: BST :: {value(t), value(left(t))}
      !isNull(left(t)) ==> value(t) > value(left(t))
  }
  axiom left_sub_tree_smaller {
    forall t: BST, c: BST :: {value(t), value(c)}{isParent(left(t), c)}
      !isNull(t) && !isNull(c) && isParent(left(t), c) ==> value(c) < value(t)
  }
  axiom right_sub_tree_larger {
    forall t: BST, c: BST :: {value(t), value(c)}
      !isNull(t) && !isNull(c) && isParent(right(t), c) ==> value(c) > value(t)
  }
  axiom isParent_reflexive {
    forall t: BST :: {isParent(t,t)}
      isParent(t,t)
  }
  axiom isParent_base {
    forall t: BST :: {isParent(t, left(t))}{isParent(t, right(t))}
      isParent(t, left(t)) && isParent(t, right(t))
  }
  axiom isParent_recursive {
    forall p: BST, c: BST :: {isParent(p, left(c))}{isParent(p, right(c))}
      isParent(p, c) ==> isParent(p, left(c)) && isParent(p, right(c))
  }
  axiom isParent_left {
    forall p: BST, c: BST :: {isParent(left(p), c)}
      !isNull(p) && isParent(p, c) && value(p) > value(c) ==> !isNull(left(p)) && isParent(left(p), c)
  }
}

method getMin(t: BST) returns (min: Int)
  requires !isNull(t)
  requires forall t1: BST :: t1 == t || !isParent(t1, t) // t is root
  ensures forall t1: BST :: {value(t1)}
    !isNull(t1) && isParent(t, t1) ==> value(t1) >= min
{
  assume false /* Program verification not necessary */

  var currentNode: BST := t
  while (!isNull(left(currentNode)))
    invariant isParent(t, currentNode)
    invariant !isNull(currentNode)
    invariant t == currentNode || value(currentNode) < value(t)
    invariant t != currentNode && !isNull(left(t)) ==> isParent(left(t), currentNode)
    invariant forall pc: BST :: {value(pc), value(currentNode)}
      !isNull(pc) && isParent(pc, currentNode) ==> value(pc) >= value(currentNode)
  {
    currentNode := left(currentNode)
  }
  min := value(currentNode)
}
