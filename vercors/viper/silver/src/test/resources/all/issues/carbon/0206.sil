field val: Int 

domain Array {
    function loc(a: Array, i: Int): Ref
    function length(a: Array): Int
    function first(r: Ref): Array
    function second(r: Ref): Int

    axiom injectivity {
        forall a: Array, i: Int :: { loc(a, i) }
            first(loc(a, i)) == a && second(loc(a, i)) == i
    }

    axiom lengthNonNegative {
        forall a: Array :: { length(a) } length(a) >= 0
    }
}

function elements(this: Array): Set[Int]
    requires forall i: Int :: { loc(this, i).val } i in [0..length(this)) ==> acc(loc(this, i).val) 
    ensures forall i: Int :: { loc(this,i).val }{ i in [0..length(this)) } i in [0..length(this)) ==> loc(this,i).val in result

domain Foobar {
    function dummy(b:Bool): Bool
}

method swap(a: Array, x: Int, y: Int)
    requires forall i: Int :: { loc(a, i).val } i in [0..length(a)) ==> acc(loc(a, i).val) 
    requires 0 <= x && x < length(a)
    requires 0 <= y && y < length(a)
    ensures forall i: Int :: { loc(a, i).val } i in [0..length(a)) ==> acc(loc(a, i).val) 
    //:: ExpectedOutput(postcondition.violated:assertion.false)
    ensures elements(a) == old(elements(a))
{
    assume forall j:Int :: { j in elements(a) } 0 <= j && j < length(a) ==> dummy( j in elements(a) )
    //assert false
    loc(a,x).val := -77   
}