/* Gist of an issue of Silicon that Peter MÃ¼ller found during our Viper hackathon in Nov'13.
 * See Silicon commit d1a9909e48ea.
 */

field sibling: Ref; // BinomialHeapNode

predicate lseg(this: Ref, end: Ref) {
  this != end
  ==>
  acc(this.sibling) && this.sibling != null &&
  acc(lseg(this.sibling, end))
}

function degrees(this: Ref, last: Ref): Seq[Int]
  requires this != null && acc(lseg(this, last));
{
  this == last
    ? Seq[Int]()
    : unfolding acc(lseg(this, last))
      in this.sibling == null ? Seq(0) : Seq(0) ++ degrees(this.sibling, last)
}

method join(s1: Ref, m1: Ref, l1: Ref)
  requires s1 != null && m1 != null;
  requires acc(lseg(s1, m1));
  requires acc(lseg(m1, l1));
  ensures  acc(lseg(s1, l1));
{
  assume s1 != m1

  unfold acc(lseg(s1, m1));
  join(s1.sibling, m1, l1);
  fold acc(lseg(s1, l1));

  assume s1 != l1;

  var ys: Seq[Int] := degrees(s1, l1)
  var xs: Seq[Int] := unfolding acc(lseg(s1, l1)) in (Seq(0) ++ degrees(s1.sibling, l1))

  assert xs == ys
}


