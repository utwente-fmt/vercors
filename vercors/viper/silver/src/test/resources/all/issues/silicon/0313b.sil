//:: IgnoreFile(/carbon/issue/216/)

field value: Int;
field next: Ref;

predicate List(this: Ref) {
    this != null ==> (acc(this.value) && acc(this.next) && List(this.next))
}

function length(this: Ref): Int
    requires List(this)
    ensures result >= 0
{
    this == null ? 0 : unfolding List(this) in 1 + length(this.next)
}

function item_at(this: Ref, count: Int): Int
    requires List(this) && count < length(this) && count >= 0
{
    unfolding List(this) in (count == 0 ? this.value : item_at(this.next, count-1))
}

method test(list: Ref)
    requires List(list);
{
    label new_promise;
    package (
            List(list) &&
            length(list) == old[new_promise](length(list)) &&
            (
                forall i: Int :: {item_at(list, i)}
                (0 <= i && i < length(list)) ==>
                2 == old[new_promise](item_at(list, i))
            )
        )
        --*
        true
}
