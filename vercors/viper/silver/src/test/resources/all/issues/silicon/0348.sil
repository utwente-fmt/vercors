function foo(x: Ref): Int

function bar(i: Int): Bool
  requires 0 < i

method test(x: Ref) {
  //:: ExpectedOutput(application.precondition:assertion.false)
  assume bar(foo(x))
}

field f: Int

predicate P(x: Ref) { acc(x.f) }

function inner(x: Ref): Int
  requires P(x)

function outer(x: Ref, v: Int): Bool
  requires P(x)
  requires unfolding P(x) in v == 0

method test01(x: Ref)
  requires P(x)
  //:: ExpectedOutput(application.precondition:assertion.false)
  requires outer(x, inner(x))

method test02(x: Ref) {
  inhale P(x)
  //:: ExpectedOutput(application.precondition:assertion.false)
  inhale outer(x, inner(x))
}

function arrayAt(buffer: Ref, index: Int): Int
  requires gapBuffer(buffer)
  requires unfolding gapBuffer(buffer) in index >= 0

function bufferRight(buffer: Ref): Int
  requires gapBuffer(buffer)

predicate gapBuffer(buffer:Ref) { acc(buffer.right) }

field right: Int

method cursor_left(buffer: Ref)
  requires gapBuffer(buffer)
  requires bufferRight(buffer) == 4
  requires arrayAt(buffer, bufferRight(buffer)) == 5
{ }



method callee(i: Int)
  requires 0 < i

method caller(x: Ref) {
  inhale P(x)
  //:: ExpectedOutput(call.precondition:assertion.false)
  callee(inner(x))
}
