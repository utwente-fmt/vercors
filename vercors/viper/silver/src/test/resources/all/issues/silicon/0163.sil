field x: Int

function inhaleTrue(this: Ref): Int
  requires [true, true]
{
  0
}

function onlyWorksWithInhale(i: Int): Int
    requires [i > 17, true]
    ensures result > 17
{
    i
}

function onlyWorksWithPreExhale(i2: Int): Int
{
    onlyWorksWithInhale(i2)
}

function onlyWorksWithInhale2(i: Int): Int
    requires [true, i > 17]
    //:: ExpectedOutput(postcondition.violated:assertion.false)
    ensures result > 17
{
    i
}

function onlyWorksWithPreExhale2(i2: Int): Int
{
    //:: ExpectedOutput(application.precondition:assertion.false)
    onlyWorksWithInhale2(i2)
}

function helper(r: Ref): Int

function otherRef(): Ref

function postInhale(r: Ref): Ref
    ensures [helper(result) == 2, true]
{
    otherRef()
}

function main(r2: Ref): Ref
    ensures helper(result) == 2
{
    postInhale(r2)
}

function main2(i3: Int): Int
    ensures result > 17
{
    onlyWorksWithInhale(i3)
}



