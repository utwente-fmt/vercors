field f: Int

predicate P(self: Ref) { acc(self.f) }

method test(x: Ref, y: Ref)
    requires P(x) && P(y)
{
    var i: Int := 0;
    // assert (unfolding P(x) in x.f) == old(unfolding P(x) in x.f)
    // assert (unfolding P(y) in y.f) == old(unfolding P(y) in y.f)
    while (i < 10)
        invariant acc(P(x), 1/2) && acc(P(y), 1/2) && i <= 10
    {
        i := i + 1;
    }
    //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/259/)
    assert (unfolding P(x) in x.f) == old(unfolding P(x) in x.f)
    //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/259/)
    assert (unfolding P(y) in y.f) == old(unfolding P(y) in y.f)
} 