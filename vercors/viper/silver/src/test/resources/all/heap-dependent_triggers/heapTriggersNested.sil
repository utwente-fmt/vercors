field f: Int
field r: Ref

method m1(xs: Set[Ref]) {

    inhale forall x: Ref :: {x.r} x in xs ==> acc(x.r)
    inhale forall x: Ref :: {x.r.r} x in xs ==> acc(x.r.r)
    inhale forall x: Ref :: {x.r.f} x in xs ==> acc(x.r.f)
    inhale forall x: Ref :: {x.r.r.f} x in xs ==> acc(x.r.r.f)

    var a: Ref
    assume a in xs
    assert perm(a.r) >= write

    var v: Ref
    v := a.r

    assert perm(a.r.f) >= write
    assert perm(a.r.r.f) >= write

}
