field f: Int

method m7(xs: Seq[Ref]) {

    assume |xs| >= 1
    inhale forall i: Int :: {xs[i].f} 0 <= i && i < |xs| ==> acc(xs[i].f)

    var v: Int
    v := xs[0].f
    assert perm(xs[0].f) >= write

    exhale forall i: Int :: {xs[i].f} 0 <= i && i < |xs| ==> acc(xs[i].f)
    assert forall i: Int :: 0 <= i && i < |xs| ==> perm(xs[i].f) == none
}

method m2(xs: Set[Ref], ys: Set[Ref]) {

    inhale forall x: Ref :: {x.f} x in xs ==> acc(x.f)
    inhale forall y: Ref :: {y.f} y in ys ==> acc(y.f)

    var a: Ref
    assume a in xs
    assume a in ys
    assert perm(a.f) == 2*write
    assert false
}

method m3(xs: Seq[Ref]) {
    var y: Ref
    inhale forall x: Ref :: x in xs ==> acc(x.f)
    inhale forall x: Ref :: {x.f} x in xs ==> x != y
    var z: Ref
    assume z in xs
    //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/257/)
    assert z != y
}
