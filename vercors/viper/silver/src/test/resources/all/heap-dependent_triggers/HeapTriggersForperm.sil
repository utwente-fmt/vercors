field f: Int

method m1(xs: Set[Ref], y: Ref, z: Ref) {

    inhale forall x: Ref :: x in xs ==> acc(x.f)
    inhale forall x: Ref :: x == y ==> acc(x.f)
    inhale forall x: Ref :: x == z ==> acc(x.f)
    inhale forall x: Ref :: {x.f} x == y || x == z ==> x.f == 0
    inhale forall x: Ref :: {x.f} x in xs ==> x.f == 0

    assert forperm x: Ref [x.f] :: x.f == 0

}

method m2(xs: Set[Ref], y: Ref) {

    inhale forall x: Ref :: {x.f} x in xs ==> acc(x.f)

    assert forall x: Ref :: {x.f} x in xs ==> perm(x.f) >= write
    inhale forall x: Ref :: {x.f} x in xs ==> x.f != 0

    assert forperm x: Ref [x.f] :: x in xs ==> x.f != 0

}
