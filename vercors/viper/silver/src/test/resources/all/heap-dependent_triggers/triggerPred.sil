field f: Int

method m1(xs: Set[Ref]) {
    inhale forall x: Ref :: {p(x)} x in xs ==> p(x)
    var y: Ref
    assume y in xs
    assert p(y)
}

method m2(xs: Set[Ref]) {
    inhale forall x: Ref :: {p(x)} x in xs ==> p(x)
    var y: Ref
    assume y in xs
    unfold p(y)
    assert perm(p(y)) == none
    fold p(y)
    assert p(y)
}

method m3(xs: Set[Ref]) {
    inhale forall x: Ref :: {p(x)} x in xs ==> p(x)
    var y: Ref
    assume y in xs
    assert perm(p(y)) == write
}

predicate p(x: Ref) {
    acc(x.f)
}