// oldC2SCases/unfolding_old_heap.chalice

field x: Int

predicate P(this: Ref) {
  acc(this.x)
}

method fail10(this: Ref)
  requires acc(P(this), write)
  ensures acc(P(this), write)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures unfolding P(this) in this.x == old(this.x)
{
}

method success10(this: Ref)
  requires acc(P(this), write)
  ensures acc(P(this), write)
  ensures unfolding P(this) in this.x == old(unfolding P(this) in this.x)
{
}

method success2(this: Ref)
  requires acc(this.x)
  ensures acc(P(this), write)
  ensures unfolding P(this) in this.x == old(this.x)
{
  fold P(this)
}

method fail5(this: Ref)
  requires acc(P(this), write)
  ensures acc(P(this), write)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures unfolding P(this) in this.x == old(this.x) + 1
{
  unfold P(this)
  this.x := this.x + 1
  fold P(this)
}

method success5(this: Ref)
  requires this != null
  requires acc(P(this), write)
  ensures acc(P(this), write)
  ensures (unfolding acc(P(this), write) in this.x == old((unfolding acc(P(this), write) in this.x)) + 1)
{
  unfold acc(P(this), write)
  this.x := this.x + 1
  fold acc(P(this), write)
}

method success4(this: Ref)
  requires this != null
  requires acc(this.x, write)
  ensures acc(P(this), write)
  ensures (unfolding acc(P(this), write) in this.x == old(this.x) + 1)
{
  this.x := this.x + 1
  fold acc(P(this), write)
}

method fail1(this: Ref)
  requires this != null
  requires acc(this.x, write)
  ensures acc(P(this), write)
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  ensures (unfolding acc(P(this), write) in this.x == old((unfolding acc(P(this), write) in this.x)))
{
  fold acc(P(this), write)
}

method fail2(this: Ref)
  requires this != null
  requires acc(this.x, write)
  ensures acc(P(this), write)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures (unfolding acc(P(this), write) in this.x == old(this.x))
{
  this.x := 0
  fold acc(P(this), write)
}
