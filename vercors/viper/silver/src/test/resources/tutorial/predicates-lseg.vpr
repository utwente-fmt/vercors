field elem : Int
field next : Ref

predicate lseg(first: Ref, last: Ref, values: Seq[Int])
{
  first != last ==>
    acc(first.elem) && acc(first.next) &&
    0 < |values| &&
    first.elem == values[0] && 
    lseg(first.next, last, values[1..])
}

method findFirst(first: Ref, last: Ref, values: Seq[Int])
  returns  (value: Int, second: Ref)
  requires lseg(first, last, values)
  requires first != last
  ensures  lseg(second, last, values[1..])
{
  unfold lseg(first, last, values)

  value := first.elem
  second := first.next
}

method prependFails(first:Ref, last:Ref, values:Seq[Int], toAdd: Int) returns (r: Ref)
  requires lseg(first, last, values)
  ensures lseg(r, last, Seq(toAdd) ++ values)
  {
      r := new(elem,next)
      r.elem := toAdd
      r.next := first
      //assert (Seq(toAdd) ++ values)[1..] == values
      //::UnexpectedOutput(assert.failed:assertion.false, /silver/issue/80/)
      fold lseg(r,last,Seq(toAdd) ++ values)
  }

method prepend(first:Ref, last:Ref, values:Seq[Int], toAdd: Int) returns (r: Ref)
  requires lseg(first, last, values)
  ensures lseg(r, last, Seq(toAdd) ++ values)
  {
      r := new(elem,next)
      r.elem := toAdd
      r.next := first
      assert (Seq(toAdd) ++ values)[1..] == values
      fold lseg(r,last,Seq(toAdd) ++ values)
  }