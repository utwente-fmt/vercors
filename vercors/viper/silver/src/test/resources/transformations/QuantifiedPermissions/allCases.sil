field f:Int
field g:Int
field vals:Seq[Int]

predicate pred(x:Ref) {
      acc(x.f)
}

predicate p(r:Ref) {acc(r.f)}
      

method main(xs: Seq[Ref], ys: Seq[Ref]) {
  inhale false
  assert forall x:Ref :: x in xs ==> acc(pred(x)) && (unfolding pred(x) in true)
  assert forall x:Ref :: x in xs ==> acc(x.f) && acc(x.g) &&  acc(pred(x)) && x.f > 0
  assert forall x:Ref :: true ==> ((x in xs) ==> acc(x.f)) && ((x in ys ==> acc(p(x))))
  assert forall x:Ref :: true ==> ((x in xs) ==> (acc(x.f) && x.f == 5)) && (x in ys ==> acc(p(x)))
}