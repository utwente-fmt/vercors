field f:Int
field g:Int
field vals:Seq[Int]

predicate pred(x:Ref) {
      acc(x.f)
}

predicate p(r:Ref) {acc(r.f)}
      

method main(xs: Seq[Ref], ys: Seq[Ref]) {
  inhale false
  assert (forall x:Ref :: x in xs ==> acc(pred(x))) && (forall x:Ref :: x in xs ==> (unfolding pred(x) in true))
  assert
    ((((forall x:Ref :: x in xs ==> acc(x.f)) &&
    (forall x:Ref :: x in xs ==> acc(x.g))) &&
    (forall x:Ref :: x in xs ==> acc(pred(x)))) &&
    (forall x:Ref :: x in xs ==> x.f > 0))
  assert (forall x: Ref :: true && (x in xs) ==> acc(x.f, write)) && (forall x: Ref :: true && (x in ys) ==> acc(p(x), write))
  assert ((forall x:Ref :: (true && x in xs) ==> acc(x.f)) && (forall x:Ref :: (true && x in xs) ==> x.f == 5)) && (forall x : Ref :: true && x in ys ==> acc(p(x)))
}