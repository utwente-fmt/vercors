import "../decreaseOrder/int_decreases.sil"

//:: ExpectedOutput(termination.failed:variant.not.decreasing)
function f1(i: Int): Int
requires i >= 0
decreases i
{
    i < 10 ? 1 : (f1(i-1) < 4 || (f1(i-3) < 6) ? 1 : f1(i))
}


//Condition is always false, therefore will the recursiv call f2(i) succeed
function f2(i: Int): Int
requires i >= 0
decreases i
{
    i < 10 ? 1 : (((f2(i-1) < 4 && f2(i-1) > 4) || (f2(i-3) < 6 && (f2(i-3) > 6))) ? f2(i) : 1)
}

//Short circuit evaluation
function f3(i: Int): Int
decreases i
{
    (true || f3(i) != 1) ? 1 : f3(i)
}

function f4(i: Int): Int
decreases i
{
    (false && f4(i) != 1) ? f4(i) : 1
}

function f5(i: Int): Int
decreases i
{
    (false ==> f5(i)>6) ? 7 : f5(i)
}