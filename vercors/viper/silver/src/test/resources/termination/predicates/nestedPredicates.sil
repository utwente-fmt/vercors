//:: IgnoreFile(/silicon/issue/297/)

import "../decreaseOrder/int_decreases.sil"
import "../decreaseOrder/pred_decreases.sil"

function f1(i: Int): Bool
requires i >= 0
requires p1(i)
decreases p1(i)
{
  unfolding p1(i) in (i>3 ? f1(i-1) : true)
}

predicate p1(i :Int)
{
	(i>3 ==> p1(i-1)) && (i < 6 ? false : q1(i-1))
}

predicate q1(i :Int)
{
	i < 2 ? true : p1(i)
}

function f2(i: Int): Int
requires p2(i)
decreases p2(i)
{
    i > 0 ? unfolding p2(i) in g2(i-1) : -1
}

function g2(i: Int): Int
requires p2(i)
decreases p2(i)
{
    i > 0 ? unfolding p2(i) in f2(i-1) : -1
}

predicate p2(i: Int)
{
    i>0 ==> p2(i-1)
}

