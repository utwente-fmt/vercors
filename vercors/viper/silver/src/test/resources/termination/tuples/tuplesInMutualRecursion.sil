import "../decreaseOrder/int_decreases.sil"

//:: ExpectedOutput(termination.failed:variant.not.decreasing)
function f(x :Int, y:Int) : Int
requires x>=0
requires y>=0
decreases x,y
{
    x<1 ? 3 : g(x-1,y+1)
}

//:: ExpectedOutput(termination.failed:variant.not.decreasing)
function g(x :Int, y:Int) : Int
requires x>=0
requires y>=0
decreases y,x
{
    y<1 ? 3 : f(x+1,y-1)
}

function f2(x :Int, y:Int) : Int
requires x>=0
requires y>=0
decreases x,y
{
    x<2 ? 3 : g2(x-1,y+1)
}

function g2(x :Int, y:Int) : Int
requires x>=1
requires y>=1
decreases y,x
{
    x<2 ? 3 : h2(x+1,y+1)
}

function h2(x :Int, y:Int) : Int
requires x>=1
requires y>=1
decreases x,y
{
    y<3 ? 3 : f2(x-1,y-2)
}