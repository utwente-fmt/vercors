import "../decreaseOrder/int_decreases.sil"
import "../decreaseOrder/seq_decreases.sil"

//decreasing first element
function f1(x : Int, s:Seq[Int], y:Int) : Int
requires x>=0
requires y>=0
decreases x,s,y
{
    x<1 ? 3 : f1(x-1,s,y)
}

//decreasing second element
function f2(x : Int, s:Seq[Int], y:Int) : Int
requires x>=0
requires y>=0
decreases x,s,y
{
    |s|<=1 ? 3 : f2(x,s[1..],y)
}

//decreasing third element
function f3(x : Int, s:Seq[Int], y:Int) : Int
requires x>=0
requires y>=0
decreases x,s,y
{
    y<1 ? 3 : f3(x,s,y-1)
}

//Termination fails if first element increases

//:: ExpectedOutput(termination.failed:variant.not.decreasing)
function f4(x : Int, s:Seq[Int], y:Int) : Int
 requires x>=0
 requires y>=0
 decreases x,s,y
 {
     |s|<=1 ? 3 : f4(x+1,s[1..],y)
 }

//Reorderind the tuple will prevent an Error
function f5(x : Int, s:Seq[Int], y:Int) : Int
requires x>=0
requires y>=0
decreases s,x,y
{
    |s|<=1 ? 3 : f5(x+1,s[1..],y)
}

function f6(s:Seq[Int], i: Int): Seq[Int]
requires i>0
decreases i, s
{
    (i in s) ? f6(s[1..], i) : (i>1 ? (f6(s[1..], i-1) ++ f6(s[1..]++s, i-1)) : Seq(1))
}