import "../decreaseOrder/int_decreases.sil"
import "../decreaseOrder/bool_decreases.sil"

//:: ExpectedOutput(termination.failed:variant.not.decreasing)
function fun(i: Int): Int
  requires 0 <= i
  ensures false
  decreases i
{
  (0 < i && fun(i) > 5 ? fun(i) + 1 : 8)
}

function fun2(i: Int): Int
  requires 0 <= i
  ensures false
  decreases i
{
  (0 < i && fun2(0) > 5 ? fun2(i) + 1 : 8)
}

function t(): Bool
{
    true
}

function f(): Bool
{
    false
}

function f1(x: Int): Int
decreases x
{
      t() ? 1 : f1(x)
}

function f2(x: Int): Int
decreases x
{
      f1(x) == 1 ? 1 : f2(x)
}

function f3(x: Int): Int
decreases x
{
      f2(x) == 1 ? 1 : f3(x)
}

//Order of Termination: true << false
function f4(b: Bool): Bool
ensures result == true
decreases b
{
      b ? b : f4(t())
}

function f5(b: Bool): Bool
decreases b
{
      f4(b) ? b : f5(b)
}