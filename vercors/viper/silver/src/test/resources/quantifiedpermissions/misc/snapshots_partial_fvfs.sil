field f: Int

predicate P(xs: Seq[Ref]) {
     3 < |xs|
  && forall i: Int :: 0 <= i && i < 3 ==> acc(xs[i].f)
}

method test(xs: Seq[Ref])
  requires 6 < |xs|
  requires forall i: Int :: 0 <= i && i < 3 ==> acc(xs[i].f)
  requires forall i: Int :: 3 <= i && i < 6 ==> acc(xs[i].f)
{
  fold acc(P(xs))
  unfold acc(P(xs))

  xs[4].f := 0

  fold acc(P(xs))
  unfold acc(P(xs))

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert xs[4].f == old(xs[4].f)
}
