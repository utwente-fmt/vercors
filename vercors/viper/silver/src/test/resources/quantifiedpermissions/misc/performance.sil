field f: Int

method init(xs: Seq[Ref])
  ensures forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f)
{
  inhale forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f)
}

method leak(xs: Seq[Ref], p: Perm)
  requires forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f, p)
{}

method split(xs: Seq[Ref], p: Perm, q: Perm)
  requires p == 2*q
  requires forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f, p)
  ensures forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f, q)
  ensures forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f, q)
{}

/* Inspired by Stefan Blom's test case fwd.sil, this test boils down to lots of
 * inhales and exhales of quantified permissions (over sequences) to the same
 * field. Hence, the permission terms stored in the quantified chunks grow
 * exponentially in the worst case.
 *
 * The test is meant to stress-test both the verifier's and the prover's
 * performance. For example, Silicon could grind to a halt because the
 * permission terms got so large that it essentially could no longer emit them
 * to Z3. If the permission terms get emitted, then Z3 still has to do quite
 * some work to discharge the proof obligations in which these terms occur, for
 * example, that sufficiently many permissions are available.
 */
method test01() {
  var xs1: Seq[Ref]; init(xs1)
  var xs2: Seq[Ref]; init(xs2)
  var xs3: Seq[Ref]; init(xs3)

  split(xs1, write, 1/2)
  split(xs2, 1/2, 1/4)
  split(xs3, write, 1/2)

  leak(xs1, 1/2)
  leak(xs2, 1/2)
  leak(xs3, 1/3)

  // xs1 # 1/2,  xs2 # 1/2,  xs3 # 2/3

  split(xs1, 1/2, 1/4)
  leak(xs1, 1/4)
  leak(xs3, 1/3)

  // xs1 # 1/4,  xs2 # 1/2,  xs3 # 1/3

  split(xs2, 1/2, 1/4)
  leak(xs1, 1/4)

  // xs2 # 1/2,  xs3 # 1/3

  leak(xs3, 1/3)
  leak(xs2, 1/2)
}
