field f: Int

function fun01(xs: Set[Ref], y: Ref): Int
  requires forall x: Ref :: x in xs ==> acc(x.f)
  requires forall x: Ref :: x in xs ==> x.f > 0
  requires y in xs
{ y.f}

method test01(xs: Set[Ref], y: Ref) {
  inhale forall x: Ref :: x in xs ==> acc(x.f)
  inhale forall x: Ref :: x in xs ==> x.f > 0
  inhale y in xs
label pre

  assert fun01(xs,y) == y.f
  assert fun01(xs,y) == old[pre](fun01(xs,y))

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

function fun02(xs: Seq[Ref], ys: Seq[Ref]): Bool
  requires forall i: Int :: 0 <= i && i < |xs| ==> acc(xs[i].f)
  requires forall i: Int :: 0 <= i && i < |ys| ==> acc(ys[i].f)
  requires 10 < |xs| && |xs| == |ys|
{ xs[0].f == ys[0].f }

method test02(xs: Seq[Ref], ys: Seq[Ref]) {
  inhale forall i: Int :: 0 <= i && i < |xs| ==> acc(xs[i].f)
  inhale forall i: Int :: 0 <= i && i < |ys| ==> acc(ys[i].f)
  inhale 10 < |xs| && |xs| == |ys|

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun02(xs, ys)
}
