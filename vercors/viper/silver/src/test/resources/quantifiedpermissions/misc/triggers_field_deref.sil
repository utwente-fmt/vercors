field f: Int
field g: Int

domain Dummy {
  function fun01(x: Ref): Bool
  function fun02(v: Int): Int
}

method test01(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f} z == x || z == y ==> z.f > 0

  assert x.f > 0
}

method test01b(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x || z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f} z == x || z == y ==> fun02(z.g) > 0 && fun02(z.f) > 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun02(x.g) > 0 /* The forall should not be triggered */
}

method test02(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x || z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g > 0

  assume fun01(x)
  assert x.f + x.g > 0
}

method test02b(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g > 0

  assume fun01(x)
  assert x.f + x.g > 0
}

method test02c(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)

  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g > 0

  assume fun01(x)
  assert x.f + x.g > 0
}

method test03(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)

  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g + z.f > 0

  assume fun01(x)
  assert 2 * x.f + x.g > 0
}

method test04(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun02(z.f)} z == x || z == y ==> fun02(z.f) == 0

  assert fun02(x.f) >= 0
}

function inv(v: Int): Bool { v == 0 }

method test04b(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {inv(z.f)} z == x || z == y ==> inv(z.f)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert x.f == 0 /* The forall should not be triggered */
}

method test04c(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x || z == y ==> acc(z.f)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f} z == x || z == y ==> inv(z.f)

  assert x.f == 0
}

method test05(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)

  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {fun01(z), z.f, z.g} z == x || z == y ==> z.f + z.g + z.f > 0

  assume fun01(x)
  assert 2 * x.f + x.g > 0
}

method test06(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f, z.g} z == x || z == y ==> z.f > 0 && z.g > 0

  assume fun02(y.f) == 42
  assert y.g > 0
}

method test06b(x: Ref, y: Ref) {
  inhale forall z: Ref :: z == x ==> acc(z.f)
  inhale forall z: Ref :: z == y ==> acc(z.f)
  inhale forall z: Ref :: z == x ==> acc(z.g)
  inhale forall z: Ref :: z == y ==> acc(z.g)
  inhale x != null && y != null // TODO: Should not be necessary, see Silicon issue 61
  inhale forall z: Ref :: {z.f, z.g} z == x || z == y ==> z.f > 0 && z.g > 0

  assume fun02(x.f) == 42
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert y.g > 0 /* The forall should not be triggered */
}

method test07a(xs: Seq[Ref]) {
  inhale (forall x: Int :: x in [0..|xs|) ==> acc(xs[x].f))

  inhale (forall x: Int :: {xs[x].f} (0 <= x) && (x < |xs|) ==> (xs[x].f == 0))
  assert (forall x: Int :: {xs[x].f} (0 <= x) && (x < |xs|) ==> (xs[x].f == 0))
}

method test07b(xs: Seq[Ref]) {
  inhale (forall x: Int :: x in [0..|xs|) ==> acc(xs[x].f))

  inhale (forall x: Int :: (0 <= x) && (x < |xs|) ==> (xs[x].f == 0))
  assert (forall x: Int :: (0 <= x) && (x < |xs|) ==> (xs[x].f == 0))
}
