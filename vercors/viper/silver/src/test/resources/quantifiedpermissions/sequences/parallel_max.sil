// class Cell
field value:Int

// class ArrayOfInt
field array:Seq[Ref] // containing Cell(s)

method parallel_max(a:Ref, start:Int, end:Int, kperm: Perm) returns (mx: Int, pos: Int)
  requires a != null
  requires acc(a.array, wildcard)
  requires 0 <= start && start < end && end < |a.array|
  requires forall i:Int :: i in [start..end) ==> acc(a.array[i].value, kperm)
  requires |a.array| >= 1
  requires none < kperm && kperm < write
  ensures acc(a.array, wildcard)
  ensures end < |a.array|
  ensures forall i:Int :: i in [start..end) ==> acc(a.array[i].value, kperm)
  ensures start<=pos && pos<end
  ensures a.array[pos].value == mx
  ensures (forall l: Int :: l in [start..end) ==> a.array[l].value<=mx)
{
    var middle:Int
    var ml: Int
    var mr: Int
    var kperm1: Perm
    var posl: Int
    var posr: Int

    if(end-start > 1)
    {
        middle := start + (end-start)\2

        // fork tl := parallel_max(a, start, middle, (1 / 2) * kperm)
        exhale a != null
        exhale acc(a.array, wildcard)
        exhale 0 <= start && start < middle && middle < |a.array|
        exhale forall i1:Int :: i1 in [start..middle) ==> acc(a.array[i1].value, (1 / 2) * kperm)
        exhale |a.array| >= 1
        exhale none < (1 / 2) * kperm && (1 / 2) * kperm < write

        // fork tr := parallel_max(a, middle, end, (1 / 2) * kperm)
        exhale a != null
        exhale acc(a.array, wildcard)
        exhale 0 <= middle && middle < end && end < |a.array|
        exhale forall i2:Int :: i2 in [middle..end) ==> acc(a.array[i2].value, (1 / 2) * kperm)
        exhale |a.array| >= 1
        exhale none < (1 / 2) * kperm && (1 / 2) * kperm < write

        // join ml, posl := tl
        inhale acc(a.array, wildcard)
        inhale middle < |a.array|
        inhale forall i3:Int :: i3 in [start..middle) ==> acc(a.array[i3].value, (1 / 2) * kperm)
        inhale start<=posl && posl<middle
        inhale a.array[posl].value == ml
        inhale (forall l1: Int :: l1 in [start..middle) ==> a.array[l1].value <= ml)

        // join mr, posr := tr
        inhale acc(a.array, wildcard)
        inhale middle < |a.array|
        inhale forall i5:Int :: i5 in [middle..end) ==> acc(a.array[i5].value, (1 / 2) * kperm)
        inhale middle<=posr && posr<end
        inhale a.array[posr].value == mr
        inhale (forall l2: Int :: l2 in [middle..end) ==> a.array[l2].value <= mr)

        mx := ml>mr ? ml : mr
        if (mx == ml) { pos := posl } else { pos := posr }
    } else {
        mx := (a.array[start]).value
        pos := start
    }

    // ensure proper framing
    assert forall i6:Int :: i6 in [start..end) ==> a.array[i6].value == old(a.array[i6].value)
}





