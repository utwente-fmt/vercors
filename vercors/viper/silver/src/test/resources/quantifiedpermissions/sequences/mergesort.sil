// class Cell
field value:Int

// class ArrayOfInt
field array:Seq[Ref] // containing Cell(s)

method parallel_mergesort(a:Ref, b:Ref, start:Int, end:Int)
  requires acc(a.array, wildcard)
  requires acc(b.array, wildcard)
  requires start >= 0 && end <= |a.array| && |a.array| == |b.array|
  requires forall i:Int :: i in [start..end) ==> acc(a.array[i].value, write)
  requires forall i:Int :: i in [start..end) ==> acc(b.array[i].value, write)
  ensures acc(a.array, wildcard)
  ensures acc(b.array, wildcard)
  ensures start >= 0 && end <= |a.array| && |a.array| == |b.array|
  ensures forall i:Int :: i in [start..end) ==> acc(a.array[i].value, write)
  ensures forall i:Int :: i in [start..end) ==> acc(b.array[i].value, write)
  ensures a.array == old(a.array)
  ensures b.array == old(b.array)
{
    var middle: Int
	var t1A: Seq[Ref]
	var t1B: Seq[Ref]
	var t2A: Seq[Ref]
	var t2B: Seq[Ref]

    if(end-start > 1)
    {
        middle := start + (end-start)\2

		// fork t1 := parallel_mergesort(a,b, start, middle)
		t1A := a.array
		t1B := b.array
		exhale acc(a.array, wildcard)
        exhale acc(b.array, wildcard)
        exhale start >= 0 && middle <= |a.array| && |a.array| == |b.array|
        exhale forall i:Int :: i in [start..middle) ==> acc(a.array[i].value, write)
        exhale forall i:Int :: i in [start..middle) ==> acc(b.array[i].value, write)

		// fork t2 := parallel_mergesort(a,b, middle, end)
		t2A := a.array
		t2B := b.array
		exhale acc(a.array, wildcard)
        exhale acc(b.array, wildcard)
        exhale middle >= 0 && end <= |a.array| && |a.array| == |b.array|
        exhale forall i:Int :: i in [middle..end) ==> acc(a.array[i].value, write)
        exhale forall i:Int :: i in [middle..end) ==> acc(b.array[i].value, write)

		// join t1
		inhale acc(a.array, wildcard)
        inhale acc(b.array, wildcard)
        inhale forall i:Int :: i in [start..middle) ==> acc(a.array[i].value, write)
        inhale forall i:Int :: i in [start..middle) ==> acc(b.array[i].value, write)
        inhale a.array == t1A
        inhale b.array == t1B

		//join t2
	    inhale acc(a.array, wildcard)
        inhale acc(b.array, wildcard)
        inhale forall i:Int :: i in [middle..end) ==> acc(a.array[i].value, write)
        inhale forall i:Int :: i in [middle..end) ==> acc(b.array[i].value, write)
        inhale a.array == t2A
        inhale b.array == t2B

        merge(a,b,start,middle,end)
    }
}

method merge(a: Ref, b:Ref, start:Int, middle:Int, end:Int)
  requires acc(a.array, wildcard)
  requires acc(b.array, wildcard)
  requires 0 <= start && end <= |a.array| && |b.array| == |a.array| && start < middle && middle < end
  requires forall k:Int :: k in [start..end) ==> acc(a.array[k].value, write)
  requires forall l:Int :: l in [start..end) ==> acc(b.array[l].value, write)
  ensures acc(a.array, wildcard)
  ensures acc(b.array, wildcard)
  ensures a.array == old(a.array)
  ensures b.array == old(b.array)
  ensures forall i:Int :: i in [start..end) ==> acc(a.array[i].value, write)
  ensures forall i:Int :: i in [start..end) ==> acc(b.array[i].value, write)
{
    var I:Int := start
    var J:Int := middle
    var N:Int := start

    while(N < end)
      invariant acc(a.array, wildcard)
      invariant acc(b.array, wildcard)
      invariant 0 <= start && end <= |a.array|
      invariant N == I+J-middle && 0 <= start
      invariant start <= I
      invariant middle <= J
      invariant J <= end
      invariant |a.array| == |b.array|
      invariant a.array == old(a.array)
	  invariant b.array == old(b.array)
      invariant forall i:Int :: i in [start..end) ==> acc(a.array[i].value, write)
	  invariant forall i:Int :: i in [start..end) ==> acc(b.array[i].value, write)
    {
        if(J == end || (a.array[I]).value < (a.array[J]).value)
        {
            (b.array[N]).value := (a.array[I]).value
            I:=I+1
        } else
        {
            (b.array[N]).value := (a.array[J]).value
            J:=J+1
        }
        N:=N+1
    }
}

