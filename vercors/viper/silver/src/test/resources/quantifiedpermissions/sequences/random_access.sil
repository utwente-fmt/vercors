field f: Int

method test01(s: Seq[Ref], a: Int, b: Int, n: Int)
  requires 0 <= a && 0 < b && 0 < n
  requires a + n * b < |s|
{
  var j: Int

  inhale 0 <= j && j < n
  inhale forall i: Int :: {i in [0..n)} i in [0..n) ==> acc(s[a + i*b].f)
    /* Yields the non-null axiom

         forall i: Int
             {i in [0..n)}
           i in [0..n) ==> s[a+i*b] != null

       The trigger only contains (i in [0..n)) but not (s[a+i*b]) because the
       latter contains an arithmetic expression, which Z3 doesn't allow in
       triggers.
       Introducing a second quantified variable j to replace a+i*b with isn't
       straight-forward because one needs to preserve the relatonship between
       i and j. Moreover, s[j] on its own wouldn't be a valid trigger because
       it wouldn't cover all quantified variables.
     */

  /* TODO: Fails because ($Seq.at s (+ a (* i b))) doesn't trigger above axiom */
  //:: UnexpectedOutput(assert.failed:assertion.false, /silver/issue/67/)
  assert s[a + j*b] != null
}

function exp(a: Int, i: Int, b: Int): Int {
  a + i*b
}

method test04(s: Seq[Ref], a: Int, b: Int, n: Int)
  requires 0 <= a && 0 < b && 0 < n
  requires a + n * b < |s|
{
  var j: Int

  inhale 0 <= j && j < n
  inhale forall i: Int :: i in [0..n) ==> acc(s[exp(a, i, b)].f)
    /* Yields the non-null axiom

         forall i: Int
             {i in [0..n)}
             {s[exp(a, i, b)]}
           i in [0..n) ==> s[exp(a, i, b)] != null
     */

  /* Using exp(a, j, b) will trigger above axiom */
  assert s[exp(a, j, b)] != null
}

method test02(s: Seq[Ref], a: Int, b: Int)
  requires 0 <= a && 0 < b
  requires forall i: Int :: i in [a..|s|) && (i - a) % b == 0 ==> acc(s[i].f)
{
  var j: Int := a

  while (j < |s|)
    invariant a <= j
    invariant (j - a) % b == 0
    invariant forall i: Int :: i in [a..|s|) && (i - a) % b == 0 ==> acc(s[i].f)
  {
    assert j in [a..|s|)      /* Can be proven */
    assert (j - a) % b == 0   /* Can be proven */

    s[j].f := j
    j := j + b

    assume (j - a) % b == 0 /* Cannot be proven, but is correct */
  }
}

method test03(s: Seq[Ref], a: Int, b: Int)
  requires 0 <= a && 0 < b
  requires forall i: Int :: i in [a..|s|) && (i - a) % b == 0 ==> acc(s[i].f)
{
  var j: Int := 0
  assert j*b % b == 0

  while (a+j*b < |s|)
    invariant 0 <= j
    invariant j*b % b == 0
    invariant forall i: Int :: i in [a..|s|) && (i - a) % b == 0 ==> acc(s[i].f)
  {
    assert a+j*b in [a..|s|) /* Can be proven */
    assert j*b % b == 0      /* Can be proven */

    s[a+j*b].f := j
    j := j + 1

    assume j*b % b == 0 /* Cannot be proven, but is correct */
  }
}
