field f: Int

method test01(s: Seq[Ref], t: Seq[Ref])
  requires forall i: Int :: i in [0..|s|) ==> acc(s[i].f)
  requires forall i: Int :: i in [0..|t|) ==> acc(t[i].f)
  ensures  forall i: Int :: i in [0..|t|) ==> acc(t[i].f)
  ensures  forall i: Int :: i in [0..|s|) ==> acc(s[i].f)
{}

method test02(s: Seq[Ref], x: Ref)
  requires forall i: Int :: i in [0..|s|) ==> acc(s[i].f)
{
  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert x.f == old(x.f)
}

method test03(s: Seq[Ref], x: Ref)
  requires forall i: Int :: i in [0..|s|) ==> acc(s[i].f)
  requires x in s
{
  assert x.f == old(x.f)
}

method test04(s: Seq[Ref], x: Ref)
  requires forall i: Int :: i in [0..|s|) ==> acc(s[i].f)
  requires forall i: Int :: i in [0..|s|) && s[i].f > 0 ==> s[i].f > 5
  requires x in s
{
  exhale forall i: Int :: i in [0..|s|) && s[i].f > 5 ==> acc(s[i].f)

  //:: ExpectedOutput(assert.failed:insufficient.permission)
  assert x.f == old(x.f)
}

method test05(s: Seq[Ref], x: Ref)
  requires forall i: Int :: i in [0..|s|) ==> acc(s[i].f)
  requires forall i: Int :: i in [0..|s|) && s[i].f > 0 ==> s[i].f > 5
  requires x in s
{
  var v: Int := x.f
  exhale forall i: Int :: i in [0..|s|) && s[i].f > 5 ==> acc(s[i].f)

  if (v <= 0) {
    assert x.f == old(x.f)
  }
}
