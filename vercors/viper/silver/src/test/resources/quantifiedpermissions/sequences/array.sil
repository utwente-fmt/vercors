field value: Int
field array: Seq[Ref]

method init(this:Ref, i:Int)
requires acc(this.array, write)
ensures acc(this.array, wildcard)
ensures |this.array| == i
ensures forall k:Int :: k in [0..i) ==> acc(this.array[k].value, write)
{
    inhale |this.array| == i && forall k:Int :: k in [0..i) ==> acc(this.array[k].value, write)
}

method set(this:Ref, i:Int, val:Int)
requires acc(this.array, wildcard)
requires 0 <= i && i < |this.array|
requires acc(this.array[i].value, write)
ensures acc(this.array, wildcard)
ensures 0 <= i && i < |this.array|
ensures acc(this.array[i].value, write)
ensures 0 <= i && i < |this.array|
ensures this.array[i].value == val
{
    this.array[i].value := val
}

function get(this:Ref, i:Int):Int
requires acc(this.array, wildcard)
requires 0 <= i && i < |this.array|
requires acc(this.array[i].value, wildcard)
{
    this.array[i].value
}

method caller()
{
    var mutableArray:Ref
    mutableArray := new(array)
    init(mutableArray, 5)
    set(mutableArray, 0, 2)
    assert get(mutableArray, 0) == 2
}


