field f: Int

method qsort(s: Seq[Ref], start: Int, end: Int)
  requires 0 <= start && start <= end && end <= |s|
  requires forall i: Int :: i in [start..end) ==> acc(s[i].f, write)
  ensures forall i1: Int :: i1 in [start..end) ==> acc(s[i1].f, write)
    // sorting spec omitted
{
  var storeIndex: Int
  var index: Int
  var aux: Int

  if (start < end-1) {
    storeIndex := start
    index := start
    while (index < end - 1)
      invariant forall i3: Int :: i3 in [start..end) ==> acc(s[i3].f, write)
      invariant start <= storeIndex && storeIndex <= index
      invariant start <= index && index < end
        // sorting spec omitted
    {
      if (s[index].f <= s[end-1].f) {
        aux := s[storeIndex].f
        s[storeIndex].f := s[index].f
        s[index].f := aux
        storeIndex := storeIndex + 1
      }
      index := index + 1
    }
    aux := s[storeIndex].f
    s[storeIndex].f := s[end-1].f
    s[end-1].f := aux
	
	// fork qsort(s, start, storeIndex)
    exhale 0 <= start && start <= storeIndex && storeIndex <= |s|
    exhale forall i: Int :: i in [start..storeIndex) ==> acc(s[i].f, write)
	
    // fork qsort(s, storeIndex+1, end)
    exhale 0 <= storeIndex+1 && storeIndex+1 <= end && end <= |s|
    exhale forall i: Int :: i in [storeIndex+1..end) ==> acc(s[i].f, write)
	
	// joins
	inhale forall i1: Int :: i1 in [start..storeIndex) ==> acc(s[i1].f, write)
	inhale forall i1: Int :: i1 in [storeIndex+1..end) ==> acc(s[i1].f, write)
  }
}
