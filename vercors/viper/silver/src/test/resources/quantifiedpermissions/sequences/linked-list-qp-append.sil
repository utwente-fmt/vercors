field next: Ref

field val: Int

field value : Int
field nodes: Seq[Ref]

field data: Seq[Int]

predicate List(this: Ref)
{
	acc(this.nodes)
   && (forall i: Int :: 0 <= i && i < |this.nodes| ==> acc(this.nodes[i].val))
	 && (forall i: Int :: 0 <= i && i < |this.nodes| ==> acc(this.nodes[i].next))
	 && (forall i: Int :: {this.nodes[i].next} (0 <= i && i < |this.nodes| ==>
	 	    this.nodes[i] in this.nodes && (i < |this.nodes| - 1 ? this.nodes[i].next == this.nodes[i+1] : this.nodes[i].next == null)
	 ))
}

function length(this: Ref): Int
  requires acc(List(this))
{
  unfolding List(this) in |this.nodes|
}

function itemAt(this: Ref, index: Int): Int
  requires acc(List(this))
  requires 0 <= index && index < length(this)
{
	unfolding List(this) in this.nodes[index].val
}

method append(this: Ref, elem: Int)
  requires acc(List(this))
  requires 0 < length(this) ==> itemAt(this, length(this) - 1) <= elem
  ensures acc(List(this))
  ensures length(this) == old(length(this)) + 1
  ensures itemAt(this, length(this) - 1) == elem
  ensures forall i: Int :: 0 <= i && i < length(this) - 1 ==> itemAt(this, i) == old(itemAt(this, i))
{
	unfold acc(List(this))

 	var n : Ref
	n := new()
	inhale acc(n.val) && acc(n.next) && (forall i: Int :: (0<=i && i < |this.nodes|) ==> this.nodes[i] != n)

	n.next := null
	n.val := elem

	if(|this.nodes| > 0) {
	 this.nodes[|this.nodes| - 1].next := n
	 this.nodes := this.nodes ++ Seq(n)
	} else {
	 this.nodes := Seq(n)
	}
	fold acc(List(this))
}

