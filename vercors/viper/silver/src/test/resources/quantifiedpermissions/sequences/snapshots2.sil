field f: Int


function id(x: Ref): Ref { x }

function get01(x: Ref): Int
  requires acc(id(x).f)
{ id(x).f }

method test01(x: Ref)
  requires acc(x.f)
  requires x.f == 5
{
  assert get01(x) == 5
}


function get02(xs: Seq[Ref], i: Int): Int
  requires 0 <= i && i < |xs|
  requires acc(xs[i].f)
{ xs[i].f }

method test02(xs: Seq[Ref])
  requires 0 < |xs|
  requires acc(xs[0].f)
  requires xs[0].f == 5
{
  assert get02(xs, 0) == 5
}


method test03(xs: Seq[Ref])
  requires 0 < |xs|
  requires forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f)
  requires xs[0].f == 5
{
  assert get02(xs, 0) == 5
}
