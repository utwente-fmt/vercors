field f: Int

function fun1(xs: Seq[Ref]): Int
  requires 5 < |xs|
  requires forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f)
{ xs[0].f }

method test1(xs: Seq[Ref])
  requires 5 < |xs|
  requires forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f)
{
  var a: Int := fun1(xs)
  assert a == fun1(xs)

  xs[0].f := 0

  var b: Int := fun1(xs)
  assert b == fun1(xs)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert a == b
}

predicate P(xs: Seq[Ref]) {
  5 < |xs| && forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f)
}

function fun2(xs: Seq[Ref]): Int
  requires acc(P(xs))
{ unfolding acc(P(xs)) in xs[0].f }

method test2(xs: Seq[Ref])
  requires acc(P(xs))
{
  var a: Int := fun2(xs)
  assert a == fun2(xs)

  unfold acc(P(xs))
  fold acc(P(xs))

  var b: Int := fun2(xs)
  assert b == fun2(xs)

  assert a == b
}

method test3(xs: Seq[Ref])
  requires 5 < |xs|
  requires forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f)
{
  fold acc(P(xs))

  var a: Int := fun2(xs)
  assert a == fun2(xs)

  unfold acc(P(xs))
  fold acc(P(xs))

  var b: Int := fun2(xs)
  assert b == fun2(xs)

  assert a == b
}
