field f: Int

method test01(x: Ref)
  requires acc(x.f)
{
  assert x != null
}

method test01_client(x: Ref) {
  //:: ExpectedOutput(call.precondition:insufficient.permission)
  test01(x)
}

 method test01_qp(xs: Seq[Ref], y: Ref)
   requires y in xs
   requires forall x: Ref :: x in xs ==> acc(x.f)
 {
   assert y != null
 }

method test01_qp_client(xs: Seq[Ref], y: Ref)
  requires y in xs
{
  //:: ExpectedOutput(call.precondition:insufficient.permission)
  test01_qp(xs, y)
}

method test02(x: Ref, p: Perm)
  requires acc(x.f, p)
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert x != null

  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/34/)
  assert p != none
}

method test02_client(x: Ref, p: Perm)
  requires p == none
  requires acc(x.f, p)
{
  test02(x, p)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

 method test02_qp(xs: Seq[Ref], y: Ref, p: Perm)
   requires y in xs
   requires forall x: Ref :: x in xs ==> acc(x.f, p)
 {
  //:: ExpectedOutput(assert.failed:assertion.false)
   assert y != null

   //:: ExpectedOutput(assert.failed:assertion.false)
   //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/34/)
   assert p != none
 }

method test02_qp_client(xs: Seq[Ref], y: Ref, p: Perm)
  requires p == none
  requires y in xs
  requires forall x: Ref :: x in xs ==> x != null
{
  test02_qp(xs, y, p)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
