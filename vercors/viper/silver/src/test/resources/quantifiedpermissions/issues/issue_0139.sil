field f: Int
field g: Int

function fun01(xs: Seq[Ref]): Int
  requires |xs| > 10
  requires forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f)

method test01(xs: Seq[Ref]) {
  inhale |xs| > 10
  inhale forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f)

  inhale 10 == fun01(xs)
  assert 10 == fun01(xs)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

function fun02(xs: Seq[Ref]): Int
  requires |xs| > 10
  requires forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f)
  requires forall k: Int :: 6 <= k && k < 9 ==> acc(xs[k].f)

method test02(xs: Seq[Ref]) {
  inhale |xs| > 10
  inhale forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f)
  inhale forall k: Int :: 6 <= k && k < 9 ==> acc(xs[k].f)

  inhale 10 == fun02(xs)
  assert 10 == fun02(xs)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

function fun03(xs: Seq[Ref]): Int
  requires |xs| > 10
  requires forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f)
  requires forall k: Int :: 6 <= k && k < 9 ==> acc(xs[k].f)
{ xs[2].f + xs[6].f }

method test03(xs: Seq[Ref]) {
  inhale |xs| > 10
  inhale forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f)
  inhale forall k: Int :: 6 <= k && k < 9 ==> acc(xs[k].f)

  inhale 10 == fun03(xs)
  assert 10 == fun03(xs)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

function fun07(xs: Seq[Ref]): Int
  requires |xs| > 10
  requires forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f)

method test07(xs: Seq[Ref]) {
  inhale |xs| > 10
  inhale forall k: Int :: 0 <= k && k < 10 ==> acc(xs[k].f)

  inhale 10 == fun07(xs)

  xs[6].f := 0

  assert 10 == fun07(xs)
}

function fun04(xs: Seq[Ref], b: Bool): Int
  requires |xs| > 10
  requires b ? (forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f))
             : (forall k: Int :: 6 <= k && k < 9 ==> acc(xs[k].f))

method test04(xs: Seq[Ref]) {
  inhale |xs| > 10
  inhale forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f)
  inhale forall k: Int :: 6 <= k && k < 9 ==> acc(xs[k].f)

  inhale 10 == fun04(xs, true)
  inhale 20 == fun04(xs, false)

  xs[8].f := 0

  assert 10 == fun04(xs, true)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert 20 == fun04(xs, false)
}

function fun05(x: Ref, xs: Seq[Ref]): Int
  requires acc(x.g)
  requires 3 <= |xs|
  requires forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f)

method test05(x: Ref, xs: Seq[Ref]) {
  inhale acc(x.g)
  inhale 3 <= |xs|
  inhale forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f)

  inhale 10 == fun05(x, xs)
  inhale 10 == fun05(x, xs)
  x.g := 0
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert 10 == fun05(x, xs)
}

function fun06(x: Ref, i: Int, xs: Seq[Ref]): Int
  requires |xs| > 10
  requires acc(x.f/*, wildcard*/)
  requires i > 0
  requires forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f)

method test06(x: Ref, i: Int, xs: Seq[Ref]) {
  inhale |xs| > 10
  inhale acc(x.f)
  inhale i > 0
  inhale forall k: Int :: 0 <= k && k < 3 ==> acc(xs[k].f)

  inhale 10 == fun06(x, i, xs)
  assert 10 == fun06(x, i, xs)

  x.f := 0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert 10 == fun06(x, i, xs)
}
