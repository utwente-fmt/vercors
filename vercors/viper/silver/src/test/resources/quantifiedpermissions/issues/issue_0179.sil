field val: Int

method test04() {
  var s1: Ref; s1 := new(*)
  var s2: Ref; s2 := new(*)
  var s3: Ref; s3 := new(*)
  var S: Set[Ref] := Set(s1, s2, s3)

  assert forall s: Ref :: s in S ==> acc(s.val)
  assert s1 in S && s2 in S && s3 in S
  inhale forall s: Ref :: s in S ==> s.val > 0
}

method test(x1: Ref, x2: Ref) returns (xs: Set[Ref])
  requires acc(x1.val) && x1.val > 0
  requires acc(x2.val) && x2.val > 0
  ensures forall y: Ref :: y in xs ==> acc(y.val)
  ensures forall y: Ref :: y in xs ==> y.val > 0
{
  xs := Set(x1, x2)
}
