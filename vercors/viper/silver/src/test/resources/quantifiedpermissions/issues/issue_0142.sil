field f: Int

function fun(xs: Seq[Ref]): Int
  requires 0 < |xs|
  requires forall i: Int :: 0 <= i && i < |xs| ==> acc(xs[i].f)
{ fun_impl(xs) }

function fun_impl(xs: Seq[Ref]): Int
  requires 0 < |xs|
  requires forall i: Int :: 0 <= i && i < |xs| ==> acc(xs[i].f)
{ xs[0].f }

method test01(x: Ref)
  requires acc(x.f) && x.f == 1
{
  assert fun(Seq(x)) == 1
}

method test02(x: Ref, y: Ref)
  requires acc(x.f) && acc(y.f)
{
  inhale fun(Seq(x)) == 1
  inhale fun(Seq(y)) == 2

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test03(x: Ref, y: Ref)
  requires acc(x.f) && acc(y.f)
{
  inhale fun_impl(Seq(x)) == 1
  inhale fun_impl(Seq(y)) == 2

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
