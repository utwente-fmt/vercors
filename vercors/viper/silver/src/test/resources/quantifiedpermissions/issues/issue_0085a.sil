field n: Set[Ref]
field f: Int

predicate P(this: Ref) {
  acc(this.n)
}

method m0(this: Ref)
  requires this != null
  requires acc(P(this))
{
  //:: ExpectedOutput(assignment.failed:insufficient.permission)
  this.n := this.n
}

method m1(this: Ref)
  requires acc(P(this))
{
	unfold acc(P(this))
  fold acc(P(this))

  //:: ExpectedOutput(assignment.failed:insufficient.permission)
  this.n := this.n
}

predicate inv(this: Ref) {
	acc(this.n) && forall x: Ref :: x in this.n ==> acc(x.f)
}

method m2(this: Ref, xs: Set[Ref])
  requires acc(inv(this))
{
  unfold acc(inv(this))
  fold acc(inv(this))
  
  //:: ExpectedOutput(assignment.failed:insufficient.permission)
  this.n := xs
}
