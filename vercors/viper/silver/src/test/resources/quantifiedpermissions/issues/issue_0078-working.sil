field left: Ref
field all: Set[Ref]

predicate inv(this: Ref) {
     acc(this.all)
  && (forall q: Ref :: q in (this.all) ==> acc(q.left, 1/2))
  && (forall s: Ref :: (s in (this.all) && s.left == null) ==> acc(s.left, 1/2))
}

method goo() {
  var x: Ref
  var t: Ref

  inhale acc(inv(t))
  unfold acc(inv(t))
  inhale x in t.all && x.left == null
  exhale acc(x.left)
}

method doo() {
  var x: Set[Ref]
  var y: Ref
  var z: Ref

  inhale x == Set(y, z) && y != null && z != null
  inhale forall w: Ref :: w in x ==> acc(w.left, 1/2) /* Perm. amount is actually not relevant */

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert y.left == z.left
}
