// class Cell
field value:Int

// class ArrayOfInt
field array:Seq[Ref] // containing Cell(s)

method parallel_max(a:Ref, start:Int, end:Int, kperm: Perm) returns (mx: Int, pos: Int)
  requires a != null
  requires acc(a.array, wildcard)
  requires 0 <= start && start < end && end < |a.array|
  requires forall i:Int :: i in [start..end) ==> acc(a.array[i].value, kperm)
  requires |a.array| >= 1
  requires none < kperm && kperm < write
  ensures acc(a.array, wildcard)
  ensures end < |a.array|
  ensures forall i:Int :: i in [start..end) ==> acc(a.array[i].value, kperm)
  ensures forall i:Int :: i in [start..end) ==> a.array[i].value == old(a.array[i].value)
  ensures start<=pos && pos<end
  ensures a.array[pos].value == mx
  ensures (forall l: Int :: l in [start..end) ==> a.array[l].value<=mx)
{
    var middle:Int
    var ml: Int
    var mr: Int
    var kperm1: Perm
    var kperm2: Perm
    var posl: Int
    var posr: Int

    if(end-start > 1) {
      middle := start + (end-start)\2
      fresh kperm1
      //:: UnexpectedOutput(call.precondition:insufficient.permission, /carbon/issue/119/)
		  constraining(kperm1) { ml,posl := parallel_max(a, start, middle, kperm1) }

      fresh kperm2
      //:: UnexpectedOutput(call.precondition:insufficient.permission, /carbon/issue/119/)
		  constraining(kperm2) { mr,posr := parallel_max(a, middle, end, kperm2) }

      mx := ml>mr ? ml : mr
      if (mx == ml) { pos := posl } else { pos := posr }
  } else {
    mx := (a.array[start]).value
    pos := start
  }
}





