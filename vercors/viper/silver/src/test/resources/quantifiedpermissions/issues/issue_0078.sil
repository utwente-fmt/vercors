/* The problem was a "typo" in the original implementation of
 * DefaultConsumer/ast.Forall, with the effect that the pre-consume heap Ïƒ.h
 * was used in a place where the consume heap h should be used.
 */

field p: Ref
field s: Set[Ref]

method Dmm(this: Ref)
  requires acc(this.p) && acc(this.s)
  requires this.s == Set(this)
  requires this.p == null
{
  exhale    acc(this.s)
         && (forall x: Ref :: x in this.s ==> acc(x.p, 1/2))
         && (forall x: Ref :: x in this.s && x.p == null ==> acc(x.p, 1/2))
}

method Dmm2(this: Ref)
  requires acc(this.p) && acc(this.s)
  requires this in this.s
  requires this.p == null
{
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale    acc(this.s)
         && (forall x: Ref :: x in this.s ==> acc(x.p, 1/2))
                /* There could be x != this in this.s s.t. we don't have access to x.p */
         && (forall x: Ref :: x in this.s && x.p == null ==> acc(x.p, 1/2))
}

field left: Ref
field all: Set[Ref]

predicate inv(this: Ref) {
     acc(this.all)
  && (forall q: Ref :: q in (this.all) ==> acc(q.left, 1/2))
  && (forall x: Ref :: (x in (this.all) && x.left == null) ==> acc(x.left, 1/2))
}

method foo() {
  var x: Ref
  var t: Ref

  inhale acc(x.left) && x.left == null
  inhale acc(t.all) && t.all == Set(x)

  fold acc(inv(t))
}

method goo() {
  var x: Ref
  var t: Ref

  inhale acc(inv(t))
  unfold acc(inv(t))
  inhale x in t.all && x.left == null
  exhale acc(x.left)
}
