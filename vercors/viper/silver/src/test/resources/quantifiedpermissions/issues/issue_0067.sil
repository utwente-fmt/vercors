field k: Perm
field f: Int

method test01(S: Set[Ref], a: Ref)
  requires forall s: Ref :: s in S ==> acc(s.k)
  requires forall s: Ref :: s in S ==> s.k > none
  requires forall s: Ref :: s in S && s != null ==> acc(s.f, s.k)
  requires a in S
{
  exhale acc(a.f, a.k)
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale acc(a.f, a.k)
}

method test02(S: Set[Ref], a: Ref, b: Ref)
  requires forall s: Ref :: s in S ==> acc(s.k)
  requires forall s: Ref :: s in S ==> s.k > none
  requires forall s: Ref :: s in S && s != null ==> acc(s.f, s.k)
  requires a in S && b in S
{
  exhale acc(a.f, a.k)
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale acc(b.f, a.k)
}

method test03(S: Set[Ref], a: Ref, b: Ref)
  requires forall s: Ref :: s in S ==> acc(s.k)
  requires forall s: Ref :: s in S ==> s.k > none
  requires forall s: Ref :: s in S && s != null ==> acc(s.f, s.k)
  requires a in S && b in S
{
  exhale acc(a.f, a.k)
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale acc(b.f, b.k)
}

method test04(S: Set[Ref], a: Ref, b: Ref)
  requires forall s: Ref :: s in S ==> acc(s.k)
  requires forall s: Ref :: s in S ==> s.k > none
  requires forall s: Ref :: s in S && s != null ==> acc(s.f, s.k)
  requires a in S && b in S
  requires a != b
{
  exhale acc(a.f, a.k)
  exhale acc(b.f, b.k)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
