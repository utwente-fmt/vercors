field f: Int

method test01(xs: Seq[Int], k: Int) {
  inhale 0 <= k && k < |xs|
  inhale forall i: Int :: i in [0..|xs|-1) ==> xs[i] < xs[i + 1]

  // assume k == 1
  var ys: Seq[Int] := xs[k..|xs|]

  exhale forall i: Int :: i in [0..|ys|-1) ==> ys[i] < ys[i + 1] /* Holds */
}


method test02(xs: Seq[Ref], k: Int) {
  inhale 0 <= k && k < |xs|
  inhale forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f)
  inhale forall i: Int :: i in [0..|xs|-1) ==> xs[i].f != 0 /* Simplified w.r.t. to test01 */

  var ys: Seq[Ref] := xs[k..|xs|]

  exhale forall i: Int :: i in [0..|ys|-1) ==> ys[i].f != 0 /* Holds */
}

method test03(xs: Seq[Ref], k: Int) {
  inhale 0 <= k && k < |xs|
  inhale forall i: Int :: i in [0..|xs|) ==> acc(xs[i].f)
  inhale forall i: Int :: i in [0..|xs|-1) ==> xs[i].f < xs[i + 1].f

  // assume k == 0 /* Uncommented and the final exhale holds; anything other than zero won't make it hold */
  var ys: Seq[Ref] := xs[k..|xs|]

  exhale forall i: Int :: i in [0..|ys|-1) ==> ys[i].f < ys[i + 1].f /* used to fail */
}
