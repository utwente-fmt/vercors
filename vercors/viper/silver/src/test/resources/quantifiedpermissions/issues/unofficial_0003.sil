field next: Ref
field val: Int
field nodes: Seq[Ref]
field data: Seq[Int]

function trigger(i: Int) : Bool { true }

predicate List(this: Ref) {
	acc(this.nodes) //&& (forall i: Int :: 0 <= i && i < |this.nodes| ==> acc(this.nodes[i].val))
	 && (forall i: Int :: 0 <= i && i < |this.nodes| ==> acc(this.nodes[i].next))
	 && (forall i: Int :: (0 <= i && i < |this.nodes| ==> /* [XXX] */
	 	    (trigger(i) && i < |this.nodes| - 1
	 	      ? true //this.nodes[i].next == this.nodes[i+1]
	 	      : this.nodes[i].next == null
        )))
}

method append(this: Ref, elem: Int)
  requires acc(List(this))
{
	unfold acc(List(this))

  /* There was a problem with the triggers of the auxiliary quantifiers that result from producing
   * the body of the predicate. In particular, the trigger computation code failed to compute any
   * triggers for the auxiliary quantifiers arising from the Silver quantifier marked by [XXX],
   * and thus, the assert below failed.
   *
   * The solution was to change the triggers used for auxiliary quantifiers such that the
   * auto-computed triggers and the triggers chosen for the real quantifier are combined.
   */

  assert
    (forall i: Int :: (0 <= i && i < |this.nodes| ==>
      (trigger(i) && i < |this.nodes| - 1
        ? true // this.nodes[i].next == this.nodes[i+1]
	 	    : this.nodes[i].next == null
      )))
}

