field f: Int

method test01(xs: Seq[Ref], n: Int) {
  inhale |xs| == n
  inhale forall i: Int :: i in [0..n) ==> acc(xs[i].f)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert n > 0
}

method test02(xs: Seq[Ref], n: Int) {
  inhale |xs| == n
  inhale forall i: Int :: i in [0..n) ==> acc(xs[i].f)

  exhale forall i: Int :: i in [0..n) ==> acc(xs[i].f)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert n > 0 /* Held incorrectly previously*/
}

method test03(xs: Seq[Ref], n: Int)
  requires |xs| == n
  requires forall i: Int :: i in [0..n) ==> acc(xs[i].f)
  ensures forall i: Int :: i in [0..n) ==> acc(xs[i].f)

  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures  n > 0 /* Held incorrectly previously*/
{}

function fun01(i: Int, b: Bool): Bool
  ensures result <==> b

method test04(xs: Seq[Ref], b: Bool) {
  inhale 10 < |xs|
  inhale forall i: Int :: 0 <= i && i < |xs| && fun01(i, b) ==> acc(xs[i].f)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert b
}

method test05(xs: Seq[Ref], b: Bool) {
  inhale 10 < |xs|
  inhale forall i: Int :: 0 <= i && i < |xs| ==> acc(xs[i].f)

  exhale forall i: Int :: 0 <= i && i < |xs| && fun01(i, b) ==> acc(xs[i].f)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert b /* Held incorrectly previously*/
}
