field next: Ref

predicate Valid(nodes: Set[Ref]) {
  (forall n: Ref :: n in nodes ==> acc(n.next))
}

method Bug(nodes: Set[Ref], rd: Perm)
  requires rd > none
  requires acc(Valid(nodes), rd)
{
  unfold acc(Valid(nodes), rd)
  fold acc(Valid(nodes), rd)
}

method NoBug(nodes: Set[Ref], rd: Perm)
  requires acc(Valid(nodes), rd)
  requires rd == write
{
  unfold acc(Valid(nodes), rd)
  fold acc(Valid(nodes), rd)
}
