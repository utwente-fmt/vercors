field f: Int

method foo(S: Seq[Ref], start: Int, end: Int, p: Perm)
  requires 0 <= start && start <= end && end <= |S|
  requires (forall i:Int :: i in [start..end) ==> acc(S[i].f, p))
  ensures (forall i1:Int :: i1 in [start..end) ==> acc(S[i1].f, p))
{}

method test1(S: Seq[Ref], start: Int, end: Int, p: Perm)
  requires 0 <= start && start <= end && end <= |S|
  requires p != none
  requires (forall i:Int :: i in [start..end) ==> acc(S[i].f, p))
  ensures (forall i1:Int :: i1 in [start..end) ==> acc(S[i1].f, p))
{
  inhale forall i: Int :: i in [start..end) ==> acc(S[i].f, p)
  exhale forall i: Int :: i in [start..end) ==> acc(S[i].f, p)
}

method test2(S: Seq[Ref], start: Int, end: Int, p: Perm)
  requires 0 <= start && start < end && end <= |S|
{
  inhale forall i: Int :: i in [start..end) ==> acc(S[i].f, p)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert p != none
}
