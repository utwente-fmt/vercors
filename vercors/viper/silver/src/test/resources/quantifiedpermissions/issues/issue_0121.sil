field S: Set[Ref]
field f: Ref

predicate p(this:Ref) {
      acc(this.S)
  && this in this.S
  && (forall x: Ref :: x in this.S ==> acc(x.f, 1/2))
  && (forall y: Ref :: y in this.S && y.f != null ==> y.f in this.S)
}

method test01(xs: Set[Ref], this: Ref)
  requires this in xs
  requires forall x: Ref :: x in xs ==> acc(x.f, 1/2)
  requires forall y: Ref :: y in xs && y.f != null ==> y.f in xs
{}
