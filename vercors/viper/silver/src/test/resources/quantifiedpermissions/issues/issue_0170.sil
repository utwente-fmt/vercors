field next: Ref
field val: Int
field nodes: Seq[Ref]

predicate List(this: Ref)
{
	acc(this.nodes) && (forall i: Int :: 0 <= i && i < |this.nodes| ==> acc(this.nodes[i].val))
	 && (forall i: Int :: 0 <= i && i < |this.nodes| ==> acc(this.nodes[i].next))
	 && (forall i: Int :: 0 <= i && i < |this.nodes| ==>
	 	    (i < |this.nodes| - 1 ? this.nodes[i].next == this.nodes[i+1] : this.nodes[i].next == null))
}

method repro(this: Ref)
  requires acc(List(this))
{
	unfold acc(List(this))
	var n : Ref
	n := new(next)
	fold acc(List(this))
}
