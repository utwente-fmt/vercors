field f: Int
field n: Set[Ref]

predicate inv(this: Ref) {
    acc(this.n) && forall x: Ref :: x in this.n ==> acc(x.f)
}

method m2(this: Ref, xs: Set[Ref])
  requires acc(inv(this))
{
  unfold acc(inv(this))
  fold acc(inv(this))

  //:: ExpectedOutput(assignment.failed:insufficient.permission)
  this.n := xs
}