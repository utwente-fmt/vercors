field ArrayTest__x: Seq[Ref]

field ArrayTest__twin: Ref

field Ref__Integer_value: Int

method ArrayTest__ArrayTest(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
{
  var diz__1: Ref
  diz__1 := new(ArrayTest__x, ArrayTest__twin)
  inhale false
  sys__result := diz__1
  assert sys__result != null
  inhale false
}

domain D {
  function TRG(x: Ref): Bool
}

method ArrayTest__m(diz: Ref, current_thread_id: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires acc(diz.ArrayTest__twin, wildcard)
  requires diz.ArrayTest__twin != null
  requires acc(diz.ArrayTest__x, wildcard)
  requires acc(diz.ArrayTest__twin.ArrayTest__x, wildcard)
  requires |diz.ArrayTest__x| > 10
  requires (forall i: Int :: (0 <= i) && (i < |diz.ArrayTest__x|) ==> acc(diz.ArrayTest__x[i].Ref__Integer_value, 1 / 2))
  requires |diz.ArrayTest__twin.ArrayTest__x| > 10
  requires (forall i: Int :: (0 <= i) && (i < |diz.ArrayTest__twin.ArrayTest__x|) ==> acc(diz.ArrayTest__twin.ArrayTest__x[i].Ref__Integer_value, 1 / 2))
{
  var tmp__2: Int
  var __flatten_1__3: Ref
  var __flatten_2__4: Ref
  var __flatten_3__5: Ref
  var __flatten_4__6: Ref
  var __flatten_5__7: Int
  __flatten_1__3 := diz.ArrayTest__twin
  __flatten_2__4 := diz.ArrayTest__x[4]
  __flatten_3__5 := __flatten_1__3.ArrayTest__x[4]
  tmp__2 := __flatten_2__4.Ref__Integer_value + __flatten_3__5.Ref__Integer_value
  if (diz == diz.ArrayTest__twin) {
    __flatten_4__6 := diz.ArrayTest__x[4]
    __flatten_5__7 := tmp__2
    /* 'assert true' helps, since it triggers a heap compression, which makes Silicon/Z3
     * learn that from diz == diz.ArrayTest__twin it follows that
     * diz.ArrayTest__x == diz.ArrayTest__twin.ArrayTest__x
     */
    //:: UnexpectedOutput(assignment.failed:insufficient.permission, /silicon/issue/184/)
    __flatten_4__6.Ref__Integer_value := __flatten_5__7 /* FAILS */
  }
}
