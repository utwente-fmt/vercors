field f: Ref

method test01(xs: Set[Ref], ys: Set[Ref])
  requires forall x: Ref :: x in xs ==> acc(x.f, wildcard)
  requires forall x: Ref :: x in ys ==> acc(x.f, wildcard)
  ensures forall x: Ref :: x in (xs union ys) ==> acc(x.f, wildcard)
{}

method test02(xs: Set[Ref], y: Ref, z: Ref)
  requires forall x: Ref :: x in xs ==> acc(x.f, wildcard)
  requires z in xs
  ensures forall x: Ref :: x in xs ==> acc(x.f, wildcard)
{
  if (y in xs) {
    exhale acc(y.f, wildcard)
  }

  exhale forall x: Ref :: x in (xs setminus Set(y)) ==> acc(x.f, wildcard)
  exhale forall x: Ref :: x in xs ==> acc(x.f, wildcard)
}
