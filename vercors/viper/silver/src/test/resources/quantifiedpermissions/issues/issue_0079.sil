field fld: Int
field col: Set[Ref]

predicate inv(collection: Set[Ref]) {
  forall x: Ref :: x in collection ==> acc(x.fld)
}

function getField(this: Ref) : Int
  requires acc(this.col) && acc(inv(this.col)) && this in this.col
{
  unfolding acc(inv(this.col)) in this.fld
}

method foo(this: Ref)
  requires acc(this.col) && acc(inv(this.col)) && this in this.col
  requires getField(this) == 5
{
  unfold acc(inv(this.col))
  assert this.fld == 5
}

method test02(x: Ref, xs: Set[Ref])
  requires forall y: Ref :: y in xs ==> acc(y.fld)
  requires x in xs
  requires x.fld == 0
{
  fold inv(xs)
  unfold inv(xs)
  assert x.fld == 0
}

function getField01(xs: Set[Ref], y: Ref) : Int
  requires acc(inv(xs)) && y in xs
{
  unfolding acc(inv(xs)) in y.fld
}

method test01(xs: Set[Ref], y: Ref)
  requires acc(inv(xs)) && y in xs
  requires getField01(xs, y) == 5
{
  unfold acc(inv(xs))
  assert y.fld == 5
}
