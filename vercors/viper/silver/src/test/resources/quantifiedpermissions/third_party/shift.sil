/* Provided by Stefan Blom of U Twente with the comment:
 *   "Apparently quantifiers over a range are easier than equivalent
 *    free form ones because in each example the last assert fails."
 */

field Integer_value: Int

method test1(len: Int, ar: Seq[Ref])
  requires |ar| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, 1 / 2))
  requires (forall i: Int :: (0 <= i) && (i < len) ==> (ar[i].Integer_value == 0))
{
  assert (forall i: Int :: (1 <= i) && (i < len) ==> (ar[i].Integer_value == 0))
  assert (forall i: Int :: (i in [0..len - 1)) ==> (ar[i+1].Integer_value == 0))
  assert (forall i: Int :: (0 <= i) && (i < len - 1) ==> (ar[i+1].Integer_value == 0))
}

method test2(len: Int, ar: Seq[Ref])
  requires |ar| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, 1 / 2))
  requires (forall i: Int :: (0 <= i) && (i < len) ==> (ar[i].Integer_value == 0))
{
  assert (forall i: Int :: (0 <= i) && (i < len-1) ==> (ar[i].Integer_value == 0))
  assert (forall i: Int :: (i in [1..len)) ==> (ar[i-1].Integer_value == 0))
  assert (forall i: Int :: (1 <= i) && (i < len) ==> (ar[i-1].Integer_value == 0))
}


