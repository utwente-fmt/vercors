/* Reported by Stefan Blom of U Twente.
 * Previously, the program failed, *except* if a particular quantified assumption (precondition)
 * was removed.
 */

field Map__keys: Seq[Ref]

field Map__values: Seq[Ref]

field Ref__Integer_value: Int

function Map__EMPTY(): Int
  ensures result == -1
{
  -1
}

function Map__DELETED(): Int
  ensures result == -2
{
  -2
}

function Map__indexOfLoop(diz: Ref, hash: Int, ignoreDeleted: Bool, cap: Int): Int
  requires diz != null
  requires acc(diz.Map__keys, write)
  requires acc(diz.Map__values, write)
  requires |diz.Map__keys| > 0
  requires |diz.Map__values| > 0
  requires |diz.Map__keys| == |diz.Map__values|
  requires (forall i2: Int :: (i2 >= 0) && (i2 < |diz.Map__keys|) ==> acc(diz.Map__keys[i2].Ref__Integer_value, write))
  requires (forall i3: Int :: (i3 >= 0) && (i3 < |diz.Map__values|) ==> acc(diz.Map__values[i3].Ref__Integer_value, write))
  /* previously offending requirement: */ 
  requires (forall i1: Int :: (i1 >= 0) && (i1 < |diz.Map__keys|) ==> (diz.Map__keys[i1].Ref__Integer_value == Map__EMPTY()) || (diz.Map__keys[i1].Ref__Integer_value == Map__DELETED()) || (diz.Map__keys[i1].Ref__Integer_value >= 0))
  requires (hash >= 0) && (hash < |diz.Map__keys|)
  requires cap < |diz.Map__keys|
  ensures (result == Map__EMPTY()) || (result >= 0) && (result < |diz.Map__keys|)
{
  (cap <= 0 ? Map__EMPTY() : Map__indexOfLoop(diz, (hash + 1) % |diz.Map__keys|, ignoreDeleted, cap - 1))
}

method Map__Map(capacity: Int) returns (sys__result: Ref)
  ensures sys__result != null
{
  var diz: Ref
  diz := new(Map__keys, Map__values)
  sys__result := diz
  assert sys__result != null
  inhale false
}
