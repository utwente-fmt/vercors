field Ref__Integer_value: Int

function Ref__multidim_index_2(N0: Int, N1: Int, i0: Int, i1: Int): Int
  requires 0 <= i0
  requires i0 < N0
  requires 0 <= N0
  requires 0 <= i1
  requires i1 < N1
  requires 0 <= N1
  ensures 0 <= result
  ensures result < N0 * N1
  ensures result == i0 * N1 + i1
  ensures result % N1 == i1
  ensures result % N1 < N0


method Ref__zero(diz: Ref, current_thread_id: Int, M: Int, N: Int, step: Int, matrix: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (M > 0) && (N > 0) && (step > N)
  requires N <= step
  requires M * step <= |matrix|
  requires (forall j1: Int :: (0 <= j1) && (j1 < M * step) && (j1 % step < N) ==> acc(matrix[j1].Ref__Integer_value, write))
{
  var __flatten_1: Int
  var __flatten_2: Int
  var __flatten_3: Ref
  var __flatten_4: Int
  __flatten_2 := Ref__multidim_index_2(M, step, 0, 0)
  __flatten_1 := __flatten_2
  __flatten_3 := matrix[__flatten_1]
  __flatten_4 := 0
  __flatten_3.Ref__Integer_value := __flatten_4
}
