field Ref__Integer_value: Int

function sum_list(i: Int, hi: Int, ar: Seq[Int]): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? ar[i] + sum_list(i + 1, hi, ar) : 0)
}

function sum_array(i: Int, lo: Int, hi: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (lo <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? ar[i].Ref__Integer_value + sum_array(i + 1, lo, hi, ar) : 0)
}

function sum_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires max <= |ar|
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) ? ar[i].Ref__Integer_value : 0) + sum_square(i + 1, lo, hi, step, min, max, ar) : 0)
}

function count_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires max <= |ar|
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) && (ar[i].Ref__Integer_value == v) ? 1 : 0) + count_square(i + 1, lo, hi, step, min, max, ar, v) : 0)
}

function count_list(i: Int, hi: Int, ar: Seq[Int], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? (ar[i] == v ? 1 : 0) + count_list(i + 1, hi, ar, v) : 0)
}

function count_array(i: Int, hi: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (0 <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? (ar[i].Ref__Integer_value == v ? 1 : 0) + count_array(i + 1, hi, ar, v) : 0)
}

method Ref__loop_main_11(diz: Ref, current_thread_id: Int, a: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (forall i: Int :: (0 <= i) && (i < |a|) ==> acc(a[i].Ref__Integer_value, 1 / 2))
  requires (0 <= 0) && (0 < |a|) ==> acc(a[0].Ref__Integer_value, 1 / 2)
  requires (forall i: Int :: (1 <= i) && (i < (|a| - 1 < |a| ? |a| - 1 : |a|) + 1) ==> acc(a[i].Ref__Integer_value, 1 / 2))
  ensures (forall i: Int :: (0 <= i) && (i < |a|) ==> acc(a[i].Ref__Integer_value, write))
{
  inhale false
}

method Ref__recv_body_53(diz: Ref, current_thread_id: Int, a: Seq[Ref], i: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= i && i < |a|
  ensures acc(a[i].Ref__Integer_value, 1 / 2)
{
  inhale false
}

method Ref__send_body_59(diz: Ref, current_thread_id: Int, a: Seq[Ref], i: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= i && i+1 < |a|
  requires acc(a[i + 1].Ref__Integer_value, 1 / 2)
{
  inhale false
}

method Ref__loop_body_11(diz: Ref, current_thread_id: Int, a: Seq[Ref], i: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires (0 <= i) && (i < |a|)
  requires acc(a[i].Ref__Integer_value, 1 / 2)
  requires (i == 0) ==> acc(a[i].Ref__Integer_value, 1 / 2)
  requires (i < |a| - 1) ==> acc(a[i + 1].Ref__Integer_value, 1 / 2)
  ensures (0 <= i) && (i < |a|)
  ensures acc(a[i].Ref__Integer_value, write)
{
  var __flatten_5: Ref
  var __flatten_6: Int
  var __flatten_7: Ref
  if (i > 0) {
    Ref__recv_body_53(diz, current_thread_id, a, i)
  }
  if (i < |a| - 1) {
    __flatten_5 := a[i]
    __flatten_7 := a[i + 1]
    __flatten_6 := __flatten_7.Ref__Integer_value
    __flatten_5.Ref__Integer_value := __flatten_6
    Ref__send_body_59(diz, current_thread_id, a, i)
  }
}

method Ref__guard_check_S2_S1(diz: Ref, current_thread_id: Int, a: Seq[Ref], i: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires (0 <= i) && (i < |a|)
  requires i > 0
  ensures 1 <= i
  ensures i - 1 < |a| - 1
{
}

method Ref__resource_check_S2_S1(diz: Ref, current_thread_id: Int, a: Seq[Ref], i: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires (0 <= i) && (i < |a|)
  requires i - 1 < |a| - 1
  requires i > 0
  requires acc(a[i - 1 + 1].Ref__Integer_value, 1 / 2)
  ensures i - 1 < |a| - 1
  ensures acc(a[i].Ref__Integer_value, 1 / 2)
{
}

method Ref__main(diz: Ref, current_thread_id: Int, a: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (forall i: Int :: (0 <= i) && (i < |a|) ==> acc(a[i].Ref__Integer_value, write))
  ensures (forall i: Int :: (0 <= i) && (i < |a|) ==> acc(a[i].Ref__Integer_value, write))
{
  Ref__loop_main_11(diz, current_thread_id, a)
}

method Ref__Ref(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
{
  var diz: Ref
  diz := new(Ref__Integer_value)
  sys__result := diz
  assert sys__result != null
  inhale false
}
