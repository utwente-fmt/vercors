/* This test is due to Stefan Blom. He noticed that the snapshots-as-arrays encoding
 * that Silicon-QP used at some point slowed the verification of this test down
 * quite a lot (from a few seconds to several minutes.)
 */

field Integer_value: Int

method loop_main_54(this: Ref, len: Int, ar: Seq[Ref], br: Seq[Ref], cr: Seq[Ref])
  requires 0 < len
  requires |ar| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, write))
  requires |br| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(br[i].Integer_value, 1 / 2))
  requires |cr| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(cr[i].Integer_value, write))
  ensures |ar| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, 1 / 2))
  ensures |br| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(br[i].Integer_value, 1 / 2))
  ensures |cr| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(cr[i].Integer_value, write))
  ensures (forall i: Int :: (i in [1 - 1..len - 1)) ==> acc(ar[i].Integer_value, 1 / 2))
  ensures acc(ar[|ar| - 1].Integer_value, 1 / 2)
{
  inhale false
}

method send_body_100(this: Ref, ar: Seq[Ref], i: Int)
  requires 0 <= i && i < |ar|
  requires acc(ar[i].Integer_value, 1 / 2)
{
  inhale false
}

method recv_body_102(this: Ref, ar: Seq[Ref], i: Int)
  requires 0 < i && i-1 < |ar|
  ensures acc(ar[i - 1].Integer_value, 1 / 2)
{
  inhale false
}

method loop_body_54(this: Ref, len: Int, ar: Seq[Ref], br: Seq[Ref], i: Int, cr: Seq[Ref])
  requires (0 <= i) && (i < len)
  requires |ar| == len
  requires acc(ar[i].Integer_value, write)
  requires |br| == len
  requires acc(br[i].Integer_value, 1 / 2)
  requires |cr| == len
  requires acc(cr[i].Integer_value, write)
  ensures (0 <= i) && (i < len)
  ensures |ar| == len
  ensures acc(ar[i].Integer_value, 1 / 2)
  ensures |br| == len
  ensures acc(br[i].Integer_value, 1 / 2)
  ensures |cr| == len
  ensures acc(cr[i].Integer_value, write)
  ensures (i > 0) ==> acc(ar[i - 1].Integer_value, 1 / 2)
  ensures (i == |ar| - 1) ==> acc(ar[i].Integer_value, 1 / 2)
{
  ar[i].Integer_value := br[i].Integer_value + 1
  if (i < len - 1) {
    send_body_100(this, ar, i)
  }
  if (i > 0) {
    recv_body_102(this, ar, i)
    cr[i].Integer_value := ar[i - 1].Integer_value + 2
  }
}

method zero_array(this: Ref, ar: Seq[Ref], br: Seq[Ref], cr: Seq[Ref], len: Int) returns (sys__result: Int)
  requires 0 < len
  requires |ar| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, write))
  requires |br| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(br[i].Integer_value, 1 / 2))
  requires |cr| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(cr[i].Integer_value, write))
  ensures |ar| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, write))
  ensures |br| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(br[i].Integer_value, 1 / 2))
  ensures |cr| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(cr[i].Integer_value, write))
{
  assert |ar| == len
  assert |br| == len
  assert |cr| == len
  loop_main_54(this, len, ar, br, cr)
}
