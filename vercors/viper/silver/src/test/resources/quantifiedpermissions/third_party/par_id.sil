/* This test case is due to Stefan Blom. It uses old-expressions under quantifiers,
 * which Silicon did not consider as potential triggers until commit 3930114cec12.
 */

field Integer_value: Int

method loop_main_22(this: Ref, len: Int, ar: Seq[Ref])
  requires |ar| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, write))
  ensures |ar| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, write))
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> (ar[i].Integer_value == old(ar[i].Integer_value)))
{
  inhale false
}

method loop_body_22(this: Ref, len: Int, ar: Seq[Ref], i: Int)
  requires (0 <= i) && (i < len)
  requires |ar| == len
  requires acc(ar[i].Integer_value, write)
  ensures (0 <= i) && (i < len)
  ensures |ar| == len
  ensures acc(ar[i].Integer_value, write)
  ensures ar[i].Integer_value == old(ar[i].Integer_value)
{
  ar[i].Integer_value := ar[i].Integer_value
}

method par_id(this: Ref, ar: Seq[Ref], len: Int) returns (sys__result: Int)
  requires |ar| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, write))
  ensures |ar| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Integer_value, write))
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> (ar[i].Integer_value == old(ar[i].Integer_value)))
{
  loop_main_22(this, len, ar)
}
