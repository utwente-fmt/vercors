/* Provided by Stefan Blom of U Twente.
 * Illustrated Silicon-QP issue 122.
 */

field res: Int
field val: Int

function sum(diz: Ref, lo: Int, hi: Int, i: Int, ar: Seq[Ref]): Int
  requires diz != null
  requires (0 <= lo) && (lo <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (k in [lo..hi)) ==> acc(ar[k].val, wildcard))
{
  (i < hi ? ar[i].val + sum(diz, lo, hi, i + 1, ar) : 0)
}

method do_sum(diz: Ref, ar: Seq[Ref])
  requires diz != null
  requires acc(diz.res, write)
  requires (forall k: Int :: (k in [0..|ar|)) ==> acc(ar[k].val, 1 / 2))
{
  assume diz.res == sum(diz, 0, |ar|, 0, ar)
  assert diz.res == sum(diz, 0, |ar|, 0, ar)
}

