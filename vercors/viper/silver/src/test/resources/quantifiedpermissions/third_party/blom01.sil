/* Provided by Stefan Blom of U Twente.
 * 
 * The original program used foralls of the shape
 *
 *   forall i : Int :: i in [0..|ar|) ==> acc(ar[i].val, i%2==0?write:none)
 *
 * i.e., the filtering happened in the permission expression. This was done
 * because of syntactic limitations of the early implementation.
 * Such permission expressions were (and are) rejected, however, because
 * the semantics of acc(x.f, p) imply that p > none.
 */

field val : Int

method main (ar : Seq[Ref])
  requires forall i : Int :: i in [0..|ar|) && i%2==0 ==> acc(ar[i].val)
  ensures  forall i : Int :: i in [0..|ar|) && i%2==0 ==> acc(ar[i].val)
{
  if (2 < |ar|){
    ar[2].val := 2;
  }
  assert forall i : Int :: i in [0..|ar|) && i%2==0 ==> acc(ar[i].val)
} 