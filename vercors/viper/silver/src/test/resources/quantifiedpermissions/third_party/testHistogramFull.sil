//:: IgnoreFile(/silicon/issue/148/)
//:: IgnoreFile(/carbon/issue/93/)

field Ref__Integer_value: Int

function Ref__multidim_index_2(N0: Int, N1: Int, i0: Int, i1: Int): Int
  requires 0 <= i0
  requires i0 < N0
  requires 0 <= N0
  requires 0 <= i1
  requires i1 < N1
  requires 0 <= N1
  ensures 0 <= result
  ensures result < N0 * N1
  ensures result == i0 * N1 + i1
  ensures result % N1 == i1
  ensures result % N1 < N0


function sum_list(i: Int, hi: Int, ar: Seq[Int]): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? ar[i] + sum_list(i + 1, hi, ar) : 0)
}

function sum_array(i: Int, lo: Int, hi: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= i) && (i <= hi)
  requires (forall k: Int :: (lo <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? ar[i].Ref__Integer_value + sum_array(i + 1, lo, hi, ar) : 0)
}

function sum_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) ? ar[i].Ref__Integer_value : 0) + sum_square(i + 1, lo, hi, step, min, max, ar) : 0)
}

function count_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) && (ar[i].Ref__Integer_value == v) ? 1 : 0) + count_square(i + 1, lo, hi, step, min, max, ar, v) : 0)
}

function count_list(i: Int, hi: Int, ar: Seq[Int], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? (ar[i] == v ? 1 : 0) + count_list(i + 1, hi, ar, v) : 0)
}

function count_array(i: Int, hi: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires (forall k: Int :: (0 <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? (ar[i].Ref__Integer_value == v ? 1 : 0) + count_array(i + 1, hi, ar, v) : 0)
}

method Ref__loop_main_87(diz: Ref, current_thread_id: Int, P: Int, hist: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (forall k: Int :: (0 <= k) && (k < P) ==> acc(hist[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> acc(hist[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> (hist[k].Ref__Integer_value == 0))
{
  inhale false
}

method Ref__loop_body_87(diz: Ref, current_thread_id: Int, k: Int, P: Int, hist: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (0 <= k) && (k < P)
  requires acc(hist[k].Ref__Integer_value, write)
  ensures (0 <= k) && (k < P)
  ensures acc(hist[k].Ref__Integer_value, write)
  ensures hist[k].Ref__Integer_value == 0
{
  var __flatten_4: Ref
  var __flatten_5: Int
  __flatten_4 := hist[k]
  __flatten_5 := 0
  __flatten_4.Ref__Integer_value := __flatten_5
}

method Ref__loop_main_107(diz: Ref, current_thread_id: Int, step: Int, matrix: Seq[Ref], P: Int, N: Int, M: Int, p: Perm, hist: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (p != none) && (M > 0) && (N > 0) && (step >= N) && (P > 0)
  requires (forall k: Int :: (0 <= k) && (k < P) ==> acc(hist[k].Ref__Integer_value, write))
  requires N <= step
  requires (forall j: Int :: (0 <= j) && (j < M * step) && (j % step < N) ==> acc(matrix[j].Ref__Integer_value, p))
  requires (forall i: Int, j: Int :: (0 <= i) && (i < M) && (0 <= j) && (j < N) ==> (0 <= matrix[Ref__multidim_index_2(M, step, i, j)].Ref__Integer_value))
  requires (forall i: Int, j: Int :: (0 <= i) && (i < M) && (0 <= j) && (j < N) ==> (matrix[Ref__multidim_index_2(M, step, i, j)].Ref__Integer_value < P))
  ensures (p != none) && (M > 0) && (N > 0) && (step >= N) && (P > 0)
  ensures N <= step
  ensures (forall j: Int :: (0 <= j) && (j < M * step) && (j % step < N) ==> acc(matrix[j].Ref__Integer_value, p))
  ensures (forall i: Int, j: Int :: (0 <= i) && (i < M) && (0 <= j) && (j < N) ==> (matrix[Ref__multidim_index_2(M, step, i, j)].Ref__Integer_value == old(matrix[Ref__multidim_index_2(M, step, i, j)].Ref__Integer_value)))
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> acc(hist[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> (hist[k].Ref__Integer_value == old(hist[k].Ref__Integer_value) + count_square(0, 0, N, step, 0, M * step, matrix, k)))
{
  inhale false
}

method Ref__loop_body_107(diz: Ref, current_thread_id: Int, p: Perm, step: Int, j: Int, i: Int, P: Int, N: Int, M: Int, hist: Seq[Ref], matrix: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (p != none) && (M > 0) && (N > 0) && (step >= N) && (P > 0)
  requires (0 <= i) && (i < M) && ((0 <= j) && (j < N))
  requires (forall k: Int :: (0 <= k) && (k < P) ==> acc(hist[k].Ref__Integer_value, write))
  requires (forall k: Int :: (0 <= k) && (k < P) ==> (hist[k].Ref__Integer_value == 0))
  requires acc(matrix[Ref__multidim_index_2(M, step, i, j)].Ref__Integer_value, p)
  requires 0 <= matrix[Ref__multidim_index_2(M, step, i, j)].Ref__Integer_value
  requires matrix[Ref__multidim_index_2(M, step, i, j)].Ref__Integer_value < P
  ensures (p != none) && (M > 0) && (N > 0) && (step >= N) && (P > 0)
  ensures (0 <= i) && (i < M) && ((0 <= j) && (j < N))
  ensures acc(matrix[Ref__multidim_index_2(M, step, i, j)].Ref__Integer_value, p)
  ensures matrix[Ref__multidim_index_2(M, step, i, j)].Ref__Integer_value == old(matrix[Ref__multidim_index_2(M, step, i, j)].Ref__Integer_value)
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> acc(hist[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> (hist[k].Ref__Integer_value == (matrix[Ref__multidim_index_2(M, step, i, j)].Ref__Integer_value == k ? 1 : 0)))
{
  var __flatten_1: Int
  var __flatten_6: Int
  var __flatten_7: Ref
  var __flatten_8: Ref
  var __flatten_9: Int
  var __flatten_10: Ref
  var __flatten_11: Ref
  __flatten_6 := Ref__multidim_index_2(M, step, i, j)
  __flatten_1 := __flatten_6
  __flatten_8 := matrix[__flatten_1]
  __flatten_7 := hist[__flatten_8.Ref__Integer_value]
  __flatten_11 := matrix[__flatten_1]
  __flatten_10 := hist[__flatten_11.Ref__Integer_value]
  __flatten_9 := __flatten_10.Ref__Integer_value + 1
  __flatten_7.Ref__Integer_value := __flatten_9
}

method Ref__histogram(diz: Ref, current_thread_id: Int, M: Int, N: Int, step: Int, matrix: Seq[Ref], P: Int, hist: Seq[Ref], p: Perm)
  requires diz != null
  requires current_thread_id >= 0
  requires (p != none) && (M > 0) && (N > 0) && (step >= N) && (P > 0)
  requires N <= step
  requires (forall j1: Int :: (0 <= j1) && (j1 < M * step) && (j1 % step < N) ==> acc(matrix[j1].Ref__Integer_value, p))
  requires (forall i1: Int, j1: Int :: (0 <= i1) && (i1 < M) && (0 <= j1) && (j1 < N) ==> (0 <= matrix[Ref__multidim_index_2(M, step, i1, j1)].Ref__Integer_value) && (matrix[Ref__multidim_index_2(M, step, i1, j1)].Ref__Integer_value < P))
  requires (forall i1: Int :: (0 <= i1) && (i1 < P) ==> acc(hist[i1].Ref__Integer_value, write))
  ensures (p != none) && (M > 0) && (N > 0) && (step >= N) && (P > 0)
  ensures N <= step
  ensures (forall j1: Int :: (0 <= j1) && (j1 < M * step) && (j1 % step < N) ==> acc(matrix[j1].Ref__Integer_value, p))
  ensures (forall i1: Int, j1: Int :: (0 <= i1) && (i1 < M) && (0 <= j1) && (j1 < N) ==> (matrix[Ref__multidim_index_2(M, step, i1, j1)].Ref__Integer_value == old(matrix[Ref__multidim_index_2(M, step, i1, j1)].Ref__Integer_value)))
  ensures (forall i1: Int :: (0 <= i1) && (i1 < P) ==> acc(hist[i1].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < P) ==> (hist[k].Ref__Integer_value == count_square(0, 0, N, step, 0, M * step, matrix, k)))
{
  Ref__loop_main_87(diz, current_thread_id, P, hist)
  Ref__loop_main_107(diz, current_thread_id, step, matrix, P, N, M, p, hist)

  /* Corresponds to the last postcondition.
   * Uncomment, and Silicon/Z3 won't terminate.
   */
//  var k0: Int
//  assume  (0 <= k0) && (k0 < P)
//  assert (hist[k0].Ref__Integer_value == count_square(0, 0, N, step, 0, M * step, matrix, k0))
}
