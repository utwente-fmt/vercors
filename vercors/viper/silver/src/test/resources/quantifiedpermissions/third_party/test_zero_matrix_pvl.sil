field Ref__Integer_value: Int

function Ref__multidim_index_2(N0: Int, N1: Int, i0: Int, i1: Int): Int
  requires 0 <= i0
  requires i0 < N0
  requires 0 <= N0
  requires 0 <= i1
  requires i1 < N1
  requires 0 <= N1
  ensures 0 <= result
  ensures result < N0 * N1
  ensures result == i0 * N1 + i1
  ensures result % N1 == i1
  ensures result % N1 < N0


function sum_list(i: Int, hi: Int, ar: Seq[Int]): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? ar[i] + sum_list(i + 1, hi, ar) : 0)
}

function sum_array(i: Int, lo: Int, hi: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (lo <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? ar[i].Ref__Integer_value + sum_array(i + 1, lo, hi, ar) : 0)
}

function sum_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires max <= |ar|
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) ? ar[i].Ref__Integer_value : 0) + sum_square(i + 1, lo, hi, step, min, max, ar) : 0)
}

function count_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires max <= |ar|
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) && (ar[i].Ref__Integer_value == v) ? 1 : 0) + count_square(i + 1, lo, hi, step, min, max, ar, v) : 0)
}

function count_list(i: Int, hi: Int, ar: Seq[Int], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? (ar[i] == v ? 1 : 0) + count_list(i + 1, hi, ar, v) : 0)
}

function count_array(i: Int, hi: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (0 <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? (ar[i].Ref__Integer_value == v ? 1 : 0) + count_array(i + 1, hi, ar, v) : 0)
}

method Ref__loop_main_33(diz: Ref, current_thread_id: Int, matrix: Seq[Ref], N: Int, M: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires M * N <= |matrix|
  requires (forall j: Int :: (0 <= j) && (j < M * N) ==> acc(matrix[j].Ref__Integer_value, write))
  ensures (forall j: Int :: (0 <= j) && (j < M * N) ==> acc(matrix[j].Ref__Integer_value, write))
  ensures (forall i: Int, j: Int :: (0 <= i) && (i < M) && (0 <= j) && (j < N) ==> (matrix[Ref__multidim_index_2(M, N, i, j)].Ref__Integer_value == 0))
{
  inhale false
}

method Ref__loop_body_33(diz: Ref, current_thread_id: Int, matrix: Seq[Ref], j: Int, i: Int, N: Int, M: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires (0 <= i) && (i < M) && ((0 <= j) && (j < N))
  requires Ref__multidim_index_2(M, N, i, j) < |matrix|
  requires acc(matrix[Ref__multidim_index_2(M, N, i, j)].Ref__Integer_value, write)
  ensures (0 <= i) && (i < M) && ((0 <= j) && (j < N))
  ensures acc(matrix[Ref__multidim_index_2(M, N, i, j)].Ref__Integer_value, write)
  ensures matrix[Ref__multidim_index_2(M, N, i, j)].Ref__Integer_value == 0
{
  var __flatten_1: Int
  var __flatten_3: Int
  var __flatten_4: Ref
  var __flatten_5: Int
  __flatten_3 := Ref__multidim_index_2(M, N, i, j)
  __flatten_1 := __flatten_3
  __flatten_4 := matrix[__flatten_1]
  __flatten_5 := 0
  __flatten_4.Ref__Integer_value := __flatten_5
}

method Ref__matrix(diz: Ref, current_thread_id: Int, M: Int, N: Int, step: Int, matrix: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (M > 0) && (N > 0) && (step >= N)
  requires M * N <= |matrix|
  requires (forall j1: Int :: (0 <= j1) && (j1 < M * N) ==> acc(matrix[j1].Ref__Integer_value, write))
  ensures (forall j2: Int :: (0 <= j2) && (j2 < M * N) ==> acc(matrix[j2].Ref__Integer_value, write))
  ensures (forall i3: Int, j3: Int :: (0 <= i3) && (i3 < M) && (0 <= j3) && (j3 < N) ==> (matrix[Ref__multidim_index_2(M, N, i3, j3)].Ref__Integer_value == 0))
{
  Ref__loop_main_33(diz, current_thread_id, matrix, N, M)
}

method Ref__Ref(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
{
  var diz: Ref
  diz := new(Ref__Integer_value)
  sys__result := diz
  assert sys__result != null
  inhale false
}
