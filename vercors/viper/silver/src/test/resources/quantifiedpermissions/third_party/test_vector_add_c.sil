field Ref__Integer_value: Int

function sum_list(i: Int, hi: Int, ar: Seq[Int]): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? ar[i] + sum_list(i + 1, hi, ar) : 0)
}

function sum_array(i: Int, lo: Int, hi: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (lo <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? ar[i].Ref__Integer_value + sum_array(i + 1, lo, hi, ar) : 0)
}

function sum_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires max <= |ar|
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) ? ar[i].Ref__Integer_value : 0) + sum_square(i + 1, lo, hi, step, min, max, ar) : 0)
}

function count_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires max <= |ar|
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) && (ar[i].Ref__Integer_value == v) ? 1 : 0) + count_square(i + 1, lo, hi, step, min, max, ar, v) : 0)
}

function count_list(i: Int, hi: Int, ar: Seq[Int], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? (ar[i] == v ? 1 : 0) + count_list(i + 1, hi, ar, v) : 0)
}

function count_array(i: Int, hi: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
  requires (forall k: Int :: (0 <= k) && (k < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? (ar[i].Ref__Integer_value == v ? 1 : 0) + count_array(i + 1, hi, ar, v) : 0)
}

method Ref__loop_main_69(diz: Ref, current_thread_id: Int, b: Seq[Ref], len: Int, a: Seq[Ref], c: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (0 < len) ==> (|a| == len)
  requires (forall i: Int :: (0 <= i) && (i < len) ==> acc(a[i].Ref__Integer_value, write))
  requires (0 < len) ==> (|b| == len)
  requires (forall i: Int :: (0 <= i) && (i < len) ==> acc(b[i].Ref__Integer_value, 1 / 2))
  requires (0 < len) ==> (|c| == len)
  requires (forall i: Int :: (0 <= i) && (i < len) ==> acc(c[i].Ref__Integer_value, 1 / 2))
  ensures (0 < len) ==> (|a| == len)
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> acc(a[i].Ref__Integer_value, write))
  ensures (0 < len) ==> (|b| == len)
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> acc(b[i].Ref__Integer_value, 1 / 2))
  ensures (0 < len) ==> (|c| == len)
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> acc(c[i].Ref__Integer_value, 1 / 2))
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> (b[i].Ref__Integer_value == old(b[i].Ref__Integer_value)))
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> (c[i].Ref__Integer_value == old(c[i].Ref__Integer_value)))
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> (a[i].Ref__Integer_value == b[i].Ref__Integer_value + c[i].Ref__Integer_value))
{
  inhale false
}

method Ref__loop_body_69(diz: Ref, current_thread_id: Int, len: Int, b: Seq[Ref], a: Seq[Ref], i: Int, c: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (0 <= i) && (i < len)
  requires |a| == len
  requires acc(a[i].Ref__Integer_value, write)
  requires |b| == len
  requires acc(b[i].Ref__Integer_value, 1 / 2)
  requires |c| == len
  requires acc(c[i].Ref__Integer_value, 1 / 2)
  ensures (0 <= i) && (i < len)
  ensures |a| == len
  ensures acc(a[i].Ref__Integer_value, write)
  ensures |b| == len
  ensures acc(b[i].Ref__Integer_value, 1 / 2)
  ensures |c| == len
  ensures acc(c[i].Ref__Integer_value, 1 / 2)
  ensures b[i].Ref__Integer_value == old(b[i].Ref__Integer_value)
  ensures c[i].Ref__Integer_value == old(c[i].Ref__Integer_value)
  ensures a[i].Ref__Integer_value == b[i].Ref__Integer_value + c[i].Ref__Integer_value
{
  var __flatten_2: Ref
  var __flatten_3: Int
  var __flatten_4: Ref
  var __flatten_5: Ref
  __flatten_2 := a[i]
  __flatten_4 := b[i]
  __flatten_5 := c[i]
  __flatten_3 := __flatten_4.Ref__Integer_value + __flatten_5.Ref__Integer_value
  __flatten_2.Ref__Integer_value := __flatten_3
}

method Ref__vector_add(diz: Ref, current_thread_id: Int, a: Seq[Ref], b: Seq[Ref], c: Seq[Ref], len: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires |a| == len
  requires (forall i: Int :: (0 <= i) && (i < len) ==> acc(a[i].Ref__Integer_value, write))
  requires |b| == len
  requires (forall i: Int :: (0 <= i) && (i < len) ==> acc(b[i].Ref__Integer_value, 1 / 2))
  requires |c| == len
  requires (forall i: Int :: (0 <= i) && (i < len) ==> acc(c[i].Ref__Integer_value, 1 / 2))
  ensures |a| == len
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> acc(a[i].Ref__Integer_value, write))
  ensures |b| == len
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> acc(b[i].Ref__Integer_value, 1 / 2))
  ensures |c| == len
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> acc(c[i].Ref__Integer_value, 1 / 2))
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> (a[i].Ref__Integer_value == b[i].Ref__Integer_value + c[i].Ref__Integer_value))
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> (b[i].Ref__Integer_value == old(b[i].Ref__Integer_value)))
  ensures (forall i: Int :: (0 <= i) && (i < len) ==> (c[i].Ref__Integer_value == old(c[i].Ref__Integer_value)))
{
  Ref__loop_main_69(diz, current_thread_id, b, len, a, c)
}
