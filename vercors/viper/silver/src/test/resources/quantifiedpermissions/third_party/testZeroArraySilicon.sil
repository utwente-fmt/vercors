field Ref__Integer_value: Int

method ZeroArray__zero_array(diz: Ref, current_thread_id: Int, ar: Seq[Ref])
  requires diz != null
  requires current_thread_id >= 0
  requires (forall k: Int :: (0 <= k) && (k < |ar|) ==> acc(ar[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < |ar|) ==> acc(ar[k].Ref__Integer_value, write))
  ensures (forall k: Int :: (0 <= k) && (k < |ar|) ==> (ar[k].Ref__Integer_value == 0))
{
  var i: Int
  var N: Int
  var __flatten_1: Ref
  var __flatten_2: Int
  i := 0
  N := |ar|
  while (i < N)
    invariant (0 <= i) && (i <= N) && (N == |ar|)
    invariant (forall k: Int :: (0 <= k) && (k < |ar|) ==> acc(ar[k].Ref__Integer_value, write))
    invariant (forall k: Int :: (0 <= k) && (k < i) ==> (ar[k].Ref__Integer_value == 0)) 
  {
    __flatten_1 := ar[i]
    __flatten_2 := 0
    __flatten_1.Ref__Integer_value := __flatten_2
    i := i + 1
  }
}

method ZeroArray__ZeroArray(current_thread_id: Int) returns (sys__result: Ref)
  requires current_thread_id >= 0
  ensures sys__result != null
{
  var diz: Ref
  diz := new()
  sys__result := diz
  assert sys__result != null
  inhale false
}