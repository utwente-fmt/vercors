field demo__ar: Seq[Ref]

field demo__tmp: Seq[Ref]

field Ref__Integer_value: Int

function demo__bin(N: Int, k: Int): Int
  requires N >= 0
  requires 0 <= k
  requires k <= N
{
  ((k == 0) || (k == N) || (N <= 0) ? 1 : demo__bin(N - 1, k - 1) + demo__bin(N - 1, k))
}

method demo__main_main(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires tid == lid
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.demo__ar, wildcard)
  requires |diz.demo__ar| == gsize
  requires acc(diz.demo__tmp, wildcard)
  requires |diz.demo__tmp| == gsize
  requires gsize > 1
  requires acc(diz.demo__ar[tid].Ref__Integer_value, write)
  requires acc(diz.demo__tmp[tid].Ref__Integer_value, write)
  ensures 0 <= tid
  ensures tid < tcount
  ensures tid == lid
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.demo__ar, wildcard)
  ensures |diz.demo__ar| == gsize
  ensures acc(diz.demo__tmp, wildcard)
  ensures |diz.demo__tmp| == gsize
  ensures diz.demo__ar == old(diz.demo__ar)
  ensures diz.demo__tmp == old(diz.demo__tmp)
  ensures gsize > 1
  ensures acc(diz.demo__ar[tid].Ref__Integer_value, write)
  ensures diz.demo__ar[tid].Ref__Integer_value == demo__bin(gsize - 1, tid)
{
  var __last_barrier: Int
  var N: Int
  var __flatten_1: Int
  var __flatten_2: Int
  var __flatten_3: Ref
  var __flatten_4: Int
  var __flatten_5: Ref
  var __flatten_6: Int
  var __flatten_7: Ref
  var __flatten_9: Ref
  var __flatten_10: Int
  var __flatten_11: Ref
  var __flatten_12: Ref
  __last_barrier := 0
  N := 1
  __flatten_3 := diz.demo__ar[tid]
  __flatten_4 := 1
  __flatten_3.Ref__Integer_value := __flatten_4
  while (N < gsize - 1)
    invariant 0 <= tid
    invariant tid < tcount
    invariant tid == lid
    invariant tcount == gsize
    invariant gid == 0
    invariant acc(diz.demo__ar, wildcard)
    invariant |diz.demo__ar| == gsize
    invariant acc(diz.demo__tmp, wildcard)
    invariant |diz.demo__tmp| == gsize
    invariant false || (__last_barrier == 0) || (__last_barrier == 2)
    invariant (__last_barrier == 2) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write) && acc(diz.demo__tmp[tid].Ref__Integer_value, write)
    invariant (__last_barrier == 1) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write) && ((tid > 0) ==> acc(diz.demo__tmp[tid - 1].Ref__Integer_value, write))
    invariant (__last_barrier == 0) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write) && acc(diz.demo__tmp[tid].Ref__Integer_value, write)
    invariant gsize > 1
    invariant 0 < N
    invariant N < gsize
    invariant diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1) 
  {
    __flatten_5 := diz.demo__tmp[tid]
    __flatten_7 := diz.demo__ar[tid]
    __flatten_6 := __flatten_7.Ref__Integer_value
    __flatten_5.Ref__Integer_value := __flatten_6
    __flatten_1 := demo__main_barrier(diz, current_thread_id, tcount, gsize, tid, gid, lid, 1, __last_barrier, N)
    __last_barrier := __flatten_1
    N := N + 1
    if ((0 < tid) && (tid < N)) {
      assert (diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N - 1, tid - 1)) && (diz.demo__ar[tid].Ref__Integer_value == demo__bin(N - 1, tid))
      __flatten_9 := diz.demo__ar[tid]
      __flatten_11 := diz.demo__tmp[tid - 1]
      __flatten_12 := diz.demo__ar[tid]
      __flatten_10 := __flatten_11.Ref__Integer_value + __flatten_12.Ref__Integer_value
      __flatten_9.Ref__Integer_value := __flatten_10
      assert diz.demo__ar[tid].Ref__Integer_value == demo__bin(N, tid)
    }
    __flatten_2 := demo__main_barrier(diz, current_thread_id, tcount, gsize, tid, gid, lid, 2, __last_barrier, N)
    __last_barrier := __flatten_2
  }
}

method demo__main_barrier(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int, this_barrier: Int, last_barrier: Int, N: Int) returns (sys__result: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires (this_barrier == 1) ==> false || (last_barrier == 0) || (last_barrier == 2)
  requires (this_barrier == 2) ==> false || (last_barrier == 1)
  requires 0 <= tid
  requires tid < tcount
  requires tid == lid
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.demo__ar, wildcard)
  requires |diz.demo__ar| == gsize
  requires acc(diz.demo__tmp, wildcard)
  requires |diz.demo__tmp| == gsize
  requires (last_barrier == 2) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write) && acc(diz.demo__tmp[tid].Ref__Integer_value, write)
  requires (last_barrier == 1) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write) && ((tid > 0) ==> acc(diz.demo__tmp[tid - 1].Ref__Integer_value, write))
  requires (last_barrier == 0) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write) && acc(diz.demo__tmp[tid].Ref__Integer_value, write)
  requires (this_barrier == 1) ==> (gsize > 1)
  requires (this_barrier == 1) ==> (0 < N)
  requires (this_barrier == 1) ==> (N < gsize)
  requires (this_barrier == 1) ==> (diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1))
  requires (this_barrier == 1) ==> (diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value)
  requires (this_barrier == 2) ==> (gsize > 1)
  requires (this_barrier == 2) ==> (0 < N)
  requires (this_barrier == 2) ==> (N < gsize)
  requires (this_barrier == 2) ==> (diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1))
  ensures 0 <= tid
  ensures tid < tcount
  ensures tid == lid
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.demo__ar, wildcard)
  ensures |diz.demo__ar| == gsize
  ensures acc(diz.demo__tmp, wildcard)
  ensures |diz.demo__tmp| == gsize
  ensures diz.demo__ar == old(diz.demo__ar)
  ensures diz.demo__tmp == old(diz.demo__tmp)
  ensures (sys__result == 2) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write) && acc(diz.demo__tmp[tid].Ref__Integer_value, write)
  ensures (sys__result == 1) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write) && ((tid > 0) ==> acc(diz.demo__tmp[tid - 1].Ref__Integer_value, write))
  ensures (sys__result == 0) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write) && acc(diz.demo__tmp[tid].Ref__Integer_value, write)
  ensures sys__result == this_barrier
  ensures (this_barrier == 1) ==> (gsize > 1)
  ensures (this_barrier == 1) ==> (0 < N)
  ensures (this_barrier == 1) ==> (N < gsize)
  ensures (this_barrier == 1) ==> (0 < tid) && (tid <= N) ==> (diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1))
  ensures (this_barrier == 1) ==> (diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1))
  ensures (this_barrier == 2) ==> (gsize > 1)
  ensures (this_barrier == 2) ==> (0 < N)
  ensures (this_barrier == 2) ==> (N < gsize)
  ensures (this_barrier == 2) ==> (diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1))
{
  inhale false
}

method demo__main_resources_of_1(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, gid: Int, N: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.demo__ar, wildcard)
  requires |diz.demo__ar| == gsize
  requires acc(diz.demo__tmp, wildcard)
  requires |diz.demo__tmp| == gsize
  requires gsize > 1
  requires (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write))
  requires (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.demo__tmp[tid].Ref__Integer_value, write))
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.demo__ar, wildcard)
  ensures |diz.demo__ar| == gsize
  ensures acc(diz.demo__tmp, wildcard)
  ensures |diz.demo__tmp| == gsize
  ensures gsize > 1
  ensures diz.demo__ar == old(diz.demo__ar)
  ensures diz.demo__tmp == old(diz.demo__tmp)
  ensures (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write))
  ensures (forall tid: Int :: ((0 <= 0 ? 1 : 0) - 1 <= tid) && (tid < gsize - 1) ==> acc(diz.demo__tmp[tid].Ref__Integer_value, write))
{
}

method demo__main_resources_of_2(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, gid: Int, N: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.demo__ar, wildcard)
  requires |diz.demo__ar| == gsize
  requires acc(diz.demo__tmp, wildcard)
  requires |diz.demo__tmp| == gsize
  requires gsize > 1
  requires (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write))
  requires (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.demo__tmp[tid].Ref__Integer_value, write))
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.demo__ar, wildcard)
  ensures |diz.demo__ar| == gsize
  ensures acc(diz.demo__tmp, wildcard)
  ensures |diz.demo__tmp| == gsize
  ensures gsize > 1
  ensures diz.demo__ar == old(diz.demo__ar)
  ensures diz.demo__tmp == old(diz.demo__tmp)
  ensures (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.demo__ar[tid].Ref__Integer_value, write))
  ensures (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.demo__tmp[tid].Ref__Integer_value, write))
{
}

method demo__main_post_check_1(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int, N: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires tid == lid
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.demo__ar, wildcard)
  requires |diz.demo__ar| == gsize
  requires acc(diz.demo__tmp, wildcard)
  requires |diz.demo__tmp| == gsize
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> acc(diz.demo__ar[_x_tid].Ref__Integer_value, write))
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> acc(diz.demo__tmp[_x_tid].Ref__Integer_value, write))
  requires gsize > 1
  requires 0 < N
  requires N < gsize
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> (diz.demo__ar[_x_tid].Ref__Integer_value == (_x_tid < N ? demo__bin(N, _x_tid) : 1)))
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> (diz.demo__tmp[_x_tid].Ref__Integer_value == diz.demo__ar[_x_tid].Ref__Integer_value))
  ensures 0 <= tid
  ensures tid < tcount
  ensures tid == lid
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.demo__ar, wildcard)
  ensures |diz.demo__ar| == gsize
  ensures acc(diz.demo__tmp, wildcard)
  ensures |diz.demo__tmp| == gsize
  ensures diz.demo__ar == old(diz.demo__ar)
  ensures diz.demo__tmp == old(diz.demo__tmp)
  ensures acc(diz.demo__ar[tid].Ref__Integer_value, write)
  ensures (tid > 0) ==> acc(diz.demo__tmp[tid - 1].Ref__Integer_value, write)
  ensures gsize > 1
  ensures 0 < N
  ensures N < gsize
  ensures (0 < tid) && (tid <= N) ==> (diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1))
  ensures diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
{
}

method demo__main_post_check_2(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int, N: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires tid == lid
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.demo__ar, wildcard)
  requires |diz.demo__ar| == gsize
  requires acc(diz.demo__tmp, wildcard)
  requires |diz.demo__tmp| == gsize
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> acc(diz.demo__ar[_x_tid].Ref__Integer_value, write))
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> acc(diz.demo__tmp[_x_tid].Ref__Integer_value, write))
  requires gsize > 1
  requires 0 < N
  requires N < gsize
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> (diz.demo__ar[_x_tid].Ref__Integer_value == (_x_tid < N ? demo__bin(N, _x_tid) : 1)))
  ensures 0 <= tid
  ensures tid < tcount
  ensures tid == lid
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.demo__ar, wildcard)
  ensures |diz.demo__ar| == gsize
  ensures acc(diz.demo__tmp, wildcard)
  ensures |diz.demo__tmp| == gsize
  ensures diz.demo__ar == old(diz.demo__ar)
  ensures diz.demo__tmp == old(diz.demo__tmp)
  ensures acc(diz.demo__ar[tid].Ref__Integer_value, write)
  ensures acc(diz.demo__tmp[tid].Ref__Integer_value, write)
  ensures gsize > 1
  ensures 0 < N
  ensures N < gsize
  ensures diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
{
}