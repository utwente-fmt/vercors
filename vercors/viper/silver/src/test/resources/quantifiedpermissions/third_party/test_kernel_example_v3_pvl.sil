field Ref__a: Seq[Ref]

field Ref__b: Seq[Ref]

field Ref__c: Seq[Ref]

field Ref__Integer_value: Int

method Ref__main_main(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires tid == lid
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.Ref__a, wildcard)
  requires |diz.Ref__a| == tcount
  requires acc(diz.Ref__b, wildcard)
  requires |diz.Ref__b| == tcount
  requires acc(diz.Ref__c, wildcard)
  requires |diz.Ref__c| == tcount
  requires acc(diz.Ref__a[tid].Ref__Integer_value, write)
  requires acc(diz.Ref__b[tid].Ref__Integer_value, write)
  requires acc(diz.Ref__c[tid].Ref__Integer_value, 1 / 4)
  requires diz.Ref__c[tid].Ref__Integer_value > 0
  ensures 0 <= tid
  ensures tid < tcount
  ensures tid == lid
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.Ref__a, wildcard)
  ensures |diz.Ref__a| == tcount
  ensures acc(diz.Ref__b, wildcard)
  ensures |diz.Ref__b| == tcount
  ensures acc(diz.Ref__c, wildcard)
  ensures |diz.Ref__c| == tcount
  ensures diz.Ref__a == old(diz.Ref__a)
  ensures diz.Ref__b == old(diz.Ref__b)
  ensures diz.Ref__c == old(diz.Ref__c)
  ensures acc(diz.Ref__a[tid].Ref__Integer_value, 1 / 4)
  ensures diz.Ref__a[tid].Ref__Integer_value > 0
  ensures acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 4)
  ensures diz.Ref__b[tid].Ref__Integer_value > 0
  ensures acc(diz.Ref__c[tid].Ref__Integer_value, 1 / 4)
  ensures diz.Ref__c[tid].Ref__Integer_value > 0
{
  var __last_barrier: Int
  var __flatten_1: Ref
  var __flatten_2: Int
  var __flatten_3: Ref
  var __flatten_4: Ref
  var __flatten_5: Int
  var __flatten_6: Ref
  var __flatten_7: Ref
  var __flatten_8: Ref
  var __flatten_9: Int
  var __flatten_10: Ref
  __last_barrier := 0
  __flatten_1 := diz.Ref__b[tid]
  __flatten_3 := diz.Ref__c[tid]
  __flatten_2 := __flatten_3.Ref__Integer_value
  __flatten_1.Ref__Integer_value := __flatten_2
  assert diz.Ref__b[tid].Ref__Integer_value > 0
  exhale acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 4)
  inhale (tid > 0) ==> acc(diz.Ref__b[tid - 1].Ref__Integer_value, 1 / 4)
  inhale (tid > 0) ==> (diz.Ref__b[tid - 1].Ref__Integer_value > 0)
  if (tid > 0) {
    __flatten_4 := diz.Ref__a[tid]
    __flatten_6 := diz.Ref__b[tid - 1]
    __flatten_7 := diz.Ref__b[tid]
    __flatten_5 := __flatten_6.Ref__Integer_value + __flatten_7.Ref__Integer_value
    __flatten_4.Ref__Integer_value := __flatten_5
  } else {
    __flatten_8 := diz.Ref__a[tid]
    __flatten_10 := diz.Ref__b[tid]
    __flatten_9 := __flatten_10.Ref__Integer_value
    __flatten_8.Ref__Integer_value := __flatten_9
  }
}

method Ref__main_resources_of_1(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, gid: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.Ref__a, wildcard)
  requires |diz.Ref__a| == tcount
  requires acc(diz.Ref__b, wildcard)
  requires |diz.Ref__b| == tcount
  requires acc(diz.Ref__c, wildcard)
  requires |diz.Ref__c| == tcount
  requires (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 4))
  requires (forall tid: Int :: (0 <= tid) && (tid < gsize) ==> (diz.Ref__b[tid].Ref__Integer_value > 0))
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.Ref__a, wildcard)
  ensures |diz.Ref__a| == tcount
  ensures acc(diz.Ref__b, wildcard)
  ensures |diz.Ref__b| == tcount
  ensures acc(diz.Ref__c, wildcard)
  ensures |diz.Ref__c| == tcount
  ensures diz.Ref__a == old(diz.Ref__a)
  ensures diz.Ref__b == old(diz.Ref__b)
  ensures diz.Ref__c == old(diz.Ref__c)
  ensures (forall tid: Int :: ((0 <= 0 ? 1 : 0) - 1 <= tid) && (tid < gsize - 1) ==> acc(diz.Ref__b[tid].Ref__Integer_value, 1 / 4))
{
}

method Ref__main_post_check_1(diz: Ref, current_thread_id: Int, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int)
  requires diz != null
  requires current_thread_id >= 0
  requires 0 <= tid
  requires tid < tcount
  requires tid == lid
  requires tcount == gsize
  requires gid == 0
  requires acc(diz.Ref__a, wildcard)
  requires |diz.Ref__a| == tcount
  requires acc(diz.Ref__b, wildcard)
  requires |diz.Ref__b| == tcount
  requires acc(diz.Ref__c, wildcard)
  requires |diz.Ref__c| == tcount
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> acc(diz.Ref__a[_x_tid].Ref__Integer_value, write))
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> acc(diz.Ref__b[_x_tid].Ref__Integer_value, write))
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> acc(diz.Ref__c[_x_tid].Ref__Integer_value, 1 / 4))
  requires (forall _x_tid: Int :: (0 <= _x_tid) && (_x_tid < gsize) ==> (diz.Ref__b[_x_tid].Ref__Integer_value > 0))
  ensures 0 <= tid
  ensures tid < tcount
  ensures tid == lid
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(diz.Ref__a, wildcard)
  ensures |diz.Ref__a| == tcount
  ensures acc(diz.Ref__b, wildcard)
  ensures |diz.Ref__b| == tcount
  ensures acc(diz.Ref__c, wildcard)
  ensures |diz.Ref__c| == tcount
  ensures diz.Ref__a == old(diz.Ref__a)
  ensures diz.Ref__b == old(diz.Ref__b)
  ensures diz.Ref__c == old(diz.Ref__c)
  ensures (tid > 0) ==> acc(diz.Ref__b[tid - 1].Ref__Integer_value, 1 / 4)
  ensures (tid > 0) ==> (diz.Ref__b[tid - 1].Ref__Integer_value > 0)
{
}