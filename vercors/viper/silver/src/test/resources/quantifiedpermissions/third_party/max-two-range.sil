/* Provided by Stefan Blom of U Twente. */

field src: Seq[Ref]

field dst: Seq[Ref]

field Integer_value: Int

method main_main(this: Ref, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int)
  requires 0 <= tid
  requires tid < tcount
  requires tid == lid
  requires tcount == gsize
  requires gid == 0
  requires acc(this.src, wildcard)
  requires |this.src| == gsize
  requires acc(this.dst, wildcard)
  requires |this.dst| == gsize
  requires 4 <= gsize
  requires gsize % 2 == 0
  requires (forall i: Int :: (i in [0..gsize)) ==> acc(this.src[i].Integer_value, 1 / gsize))
  requires acc(this.dst[tid].Integer_value, write)
  ensures 0 <= tid
  ensures tid < tcount
  ensures tid == lid
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(this.src, wildcard)
  ensures |this.src| == gsize
  ensures acc(this.dst, wildcard)
  ensures |this.dst| == gsize
  ensures 4 <= gsize
  ensures gsize % 2 == 0
  ensures (forall i: Int :: (i in [0..gsize)) ==> acc(this.src[i].Integer_value, 1 / gsize))
  ensures this.src == old(this.src)
  ensures this.dst == old(this.dst)
  ensures (tid == 0) ==> acc(this.dst[0].Integer_value, write)
  ensures (tid == 0 ? (forall i: Int :: (0 <= i) && (i < tcount) ==> (this.dst[0].Integer_value >= this.src[i].Integer_value)) : true)
{
  var __last_barrier: Int
  var k: Int
  var half: Int
  var offset: Int
  __last_barrier := 0
  half := gsize \ 2
  offset := (tid == 0 ? 0 : half)
  if (tid < 2) {
    this.dst[tid].Integer_value := this.src[offset].Integer_value
    k := 0
    assert this.dst[tid].Integer_value >= this.src[offset].Integer_value
    assert this.dst[tid].Integer_value >= this.src[offset + 0].Integer_value
    assert (forall i: Int :: (0 <= i) && (i < k) ==> (this.dst[tid].Integer_value >= this.src[offset + i].Integer_value))
    while (k < half)
      invariant 0 <= tid
      invariant tid < tcount
      invariant tid == lid
      invariant tcount == gsize
      invariant gid == 0
      invariant acc(this.src, wildcard)
      invariant |this.src| == gsize
      invariant acc(this.dst, wildcard)
      invariant |this.dst| == gsize
      invariant 4 <= gsize
      invariant gsize % 2 == 0
      invariant offset == (tid == 0 ? 0 : half)
      invariant (forall i: Int :: (i in [0..gsize)) ==> acc(this.src[i].Integer_value, 1 / gsize))
      invariant false || (__last_barrier == 0)
      invariant (__last_barrier == 1) ==> ((tid == 0) ==> acc(this.dst[0].Integer_value, write)) && ((tid == 0) ==> acc(this.dst[1].Integer_value, write))
      invariant (__last_barrier == 0) ==> acc(this.dst[tid].Integer_value, write)
      invariant (0 <= k) && (k <= half)
      invariant (forall i: Int :: (0 <= i) && (i < k) ==> (this.dst[tid].Integer_value >= this.src[offset + i].Integer_value))
    {
      inhale false
      assert (0 <= offset + k) && (offset + k < gsize)
      if (this.dst[tid].Integer_value < this.src[offset + k].Integer_value) {
        this.dst[tid].Integer_value := this.src[offset + k].Integer_value
      }
      k := k + 1
    }
  }
  inhale false
  assert true
  __last_barrier := main_barrier(this, tcount, gsize, tid, gid, lid, 1, __last_barrier, k, half, offset)
  assert (tid == 0) ==> (forall i: Int :: (0 <= i) && (i < half) ==> (this.dst[0].Integer_value >= this.src[i].Integer_value))
  assert (tid == 0) ==> (forall i: Int :: (half <= i) && (i < gsize) ==> (this.dst[1].Integer_value >= this.src[i].Integer_value))
  if (tid == 0) {
    if (this.dst[1].Integer_value > this.dst[0].Integer_value) {
      this.dst[0].Integer_value := this.dst[1].Integer_value
    }
  }
}

method main_barrier(this: Ref, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int, this_barrier: Int, last_barrier: Int, k: Int, half: Int, offset: Int) returns (sys__result: Int)
  requires (this_barrier == 1) ==> false || (last_barrier == 0)
  requires 0 <= tid
  requires tid < tcount
  requires tid == lid
  requires tcount == gsize
  requires gid == 0
  requires acc(this.src, wildcard)
  requires |this.src| == gsize
  requires acc(this.dst, wildcard)
  requires |this.dst| == gsize
  requires 4 <= gsize
  requires gsize % 2 == 0
  requires (forall i: Int :: (i in [0..gsize)) ==> acc(this.src[i].Integer_value, 1 / gsize))
  requires (last_barrier == 1) ==> ((tid == 0) ==> acc(this.dst[0].Integer_value, write)) && ((tid == 0) ==> acc(this.dst[1].Integer_value, write))
  requires (last_barrier == 0) ==> acc(this.dst[tid].Integer_value, write)
  requires (this_barrier == 1) ==> (half + half == gsize)
  requires (this_barrier == 1) ==> (tid == 0) ==> (forall i: Int :: (0 <= i) && (i < half) ==> (this.dst[0].Integer_value >= this.src[i].Integer_value))
  requires (this_barrier == 1) ==> (tid == 1) ==> (forall i: Int :: (half <= i) && (i < gsize) ==> (this.dst[1].Integer_value >= this.src[i].Integer_value))
  ensures 0 <= tid
  ensures tid < tcount
  ensures tid == lid
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(this.src, wildcard)
  ensures |this.src| == gsize
  ensures acc(this.dst, wildcard)
  ensures |this.dst| == gsize
  ensures 4 <= gsize
  ensures gsize % 2 == 0
  ensures (forall i: Int :: (i in [0..gsize)) ==> acc(this.src[i].Integer_value, 1 / gsize))
  ensures this.src == old(this.src)
  ensures this.dst == old(this.dst)
  ensures (sys__result == 1) ==> ((tid == 0) ==> acc(this.dst[0].Integer_value, write)) && ((tid == 0) ==> acc(this.dst[1].Integer_value, write))
  ensures (sys__result == 0) ==> acc(this.dst[tid].Integer_value, write)
  ensures sys__result == this_barrier
  ensures (this_barrier == 1) ==> (tid == 0) ==> (forall i: Int :: (0 <= i) && (i < half) ==> (this.dst[0].Integer_value >= this.src[i].Integer_value))
  ensures (this_barrier == 1) ==> (tid == 0) ==> (forall i: Int :: (half <= i) && (i < gsize) ==> (this.dst[1].Integer_value >= this.src[i].Integer_value))
{
  inhale false
}

method main_resources_of_1(this: Ref, tcount: Int, gsize: Int, gid: Int, k: Int, half: Int, offset: Int)
  requires tcount == gsize
  requires gid == 0
  requires acc(this.src, wildcard)
  requires |this.src| == gsize
  requires acc(this.dst, wildcard)
  requires |this.dst| == gsize
  requires 4 <= gsize
  requires gsize % 2 == 0
  requires (forall i: Int :: (i in [0..gsize)) ==> acc(this.src[i].Integer_value, 1 / gsize))
  requires (forall tid: Int :: (tid in [gid * gsize..gsize)) ==> acc(this.dst[tid].Integer_value, write))
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(this.src, wildcard)
  ensures |this.src| == gsize
  ensures acc(this.dst, wildcard)
  ensures |this.dst| == gsize
  ensures 4 <= gsize
  ensures gsize % 2 == 0
  ensures (forall i: Int :: (i in [0..gsize)) ==> acc(this.src[i].Integer_value, 1 / gsize))
  ensures this.src == old(this.src)
  ensures this.dst == old(this.dst)
  ensures (gid * gsize <= 0) && (0 < gsize) ==> acc(this.dst[0].Integer_value, write)
  ensures (gid * gsize <= 0) && (0 < gsize) ==> acc(this.dst[1].Integer_value, write)
{
}

method main_post_check_1(this: Ref, tcount: Int, gsize: Int, tid: Int, gid: Int, lid: Int, k: Int, half: Int, offset: Int)
  requires 0 <= tid
  requires tid < tcount
  requires tid == lid
  requires tcount == gsize
  requires gid == 0
  requires acc(this.src, wildcard)
  requires |this.src| == gsize
  requires acc(this.dst, wildcard)
  requires |this.dst| == gsize
  requires 4 <= gsize
  requires gsize % 2 == 0
  requires (forall i: Int :: (i in [0..gsize)) ==> acc(this.src[i].Integer_value, 1 / gsize))
  requires (forall _x_tid: Int :: (_x_tid in [0..gsize)) ==> acc(this.dst[_x_tid].Integer_value, write))
  requires half + half == gsize
  requires (0 <= 0) && (0 < gsize) ==> (forall i: Int :: (0 <= i) && (i < half) ==> (this.dst[0].Integer_value >= this.src[i].Integer_value))
  requires (0 <= 1) && (1 < gsize) ==> (forall i: Int :: (half <= i) && (i < gsize) ==> (this.dst[1].Integer_value >= this.src[i].Integer_value))
  ensures 0 <= tid
  ensures tid < tcount
  ensures tid == lid
  ensures tcount == gsize
  ensures gid == 0
  ensures acc(this.src, wildcard)
  ensures |this.src| == gsize
  ensures acc(this.dst, wildcard)
  ensures |this.dst| == gsize
  ensures 4 <= gsize
  ensures gsize % 2 == 0
  ensures (forall i: Int :: (i in [0..gsize)) ==> acc(this.src[i].Integer_value, 1 / gsize))
  ensures this.src == old(this.src)
  ensures this.dst == old(this.dst)
  ensures (tid == 0) ==> acc(this.dst[0].Integer_value, write)
  ensures (tid == 0) ==> acc(this.dst[1].Integer_value, write)
  ensures (tid == 0) ==> (forall i: Int :: (0 <= i) && (i < half) ==> (this.dst[0].Integer_value >= this.src[i].Integer_value))
  ensures (tid == 0) ==> (forall i: Int :: (half <= i) && (i < gsize) ==> (this.dst[1].Integer_value >= this.src[i].Integer_value))
{
}
