/* Provided by Stefan Blom of U Twente.
 * Illustrated Silicon-QP issue 122.
 */


field val : Bool
field ar : Seq[Ref]
field other : Int

function count(l : Seq[Ref],n:Int):Int
  requires 0 <= n && n <= |l| && (forall i:Int :: i in [0..|l|) ==> l[i]!=null )
      && (forall i:Int :: i in [0..|l|) ==> acc(l[i].val,1/2) )
      && (n > 0 ==> l[n-1]!=null)
{
  n==0 ? 0 : (count(l,n-1) + (l[n-1].val?1:0))
}

method main(this:Ref)
  requires acc(this.ar,wildcard);
  requires (forall i:Int :: i in [0..|this.ar|) ==> this.ar[i]!=null )
  requires (forall i:Int :: i in [0..|this.ar|) ==> acc(this.ar[i].val,1/2) )
  requires |this.ar|>10
  requires count(this.ar,|this.ar|)==4
  requires acc(this.ar[3].val,1/2)
  requires this.ar[3].val
  requires acc(this.val,write)
{
  this.ar[3].val:=false

  assume count(this.ar,|this.ar|)==3
  assert count(this.ar,|this.ar|)==3
}
