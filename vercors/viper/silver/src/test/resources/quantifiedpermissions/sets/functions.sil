field f: Int

function fun1(xs: Set[Ref], x: Ref): Int
  requires x in xs
  requires forall r: Ref :: r in xs ==> acc(r.f)
{ x.f }

function fun2(xs: Set[Ref], x: Ref, y: Ref): Int
  requires x in xs
  requires forall r: Ref :: r in xs ==> acc(r.f)
{ x.f + (y in xs ? y.f : x.f) }

function fun3(x: Ref, y: Ref, z: Ref): Int
  requires forall r: Ref :: r in Set(x, y, z) ==> acc(r.f)
  requires x != null && y != null && z != null // TODO: Should not be necessary, see Silicon issue 61
{ x.f + y.f + z.f + fun2(Set(x, z), x, y) }

function fun4(x: Ref, y: Ref, z: Ref): Int
  requires acc(x.f) && acc(y.f) && acc(z.f)
{ x.f + y.f + z.f + fun1(Set(x), x) }

function fun5(x: Ref, y: Ref, z: Ref): Int
  requires acc(x.f) && acc(y.f) && acc(z.f)
{ x.f + y.f + z.f + fun1(Set(x, y), x) }

function fun6(x: Ref, y: Ref, z: Ref): Int
  requires acc(x.f) && acc(y.f) && acc(z.f)
{ x.f + y.f + z.f + fun2(Set(x, z), x, y) }
