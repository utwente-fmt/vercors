//:: IgnoreFile(/carbon/issue/92/)
// class Node
field parent: Ref

function find(struct: Ref, this:Ref) : Ref
  requires struct != null && this != null
  requires acc(inv(struct), wildcard)
  requires this in allNodes(struct)
  ensures result != null
  ensures result in allNodes(struct)
{
  unfolding acc(inv(struct), wildcard) in this == this.parent ? this : find(struct, this.parent)
}

// todo: proof that find terminates

method add(struct: Ref, this: Ref)
  requires acc(this.parent, write) && this.parent == null
  requires struct != null && acc(inv(struct), write)
  ensures acc(inv(struct), write)
  ensures allNodes(struct) == old(allNodes(struct)) union Set(this)
  ensures this == find(struct, this)
  // Previously marked as /silicon/issue/122/
  // Trying to ensure
  //   ensures forall o: Ref :: o in old(allNodes(struct)) ==> o != null
  // makes the example not terminate (with Z3 using up insane amounts of memory).
  //:: UnexpectedOutput(application.precondition:assertion.false, /silicon/issue/133/)
  ensures forall o: Ref :: o in old(allNodes(struct)) ==> find(struct, o) == old(find(struct, o))
{
    unfold acc(inv(struct), write)
    this.parent := this
    struct.nodes := struct.nodes union Set(this)
    fold acc(inv(struct), write)

	inhale unfolding acc(inv(struct), write) in this.parent == this  // this gets arround issue #79 -- todo: fix

	assert forall x: Ref :: x in old(allNodes(struct)) ==> (unfolding acc(inv(struct), write) in x.parent) == old(unfolding acc(inv(struct), write) in x.parent)

	inhale forall o: Ref :: o in old(allNodes(struct)) ==> find(struct, o) == old(find(struct, o))


	// lemma -- todo: prove   forall o: Ref :: o in old(allNodes(struct)) ==> find(struct, o) == old(find(struct, o))
	/*var o: Ref
	var of: Ref
	inhale o in old(allNodes(struct))
	inhale of == find(struct, o)
	while (o != old(find(struct, o)))
	  invariant acc(inv(struct), write) && old(acc(inv(struct), write)) && o in old(allNodes(struct))
	  invariant forall x: Ref :: x in old(allNodes(struct)) ==> unfolding acc(inv(struct), write) in x.parent == old(x.parent)
	  invariant o == o.parent ==> find(struct, o) == old(find(struct, o))
	  invariant find(struct, o) == of
	{
	  unfold acc(inv(struct), write)
	  o := o.parent
	  fold acc(inv(struct), write)
	}*/
}

/*method lemma0(p: Ref, q: Ref)
  requires acc(q.struct, wildcard) && acc(inv(q.struct), wildcard) && valid(q) && p == find(q)
  ensures acc(q.struct, wildcard)
  ensures acc(p.struct, wildcard)
  ensures p.struct == q.struct
  ensures acc(inv(p.struct), wildcard)
{
  if (p!=q) {
    unfold acc(inv(q.struct), wildcard)
    assert valid(q.parent)
    assert find(q.parent) == find(q)
    lemma0(p, q.parent)
    fold acc(inv(p.struct), wildcard)
  }
}

// prove termination of lemma0
*/

method unionn(struct: Ref, this: Ref, other: Ref)
  requires struct != null && acc(inv(struct), write)
  requires this != null && this in allNodes(struct)
  requires other != null && other in allNodes(struct)
  ensures acc(inv(struct), write)
  ensures allNodes(struct) == old(allNodes(struct))
  // Previously marked as /silicon/issue/122/
  // The cause of the failing precondition is probably the same as above.
  //:: UnexpectedOutput(application.precondition:assertion.false, /silicon/issue/133/)
  ensures forall p: Ref, q: Ref :: p in allNodes(struct) && q in allNodes(struct) && old(find(struct, p) == find(struct, q)) ==> find(struct, p) == find(struct, q)
  ensures forall p: Ref, q: Ref :: p in allNodes(struct) && q in allNodes(struct) && old(find(struct, p) == find(struct, this)) && old(find(struct, q) == find(struct, other)) ==> find(struct, p) == find(struct, q)
  ensures forall p: Ref, q: Ref ::
    p in allNodes(struct) && q in allNodes(struct) && old(find(struct, p) != find(struct, this)) && old(find(struct, q) != find(struct, other)) && old(find(struct, p) == find(struct, q)) ==> find(struct, p) == find(struct, q)
{
	var this1:Ref := find(struct, this)
	var other1:Ref := find(struct, other)
	if(other1 != this1)
	{
	  unfold acc(inv(struct), write)
	  this1.parent := other1
	  fold acc(inv(struct), write)

      // todo: lemmas to prove
      inhale forall p: Ref :: p in allNodes(struct) && old(find(struct, p)) == this1 ==> find(struct, p) == other1
      inhale forall p: Ref :: p in allNodes(struct) && old(find(struct, p)) != this1 ==> find(struct, p) == old(find(struct, p))
	}
}

// class UnionFind
field nodes: Set[Ref]

predicate inv(this: Ref)
{
    acc(this.nodes, write) && !(null in this.nodes) &&
    (forall n : Ref :: n in this.nodes ==> acc(n.parent, write)) &&
    (forall q : Ref :: q in this.nodes ==> q.parent in this.nodes)
}

function allNodes(this:Ref): Set[Ref]
  requires acc(inv(this), wildcard)
{
    unfolding acc(inv(this), wildcard) in this.nodes
}

// todo: add client
