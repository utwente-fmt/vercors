field f: Ref

method test00(xs: Set[Ref])
  requires forall x: Ref :: x in xs ==> acc(x.f, wildcard)
  ensures  forall x: Ref :: x in xs ==> acc(x.f, wildcard)
{}

method test01(xs: Set[Ref], ys: Set[Ref])
  requires forall x: Ref :: x in xs ==> acc(x.f, wildcard)
  requires forall x: Ref :: x in ys ==> acc(x.f, wildcard)
  ensures  forall x: Ref :: x in (xs union ys) ==> acc(x.f, wildcard)
{}

method test02(xs: Set[Ref], y: Ref, z: Ref)
  requires forall x: Ref :: x in xs ==> acc(x.f, wildcard)
  requires z in xs
{
  if (y in xs) {
    exhale acc(y.f, wildcard)
  }

  exhale forall x: Ref :: x in (xs setminus Set(y)) ==> acc(x.f, wildcard)
  exhale forall x: Ref :: x in xs ==> acc(x.f, wildcard)

  var k0: Perm
  assume k0 >= none
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale forall x: Ref :: x in xs ==> acc(x.f, k0)
}

method test03(xs: Set[Ref], y: Ref, k0: Perm)
  requires k0 > none
  requires forall x: Ref :: x in xs ==> acc(x.f, k0)
  //:: UnexpectedOutput(postcondition.violated:insufficient.permission, /carbon/issue/119/)
  ensures  forall x: Ref :: x in xs ==> acc(x.f, wildcard)
  //:: ExpectedOutput(postcondition.violated:insufficient.permission)
  ensures  forall x: Ref :: x in xs ==> acc(x.f, k0)
{
  var k1: Perm
  fresh k1

  constraining(k1) {
    //:: UnexpectedOutput(exhale.failed:insufficient.permission, /carbon/issue/119/)
    exhale forall x: Ref :: x in xs ==> acc(x.f, k1)
    //:: UnexpectedOutput(exhale.failed:insufficient.permission, /carbon/issue/119/)
    exhale forall x: Ref :: x in xs ==> acc(x.f, k1)

    if (y in xs) {
    //:: UnexpectedOutput(exhale.failed:insufficient.permission, /carbon/issue/119/)
      exhale acc(y.f, k1)
    }
  }
}

domain Foo {
  function foo(x: Ref): Perm

  axiom foo_not_none {
    forall x: Ref :: foo(x) > none
  }
}

method test04(xs: Set[Ref])
  requires forall x: Ref :: x in xs ==> acc(x.f, foo(x))
{
  var k1: Perm
  fresh k1

  constraining(k1) {
    //:: UnexpectedOutput(exhale.failed:insufficient.permission, /carbon/issue/119/)
    exhale forall x: Ref :: x in xs ==> acc(x.f, k1)
  }

  //:: UnexpectedOutput(exhale.failed:insufficient.permission, /carbon/issue/119/)
  exhale forall x: Ref :: x in xs ==> acc(x.f, wildcard)

  var k2: Perm
  assume k2 > none // TODO: Should not be necessary
  //:: ExpectedOutput(exhale.failed:insufficient.permission)
  exhale forall x: Ref :: x in xs ==> acc(x.f, k2)
}
