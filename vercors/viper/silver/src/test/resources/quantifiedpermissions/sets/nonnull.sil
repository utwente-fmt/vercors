field f: Ref

method test01(xs: Set[Ref], x: Ref, y: Ref)
  requires x in xs
  requires forall z: Ref :: z in xs ==> acc(z.f)
{
  assert x != null

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert y != null
}

method test02(xs: Set[Ref], x: Ref, k: Perm)
  requires x in xs
  requires forall z: Ref :: z in xs ==> acc(z.f, k)
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert x != null
    /* none < k is not known, hence (forall z) z.f != null is not known either */
}

method test03(xs: Set[Ref], x: Ref)
  requires forall z: Ref :: z in xs ==> acc(z.f)
  requires xs == Set(x)
{
  assert x != null
}

method test04(xs: Set[Ref], x: Ref)
  requires forall z: Ref :: z in xs ==> acc(z.f)
  requires x in xs
{
  assert x != null
}

method test05(xs: Set[Ref], ys: Set[Ref], x: Ref, y: Ref)
  requires forall z: Ref :: z in (xs union ys) ==> acc(z.f)
  requires x in xs && y in ys
{
  //:: UnexpectedOutput(assert.failed:assertion.false, /silver/issue/80/)
  assert x != null && y != null
  // the set axiomatisation doesn't trigger the "in ... union ..." property needed
}
