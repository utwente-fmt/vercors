field n: Set[Ref]
field f: Int

predicate P(xs: Set[Ref]) {
  forall x: Ref :: x in xs ==> acc(x.f)
}

method test01(xs: Set[Ref], y: Ref)
  requires forall x: Ref :: x in xs ==> acc(x.f)
  requires y in xs
  requires y.f == 5
{
  assert y.f == 5

  fold P(xs)
  unfold P(xs)

  assert y.f == 5
}

predicate inv(this: Ref) {
	acc(this.n) && forall x: Ref :: x in this.n ==> acc(x.f)
}

method m1(this: Ref)
  requires acc(inv(this))
{
	unfold acc(inv(this))

	var t: Ref
	assume t in this.n

	var a: Int := t.f

	fold acc(inv(this))
	unfold acc(inv(this))
	assert a == t.f

	fold acc(P(this.n))
  	exhale acc(P(this.n))
	inhale acc(P(this.n))
	unfold acc(P(this.n))

  //:: ExpectedOutput(assert.failed:assertion.false)
	assert a == t.f
}

method m1_carbon_regression(this: Ref)
  requires acc(inv(this))
  ensures acc(inv(this))
{
	unfold acc(inv(this))

	var t: Ref
	assume t in this.n

	var a: Int := t.f

	fold acc(inv(this))
	unfold acc(inv(this))
	assert a == t.f

	fold acc(P(this.n))
  //:: ExpectedOutput(assert.failed:assertion.false)
        assert false
}
