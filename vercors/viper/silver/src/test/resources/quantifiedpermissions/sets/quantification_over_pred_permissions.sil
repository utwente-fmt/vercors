//:: IgnoreFile(/silicon/issue/84/)
//:: IgnoreFile(/carbon/issue/135/)

field all: Set[Ref]
field f: Ref

predicate inv(this: Ref) { acc(this.f, 1/2) }

method m(S: Set[Ref])
  requires forall x: Ref :: x in S ==> acc(inv(x), write)
  ensures forall x1: Ref :: x1 in S ==> acc(inv(x1), write)
{
  var b: Ref
  var v: Ref

  inhale b in S
  unfold acc(inv(b), write)
  v := b.f
  fold acc(inv(b), write)
}
