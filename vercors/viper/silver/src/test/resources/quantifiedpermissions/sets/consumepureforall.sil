field f: Int

method m(S: Set[Ref], b:Ref)
requires (forall s:Ref :: s in S ==> acc(s.f))
requires (forall p:Ref :: p in S ==> p.f > 0)
requires b in S
ensures acc(b.f)
ensures b.f > 0
{
}

method m4(S: Set[Ref], T: Set[Ref])
requires (forall s: Ref :: s in S ==> acc(s.f))
requires (forall t: Ref :: t in T ==> acc(t.f))
requires (forall u : Ref :: u in S ==> u.f > 0)
requires (forall v: Ref :: v in T ==> v.f > 0)
ensures (forall x: Ref :: x in (T union S) ==> acc(x.f))
ensures (forall y: Ref :: y in (T union S) ==> y.f > 0)
{

}


method m2(S: Set[Ref], b:Ref)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires (forall p: Ref :: p in S ==> p.f > 0)
requires b in S
ensures (forall r: Ref :: r  in S ==> acc(r.f))
ensures (forall q : Ref :: q in S ==> q.f > 0)
{
   b.f := 3
}

method m13(S: Set[Ref], b:Ref, a:Int)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires S == Set(b)
requires b.f == a
ensures (forall r : Ref :: r in S ==> acc(r.f))
ensures (forall t : Ref :: t in S ==> ((t.f) > (2*a)))
{
    b.f := 2*a+1
}


method m3(S: Set[Ref], b:Ref, a:Int)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires S == Set(b)
requires b.f == a
ensures (forall r : Ref :: r in S ==> acc(r.f))
ensures (forall t : Ref :: t in S ==> ((t.f) > (2*a)))
{
    b.f := 2*a+1
}

method m7(S: Set[Ref], b:Ref, a:Int)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires S == Set(b)
requires b.f == a
ensures (forall r : Ref :: r in S ==> acc(r.f))
{
    b.f := 2*a
    //:: ExpectedOutput(exhale.failed:assertion.false)
    exhale (forall t : Ref :: t in S ==> (t.f) > (2*a))
}

method m5(S: Set[Ref], b:Ref)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires b in S
{
    assume(b.f > 0)
}

method m8(S: Set[Ref], b: Ref, a :Int, c: Ref)
  requires forall s: Ref :: s in S ==> acc(s.f)
  requires forall s: Ref :: s in S ==> s.f == a
  requires b in S
  requires acc(c.f)
  requires c.f < 0
  requires a > 0
  ensures forall r : Ref :: r in S ==> acc(r.f)
  ensures forall t : Ref :: t in S ==> (t.f == ((t == b) ? 2*a+1 : a))
{
  b.f := 2*a+1
}

method m9(S: Set[Ref], b:Ref, a:Int)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires (forall q: Ref :: q in S ==> q.f > a)
requires b in S
requires a > 0
ensures (forall r : Ref :: r in S ==> acc(r.f))
ensures (forall t : Ref :: t in S ==> (t.f > a))
{
    b.f := 2*a+1
}

method m10(S: Set[Ref], b:Ref, a:Int, c:Ref)
requires (forall s: Ref :: s in S ==> acc(s.f))
requires (forall q: Ref :: q in S ==> q.f > a)
requires b in S
requires c in S
requires a > 0
ensures (forall r : Ref :: r in S ==> acc(r.f))
ensures (forall t : Ref :: t in S ==> (t.f > a))
{
    b.f := 2*a+1
    c.f := a+1
}

