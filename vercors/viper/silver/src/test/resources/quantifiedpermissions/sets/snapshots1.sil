field f: Int

function fun1(xs: Set[Ref], x: Ref): Int
  requires x in xs
  requires forall z: Ref :: z in xs ==> acc(z.f)
{ x.f }

method test1(xs: Set[Ref], x: Ref)
  requires x in xs
  requires forall z: Ref :: z in xs ==> acc(z.f)
{
  var a: Int := fun1(xs, x)
  assert a == fun1(xs, x)

  var b: Int := fun1(xs, x)
  assert b == fun1(xs, x)

  assert a == b
}

method test5(xs: Set[Ref], x: Ref, y: Ref)
  requires x in xs && y in xs
  requires forall z: Ref :: z in xs ==> acc(z.f)
  requires x != y // TODO: Should not be necessary, see issue 62
{
  var yf: Int := y.f
  x.f := 1

  assert y.f == yf

  y.f := yf + 1

  exhale forall z: Ref :: z in xs ==> acc(z.f)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test4(xs: Set[Ref], x: Ref, y: Ref)
  requires x in xs && y in xs
  requires forall z: Ref :: z in xs ==> acc(z.f)
  requires x != y // TODO: Should not be necessary, see issue 62
{
  var xf: Int := fun1(xs, x)
  var yf: Int := fun1(xs, y)
  x.f := xf + 1

  assert fun1(xs, x) == xf + 1
  assert fun1(xs, y) == yf

  y.f := yf + 1

  assert fun1(xs, x) == xf + 1

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun1(xs, y) == yf
}

predicate P(xs: Set[Ref], x: Ref) {
  x in xs && forall z: Ref :: z in xs ==> acc(z.f)
}

function fun2(xs: Set[Ref], x: Ref): Int
  requires acc(P(xs, x))
{ unfolding acc(P(xs, x)) in x.f }

method test2(xs: Set[Ref], x: Ref)
  requires acc(P(xs, x))
{
  var a: Int := fun2(xs, x)
  assert a == fun2(xs, x)

  unfold acc(P(xs, x))
  fold acc(P(xs, x))

  var b: Int := fun2(xs, x)
  assert b == fun2(xs, x)

  assert a == b

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test3(xs: Set[Ref], x: Ref)
  requires x in xs
  requires forall z: Ref :: z in xs ==> acc(z.f)
{
  fold acc(P(xs, x))

  var a: Int := fun2(xs, x)
  assert a == fun2(xs, x)

  unfold acc(P(xs, x))
  fold acc(P(xs, x))

  var b: Int := fun2(xs, x)
  assert b == fun2(xs, x)

  assert a == b

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
