
// Declarations
sil-program ::=
	(
		import    |
		define    |
		domain    |
		field     |
		function  |
		predicate |
		method
	)*

import ::=
    "import" relative-path

relative-path ::=
    \A(?:[\w-]+\/?)+\z

define ::=
    "define" identifier [ "(" parameter^,* ")" ] expression-or-block

parameter ::= ident

expression-or-block ::=
    exp |
    block

domain ::=
	"domain" domain-name "{"
		domain-function*
		axiom*
	"}"

domain-name ::=
	ident |
	ident "[" ident^,* "]"  //e.g. Seq[T]

domain-function ::=
	["unique"] function-signature [";"]

function-signature ::=
	"function" ident formal-args ":" type
		
axiom ::=
	"axiom" ident "{" exp "}" [";"]

field ::=
	"field" ident ":" type [";"]

function ::=
	function-signature
		precondition*
		postcondition*
		decreases?
	"{" exp "}" // Semicolon not permitted

precondition ::=
	"requires" exp

decreases ::=
	"decreases *" |
	"decreases" exp

postcondition ::=
	"ensures" exp

invariant ::=
	"invariant" exp

predicate ::=
	"predicate" ident formal-args ["{" exp "}"] // Semicolon not permitted

method ::=
	"method" ident formal-args [formal-returns]
		precondition*  
		postcondition*
	[ block ]

formal-args ::=
	"(" formal-arg^,* ")"
	
formal-arg ::=
	ident ":" type

formal-returns ::=
	"returns" formal-args

// Statements		
block ::=
	"{" statement-with-optional-semicolon* "}"

statement-with-optional-semicolon ::= 
	stmt [";"]

stmt ::=
	// local variable declaration with an optional initial value
	"var" ident  ":" type [":=" exp] |

	// local definition
	define |

	// local variable assignment
	ident ":=" exp | 

	// field assignment
	field-access ":=" exp | 

	// object creation (all fields)
	ident ":=" "new(*)" | 

	// object creation (specified fields)
	ident ":=" "new(" ident^,* ")" |
	
	"assert" exp |
	"assume" exp |
	"inhale" exp |
	"exhale" exp |
	"fold"   acc-exp |
	"unfold" acc-exp |
	
	"goto" ident | // goto statement
	"label ident | // a goto label
	
	if-statement           |
	while-statement        |
	call-statement         |
	fresh-statement        |
	wand-statement         |
	constraining-block     |

	// an arbitrary block of statements
	block
		
if-statement ::=
	"if" "(" exp ")"
		block
	("elsif" "(" exp ")"
		block
	)*            // any number of elseif branches
	["else"
		block
	]             // optional else branch
	
while-statement ::=
	"while" "(" exp ")"
		invariant*
		block

call-statement ::= // method call [with return target]
	[ident^,* :=] ident "(" exp^,* ")"
	
fresh-statement ::=	
	"fresh" ident^,*

wand-statement ::=
	"wand" ident ":=" exp |
	"package" magic-wand-exp |
	"apply" magic-wand-exp
	
constraining-block ::=	
	"constraining" "(" ident^,* ")"
		block

// Expressions
binop ::=
	"==" | "!=" |                  // equality operators
	"==>" | "||" | "&&" |"<==>" |  // boolean operators
	"<" | "<=" | ">" | ">=" |      // ordering
	                               //  (integers and permissions)
	"+" | "-" | "*" |              // arithmetic operators
	                               //  (integers and permissions)
	                               // also int*permission
	"\\" | "\%" |                  // arithmetic division
	                               //  and modulo
	"\/" |                         // permission division
	                               //  (of two integers)
	"--*" |                        // magic wand

	"union" | "intersection" | "setminus"  //set operators
	"++"  |           // sequence concatenation
	"in"  |           // set/multiset/sequence membership
	"subset"          // subset relation
	
unop ::=
	"!" |            // boolean negation
	"+" | "-"        // integer and permission
	
exp ::=
	"true"  | "false" |          // boolean literal
	integer |                    // integer literal	
	"null"   |                   // null literal
	"result" |                   // result literal in
	                             //  function postconditions
	ident    |                   // local variable read
	
	"(" exp ")" |

	unop exp |                  // unary expression
	exp binop exp |             // binary expression
	exp "?" exp ":" exp |       // conditional expression 

	"old" "(" exp ")"           // old expression
	"[" ident "]" "(" exp ")"   // labeled old expression
	"lhs" "(" exp ")"           // apply old expression

	"none"     |             // no permission literal
	"write"    |             // full permission literal
	"epsilon"  |             // epsilon permission literal
	"wildcard" |             // wildcard permission
	
	"perm" "(" loc-access ")" | // current permission
	                            //  of given location
	
	acc-exp  |                   // accessibility predicate
	
	ident "(" exp^,* ")" |                // [domain] function application
	"(" ident "(" exp^,* ")" ":" type ")" // typed function application

    
	field-access         |  // field read
	predicate-access     |  // predicate access

	"[" exp "," exp "]" |        // inhale exhale expression
	"unfolding" acc-exp "in" exp | // unfolding expression
	"folding" acc-exp "in" exp
	"applying" ( "(" magic-wand-exp ")" | ident ) "in" exp
	"packaging" ( "(" magic-wand-exp ")" | ident ) "in" exp
	
	// quantification
	"forall" formal-arg^,* "::" trigger^,* exp |
	"exists" formal-arg^,* "::" exp |
	
	seq-constructor-exp      |
	set-constructor-exp      |
	
	seq-op-exp  |
	"|" exp "|" |                // length of a sequence; or set/multiset cardinality

	let-in-exp  |
	forperm-exp 

magic-wand-exp ::=
    exp // except that it must not be <==> or ==>
let-in-exp ::=
    "let" ident "==" "(" exp ")" "in" exp

forperm-exp ::=
    "forperm" "[" ident^,* "]" ident "::" exp

seq-constructor-exp ::=	
	"Seq[" type "]()"     | // the empty sequence
	"Seq(" exp^,* ")"     | // explicit sequence (must not be empty)
	"[" exp ".." exp ")"    // half-open range of numbers
				
set-constructor-exp ::=
	"Set" "[" type "]" "(" ")"             | // empty set
	"Set" "(" exp^,* ")"                   | // explicit set
	"Multiset" "[" type "]" "(" ")"        | // empty multiset
	"Multiset" "(" exp^,* ")"              | // explicit multiset			
				
seq-op-exp ::=
	exp "[" exp "]"          |  // sequence lookup
	exp "[" ".." exp "]"     |  // take n first elements
	exp "[" exp ".." "]"     |  // drop n first elements
	exp "[" exp ".." exp "]" |  // take and drop
	exp "[" exp ":=" exp "]" |  // update sequence at

trigger ::=
	"{" exp^,* "}"  // a trigger for a quantification

acc-exp ::=
	"acc" "(" loc-access ["," exp ]")" //access
	                                   // default is write
loc-access ::=
	field-access | predicate-access
	
field-access ::=
	exp "." ident |              // field access
	
predicate-access ::=
	ident "(" exp^,* ")"         // predicate access

// Types
type ::=
	"Int" | "Bool" | "Perm" | "Ref" | "Rational" | // primitive types
	"Seq" "[" type "]" |                           // sequence type
	"Set" "[" type "]" |                           // set type
	"Multiset" "[" type "]" |                      // multiset type
	ident [ "[" type^,* "]" ]                      // [instance of a generic] domain type

// Identifiers
ident ::=    // regular expression for an identifier
    "[a-zA-Z$_][a-zA-Z0-9$_']*"

Expression operator priority
============================
(operators are in general, right-associative)

ternary conditional operator
<==> 
==> 
--*
||
&&
== !=
<= >= < > in
++ + - union intersection setminus subset (left-associative!)
* / \ % (left-associative!)
field-access seq-op-exp
other expressions