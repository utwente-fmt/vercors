/*
    The below rules were commented in all the jspec files. They were deleted, as they were not used, and moved here, in case anyone wants to do analysis on some rewrite rules. Note that many of the rules in this file might not be useful and/or correct.

    Each rule below is put in a class that is similarly named as the file it came from.
*/

class silver_optimize {
  int e1,e2,e3;
  int i;

  axiom move_implication {
     (e1 ==> (\forall* int i; e2 ; e3 ))
     ==
     (\forall* int i; e1 && e2 ; e3 )
  }

  axiom impl_and {
    (a ==> b ==> c)
    ==
    ((a ** b) ==> c)
  }
}

class simplify_quant_pass_1 {
  // SJ: div_3 is not true for e1 == 0
  axiom div_3 { e1 / e1 == 1 }

  // SJ: the more generic version of A1_chain, as shown below, can make it harder to solve things
  axiom A1 {
    (\forall int i; b1 ; (b2!i))
    ==
    ((\exists int i; true ; b1 ) ==> b2)
  }

  axiom deindex2 {
    (\forall* int i; e1 ; Perm(ar[ this.multidim_index_2(e2,e3,e4,e5) ], e6 ))
    ==
    (\forall* int i; e1 ; Perm(ar[ e4*e3 + e5 ], e6 ))
  }

  // SJ: these are already matched by axiom A2
   axiom inlist { (\forall* int i; e1 <= i && i < e2 ; r1 )
                 ==
                 (\forall* int i;  ( i \memberof { e1 .. e2 }) ; r1 ) }

   axiom inlistb { (\forall int i; e1 <= i && i < e2 ; b1 )
                 ==
                 (\forall int i;  ( i \memberof { e1 .. e2 }) ; b1 ) }

   // SJ: Tried to fix this, but still unsure if this holds... Removing it didn't destroy any tests so I'll keep it commented
   axiom nested_bool_1_a_00 {
        (\forall int i;( i \memberof { 0 .. e1 }) ;
           (\forall int j;( j \memberof { 0 .. (e2!i) }) ;
              ar[ i * ((e3!i)!j) + j ] == \old(ar[ i * e3 + j ]) ))
    ==
       (0 <= e1 && 0 <= e2) ==>
       (\forall int k_fresh;(k_fresh \memberof { 0 .. e1*e3}) && (k_fresh % e3 < e2);
          ar[k_fresh] == \old(ar[k_fresh]) )
   }

   // SJ: Does not hold if e1 <= 0 or if e2 > e3, did not try to fix: rule didn't seem all that needed
   axiom nested_bool_1_a_0 {
        (\forall int i;( i \memberof { 0 .. e1 }) ;
           (\forall int j;( j \memberof { 0 .. e2 }) ;
              (ar[ i * ((e3!i)!j) + j ] \memberof ((e4!i)!j)) ))
    ==
       e2 <= e3 &&
       (\forall int k_fresh;(k_fresh \memberof { 0 .. e1*e3}) && (k_fresh % e3 < e2);
          (ar[k_fresh] \memberof e4))
   }

  axiom nested_bool_1_a {
       (\forall int i;( i \memberof {0 .. e1 }) ;
          (\forall int j;( j \memberof {0 .. e2}) ;
             (ar[ e3 + j ] \memberof e4) ))
   ==
      (\forall int k_fresh;(k_fresh \memberof {0 .. e1*e2});
         (\let int i=k_fresh/e2 ; (\let int j=k_fresh%e2 ;
            (ar[ e3 + j ] \memberof e4) )))
  }

   axiom nested_bool_2_a {
        (\forall int j;( j \memberof {0 .. e2}) ;
          (\forall int i;( i \memberof {0 .. e1}) ;
              (ar[ e3 + j ] \memberof e4) ))
    ==
       (\forall int k_fresh;(k_fresh \memberof {0 .. e1*e2});
          (\let int i=k_fresh/e2 ; (\let int j=k_fresh%e2 ;
            (ar[ e3 + j ] \memberof e4) )))
   }

   // SJ: fixed this slightly, trying to see if removing this breaks anything..
   axiom triple_1 {
     (\forall* int i;( i \memberof {0 .. e1} );
       (\forall* int j;( j \memberof {0 .. (e2!i)} );
         (\forall* int k;( k \memberof {((e3!i)!j) .. ((e4!i)!j)} );
           Perm(ar[k * ( e1 * e2 ) + ( j * e1 + i) ],e5) )))
      ==
     e1 > 0 && e2 > 0 && e3 < e4 ==> (\forall* int i;( i \memberof {e1 * e2 * e3 .. e1 * e2 * e4});Perm(ar[i],e5))
   }

   // SJ: I guess these are allready taken care of by the rule nested_1, plus they are wrong..
   axiom nested_Z1 {
        (\forall* int i;( i \memberof {e1 .. e2} );
            (\forall* int j;( j \memberof {0 .. e3} );
                Perm( ar[e5 + (i*e3+j) ] , ((e4!i)!j) ) ))
        ==
        (\forall* int j;( j \memberof {e1 * e3 .. e2 * e3} ); Perm(ar[e5+j],e4) )
        }

   axiom nested_Z1_x {
        (\forall* int i;( i \memberof {e1 .. e2} ) && e6;
            (\forall* int j;( j \memberof {0 .. e3} );
                Perm( ar[e5 + (i*e3+j) ] , ((e4!i)!j) ) ))
        ==
        (\forall* int j;( j \memberof {e1 * e3 .. e2 * e3} ) && e6; Perm(ar[e5+j],e4) )
        }

   // SJ: the following only works if e4 <= e3, the other case is missing
   axiom nested_x1 {
        (\forall* int i;( i \memberof {e1 .. e2} );
            (\forall* int j;( j \memberof {i * (e3!i) .. i * e3 + (e4!i)} );
                (r1!i) ))
        ==
          (e4 <= e3) ==>
        (\forall* int j;( j \memberof {e1 * e3 .. e2 * e3} ) && (j % e3 < e4); r1 )
        }

   // SJ: same comment as for nested_x1, so also commented
   axiom nested_x1b {
        (\forall int i;( i \memberof { e1 .. e2 } );
            (\forall int j;( j \memberof {i * e3 .. i * e3 + e4} );
                (b1!i) ))
        ==
          (e4 <= e3) **
        (\forall int j;( j \memberof {e1 * e3 .. e2 * e3} ) && (j % e3 < e4); b1 )
        }

   // SJ: not repaired yet, fortunately, this is not really needed either
   axiom nested_2 {
        (\forall* int i;( i \memberof { e1 .. e2 } );
            (\forall* int j;( j \memberof {((e4!i) + i) * e3 .. (e4 + i + 1) * e3} );
                (r1!i) ))
        ==
        (\forall* int j;( j \memberof {(e4 + e1) * e3 .. (e4 + e2) * e3} ); r1 )
        }

   axiom nested_2x {
        (\forall* int i;( i \memberof { e1 .. e2 } );
          (\forall* int k ; (b1!i) ;
            (\forall* int j;( j \memberof {((e4!i) + i) * e3 .. (e4 + i + 1) * e3} );
                (r1!i) )))
        ==
          (\forall* int k ; b1 ;
        (\forall* int j;( j \memberof {(e4 + e1) * e3 .. (e4 + e2) * e3} ); r1 ))
        }

   // SJ: unfortunately, this introduces an existential quantifier which is not always a good thing...
   axiom nested_value {
     (\forall* int i ; e1 ; (\forall* int j ; (e2!i) ; Value((e3!i))))
       ==
     (\exists int i; true ; e1 ) ==> (\forall* int j ; e2 ; Value(e3))
   }

}

class summation {
  axiom sum2 {
    (\sum int i ; ( i \memberof {e1 .. e2}) ; (ar[i]==(v!i))?1:0)
      ==
    \sum({e1 .. e2},\vcmp(ar,\vrep(v)))
  }

  axiom sum2b {
    (\sum int i ; true ;
      (\sum int j ; ( i \memberof {0 .. e1}) && (j \memberof {0 .. e2}) ; (ar[i*e2 + j]==(v!i))?1:0))
      ==
    \sum({0 .. e1*e2},\vcmp(ar,\vrep(v)))
  }

  axiom sum2c {
    (\sum int i ; ( i \memberof {0 .. e1}) ;
      (\sum int j ; ( j \memberof {0 .. e2}) ; (ar[i*e2 + j]==(v!i))?1:0))
      ==
    \sum({0 .. e1*e2},\vcmp(ar,\vrep(v)))
  }
}