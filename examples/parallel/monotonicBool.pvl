//:: case MonotonicBool
//:: tool silicon
//:: verdict Pass

// This file contains an attempt at constructing and verifying a monotonic bool.
// It would seem that it is truly a monotonic bool, since if one of
// the threads write false to b the program does not verify.
// However, approach is unfortunately not correct; see monotonicBoolBroken.pvl in the same folder for details.

class C {
  boolean b;
  boolean[] contrib;

  // Method that might return true or false. Useful for setting the bool "sometimes"
  boolean p(int tid);

  requires xs != null;
  requires Perm(xs[*], read);
  requires 0 <= i && i <= xs.length;
  ensures \result == (\exists int j = i..xs.length; xs[j]);
  static boolean foldOr(boolean[] xs, int i) =
    i < xs.length
      ? xs[i] || foldOr(xs, i + 1)
      : false;

  given frac P;
  requires 0 < P && P < write;
  requires bools != null;
  context Perm(bools[*], P);
  requires 0 <= i && i <= definitelyTrueIndex;
  requires 0 <= definitelyTrueIndex && definitelyTrueIndex < bools.length;
  requires bools[definitelyTrueIndex];
  ensures foldOr(bools, i);
  static void lemma(boolean[] bools, int definitelyTrueIndex, int i) {
    if (bools[i]) {
        return;
    } else {
        if (i < definitelyTrueIndex) {
            lemma(bools, definitelyTrueIndex, i + 1) with { P = P \ 2; };
        } else {
            assert false;
        }
    }
  }

  requires Perm(contrib, write);
  requires Perm(b, write);
  requires N > 0;
  void foo(int N) {
    b = false;
    contrib = new boolean[N];
    assert b == foldOr(contrib, 0);

    invariant inv(
        N > 0
        ** Perm(contrib, 1\(N+1))
        ** contrib.length == N
        ** (\forall* int i = 0..N; Perm(contrib[i], 1\2))
        ** Perm(b, write)
        ** b == foldOr(contrib, 0)
        ) {
      par(int tid = 0..N)
        context N > 0;
        context Perm(contrib, 1\(N+1)) ** contrib != null;
        context Perm(contrib[tid], 1\2);
      {
        if (p(tid)) {
          // Models: atomic_set(b);
          atomic(inv) {
            b = true;
            contrib[tid] = true;
            lemma(contrib, tid, 0) with { P = 1\(2 * (N+1)); };
            // Fails:
            // b = false;
            // contrib[tid] = false;
          }
        }
        assert 0 < perm(this.contrib);
      }
    }

    assert b == (\exists int i = 0..N; contrib[i]);
  }
}
