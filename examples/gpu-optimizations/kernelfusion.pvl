class KernelFusionOrig6 {

  context_everywhere a != null && b != null;
  context_everywhere a.length == 2048;
  context_everywhere b.length == 2048;
  context_everywhere a.length == b.length;
  context (\forall* int i; i >= 0 && i < a.length; Perm(a[i], 1));
  context (\forall* int i; i >= 0 && i < a.length; Perm(b[i], 1\2));
  context (\forall int i; i >= 0 && i < a.length; b[i] == 0);
  requires (\forall int i; i >= 0 && i < a.length; a[i] == 1);
  //ensures (\forall int i; i >= 0 && i < a.length; a[i] == 0);
  void Kernel_Fusion_Orig(int[] a, int[] b){
    gpuopt fuse 2 1;
    par kernel1 (int tid = 0 .. a.length)
    context 2 * tid < a.length ==> Perm(a[2*tid], 1\1);
    context 2 * tid < a.length ==> Perm(b[2*tid], 1\2);
    requires 2 * tid < a.length ==> a[2*tid] == 1;
    requires 2 * tid < a.length ==> b[2*tid] == 0;
    ensures 2 * tid < a.length ==> b[2*tid] == a[2*tid];
    ensures 2 * tid < a.length ==> a[2*tid] == 0;
    {
      if (2 * tid < a.length) {
          a[2*tid] = b[2*tid];
      }
    }

    par kernel2 (int tid = 0 .. a.length)
    context 2 * tid + 1 < a.length ==>  Perm(a[2*tid+1], 1\1);
    context 2 * tid + 1 < a.length ==>  Perm(b[2*tid+1], 1\2);
    requires 2 * tid + 1 < a.length ==> a[2*tid+1] == 1;
    requires 2 * tid + 1 < a.length ==> b[2*tid+1] == 0;
    ensures 2 * tid + 1 < a.length ==> a[2*tid+1] == b[2*tid+1];
    ensures 2 * tid + 1 < a.length ==> a[2*tid+1] == 0;
    {
        if (2 * tid + 1 < a.length) {
           a[2*tid+1] = b[2*tid+1];
        }
    }


    assert (\forall int i; 0 <= i && i < a.length && 2*i < a.length; a[2*i] == 0);
    assert (\forall int i; 0 <= i && i < a.length && 2*i+1 < a.length; a[2*i+1] == 0);

  }



}