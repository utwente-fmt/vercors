// -*- tab-width:2 ; indent-tabs-mode:nil -*-

//:: cases relaxed_prefix
//:: tools silicon
//:: verdict Pass
// fails due to https://github.com/viperproject/silicon/issues/512
//:: suite problem-fail


/*
 * RELAXED PREFIX from VerifyThis 2015
 * ===========================
 * 
 * 
 * Description
 * -----------
 * 
 * Verify a function isRelaxedPrefix determining if a list _pat_ (for
 * pattern) is a relaxed prefix of another list _a_.
 * 
 * The relaxed prefix property holds iff _pat_ is a prefix of _a_ after
 * removing at most one element from _pat_.
 * 
 * 
 * Examples
 * --------
 * 
 * pat = {1,3}   is a relaxed prefix of a = {1,3,2,3} (standard prefix)
 * 
 * pat = {1,2,3} is a relaxed prefix of a = {1,3,2,3} (remove 2 from pat)
 * 
 * pat = {1,2,4} is not a relaxed prefix of a = {1,3,2,3}.
 * 
 * 
 * Implementation notes
 * --------------------
 * 
 * You can implement lists as arrays, e.g., of integers. A reference
 * implementation is given below. It may or may not contain errors.
 * 
 * 
 * public class Relaxed {
 * 
 *     public static boolean isRelaxedPrefix(int[] pat, int[] a) {
 *         int shift = 0;
 * 
 *         for(int i=0; i<pat.length; i++) {
 *             if (pat[i]!=a[i-shift])
 *                 if (shift==0) shift=1;
 *                     else return false;
 *         }
 *         return true;
 *     }
 * 
 * 
 *     public static void main(String[] argv) {
 *         int[] pat = {1,2,3};
 *         int[] a1 = {1,3,2,3};
 *         System.out.println(isRelaxedPrefix(pat, a1));
 *     }
 * 
 * }
 * 
 * 
 * 
 * Advanced verification task (if you get bored)
 * ---------------------------------------------
 * 
 * Implement and verify a function relaxedContains(pat, a) returning
 * whether _a_ contains _pat_ in the above relaxed sense, i.e., whether
 * _pat_ is a relaxed prefix of any suffix of _a_.
 */


//
// Solution by Omer Sakar and Pieter Bos:
//


class Relaxed {
  requires pat != null ** a != null;
  requires Perm(pat[*], read);
  requires Perm(a[*], read);
  requires len <= pat.length ** pat.length <= a.length;
  boolean prefix(int[] pat, int[] a, int len) = (
    (\forall int j; 0 <= j && j < len; pat[j] == a[j])
  );

  requires pat != null ** a != null;
  requires Perm(pat[*], read);
  requires Perm(a[*], read);
  requires len > 0 ** splitPoint >= 0;
  requires len <= pat.length ** pat.length <= a.length;
  requires splitPoint < pat.length;
  boolean relaxed(int[] pat, int[] a, int len, int splitPoint) = (
    (\forall int j; 0 <= j && j < splitPoint; pat[j] == a[j]) &&
    (\forall int j; splitPoint+1 <= j && j < len; pat[j] == a[j-1])
  );

  given frac p;
  context_everywhere a != null ** pat != null;
  context_everywhere Perm(pat[*], p);
  context_everywhere Perm(a[*], p);
  context_everywhere a.length >= pat.length;

  ensures \result == (prefix(pat, a, pat.length) ||
    (\exists int splitPoint; 0 <= splitPoint && splitPoint < pat.length;
      relaxed(pat, a, pat.length, splitPoint)));
  boolean isRelaxedPrefix(int[] pat, int[] a) {
    int splitPoint = -1; // ghost
    int shift = 0;

    loop_invariant 0 <= i && i <= pat.length;
    loop_invariant (shift == 0) == (splitPoint == -1);
    loop_invariant (shift == 1) == (0 <= splitPoint && splitPoint < pat.length && pat[splitPoint] != a[splitPoint]);
    loop_invariant splitPoint < i;
    loop_invariant (i == 0) ==> (shift == 0);
    loop_invariant shift == 0 || shift == 1;
    loop_invariant (shift == 0) ==> (\forall int j; 0 <= j && j < i; pat[j] == a[j]);
    loop_invariant (shift == 1) ==> (
      (\forall int j; 0 <= j && j < splitPoint; pat[j] == a[j]) &&
      (\forall int j; splitPoint+1 <= j && j < i; pat[j] == a[j-1])
    );
    for(int i = 0; i < pat.length; i++) {
      if(pat[i] != a[i-shift]) {
        if(shift == 0) {
          splitPoint = i; // ghost
          shift = 1;
        } else {
          return false;
        }
      }
    }

    assert (shift == 0) ==> prefix(pat, a, pat.length);
    assert (shift == 1) ==> relaxed(pat, a, pat.length, splitPoint);

    return true;
  }
}

//
// Solution by Mohsen Safari, Petra van den Bos, and Bob Rubbens
//

class Relaxed2 {
  // Output ghost parameters
  yields int pivot;
  yields int pivot2;

  // Memory safety
  context_everywhere pat != null;
  context_everywhere a != null;
  context_everywhere a.length > 0;
  context_everywhere pat.length > 0;
  context_everywhere pat.length <= a.length;
  context_everywhere (\forall* int i ; i >= 0 && i < pat.length ; Perm(pat[i], read));
  context_everywhere (\forall* int i ; i >= 0 && i < a.length ; Perm(a[i], read));

  ensures \result ==> pivot >= -1 && pivot < pat.length;
  // Either a full prefix is found
  ensures \result && pivot == -1 ==> (\forall int i = 0 .. pat.length; a[i] == pat[i]);
  // Or a relaxed one given a pivot
  ensures \result && pivot != -1 ==> (\forall int i = 0 .. pivot; pat[i] == a[i]);
  ensures \result && pivot != -1 ==> (\forall int i = pivot + 1 .. pat.length; pat[i] == a[i - 1]);

  // Or there are at least 2 indices where elements differ, and the rest is equal
  // Implying there is no posible relaxed prefix we missed
  ensures !\result ==>
            (pivot >= 0 && pivot < pat.length)
            && (pivot2 >= 1 && pivot2 < pat.length)
            && (pat[pivot] != a[pivot])
            && (pat[pivot2] != a[pivot2 - 1])
            && pivot != pivot2;
  ensures !\result ==> (\forall int i = 0 .. pivot; pat[i] == a[i]);
  ensures !\result ==> (\forall int i = pivot + 1 .. pivot2; pat[i] == a[i - 1]);
  boolean isRelaxedPrefix(int[] pat, int[] a) {
    int shift = 0;
    boolean isPrefix = true;
    pivot = -1;
    pivot2 = -1;

    // General bounds
    loop_invariant i >= 0 && i <= pat.length;
    loop_invariant shift == 0 || shift == 1;
    loop_invariant i - shift >= 0;
    loop_invariant pivot >= -1 && pivot < pat.length;
    loop_invariant pivot2 == -1 || pivot2 >= 1 && pivot2 < pat.length;

    // A full prefix might be found
    loop_invariant isPrefix && shift == 0 ==> (\forall int j = 0 .. i; pat[j] == a[j]);
    // Or a relaxed prefix might be found
    loop_invariant isPrefix && shift == 1 ==> pivot >= 0 && pivot < pat.length;
    loop_invariant isPrefix && shift == 1 ==> (\forall int j = 0 .. pivot; pat[j] == a[j]);
    loop_invariant isPrefix && shift == 1 ==> (\forall int j = pivot + 1 .. i; pat[j] == a[j-1]);

    // If there is no prefix 2 indices are found where the elements differ
    loop_invariant !isPrefix ==> pivot != -1 && pivot2 != -1;
    loop_invariant !isPrefix ==> pivot != pivot2;
    loop_invariant !isPrefix ==> (\forall int i = 0 .. pivot; pat[i] == a[i]);
    loop_invariant !isPrefix ==> (\forall int i = pivot + 1 .. pivot2; pat[i] == a[i - 1]);
    loop_invariant pivot != -1 ==> pivot < i;
    loop_invariant pivot != -1 ==> (pat[pivot] != a[pivot]);
    loop_invariant pivot2 != -1 ==> (pat[pivot2] != a[pivot2-1]);
    for(int i = 0; i < pat.length && isPrefix; i++) {
      if(pat[i] != a[i - shift]) {
        if(shift == 0) {
          shift = 1;
          pivot = i;
        } else {
          isPrefix = false;
          pivot2 = i;
        }
      }
    }

    return isPrefix;
  }
}

//
// Extra solution 
//

// class Relaxed{
// 
// 	requires pat != null;
// 	requires a != null;
// 	requires pat.length <= a.length;
// 	requires (\forall* int e; 0 <= e && e < pat.length; Perm(pat[e],read));
// 	requires (\forall* int e; 0 <= e && e < a.length; Perm(a[e],read));
// 	requires m <= pat.length;
// 	boolean real_prefix_upto(int[] pat, int[] a, int m) = 
// 	 	(\forall int e; 0 <= e && e < m; pat[e] == a[e]);
// 
// 	requires pat != null;
// 	requires a != null;
// 	requires pat.length <= a.length;
// 	requires (\forall* int i; 0 <= i && i < pat.length; Perm(pat[i],read));
// 	requires (\forall* int i; 0 <= i && i < a.length; Perm(a[i],read));
// 	requires 0 < m && m <= pat.length;
// 	requires 0 <= step && step < pat.length;
// 	boolean relaxed_prefix_upto(int[] pat, int[] a, int m, int step) =
// 			((\forall int l; 0 <= l && l < step; pat[l] == a[l]) &&
// 			(\forall int j; step < j && j < m; pat[j] == a[j-1]));
// 
// 	context_everywhere pat != null;
// 	context_everywhere a != null;
// 	context_everywhere pat.length <= a.length;
// 	context_everywhere (\forall* int i; 0 <= i && i < pat.length; Perm(pat[i],read));
// 	context_everywhere (\forall* int i; 0 <= i && i < a.length; Perm(a[i],read));
// 	ensures \result == (real_prefix_upto(pat, a, pat.length) ||
// 		(\exists int s; 0<=s && s<pat.length;
// 			relaxed_prefix_upto(pat,a, pat.length, s)));
// 	boolean isRelaxedPrefix( int[] pat, int[] a){
// 		int shift = 0;
// 		int step = -1;
// 
// 		loop_invariant 0 <= i && i <= pat.length;
// 		loop_invariant (shift == 0) == (step == -1);
// 		loop_invariant (shift == 1) == (0 <= step && step < i && pat[step] != a[step]);
// 		loop_invariant -1 <= step && step < i;
// 		loop_invariant (i==0) ==> (shift == 0);
// 		loop_invariant shift == 0 || shift == 1;
// 		loop_invariant (shift == 0) ==> (\forall int e; 0 <= e && e < i; pat[e] == a[e]);
// 		loop_invariant (shift == 1) ==> relaxed_prefix_upto(pat, a, i, step);
// 		for (int i=0; i < pat.length; i++){
// 			if(pat[i] != a[i-shift]){
// 				if(shift == 0){
// 					shift = 1;
// 					step = i;
// 				}else{
// 					return false;
// 				}
// 			}
// 		}
// 		return true;
// 	}
// }
