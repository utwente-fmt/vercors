// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: case UnequalCounting
//:: suite puptol
//:: tool silicon
//:: option --check-history

model Counter {
	int counter;
	
	modifies counter;
	ensures counter == \old(counter) + n;
	action plus(int n);
	
	modifies counter;
	ensures counter == \old(counter) * n;
	action mult(int n);
	
	requires counter > 0 && n > 0;
	ensures (counter == (\old(counter) + n) * n) || (counter == (\old(counter) * n) + n);
	process parcount(int n) = plus(n) || mult(n);
}

class Program {

	requires c > 0 && n > 0;
	ensures \result == (c + n) * n || \result == (c * n) + n;
	int count(int c, int n) {
		Counter f = new Counter();
		f.counter = c;
		f.create(f.parcount(n));
		f.split(1\2, f.plus(n), 1\2, f.mult(n));
		
		invariant lockinv(HPerm(f.counter, write)) {
		    parallel
			{
                par T0
                requires f.state(1\2, f.plus(n));
                ensures f.state(1\2, empty);
                {
                atomic(lockinv) {
                    action(f, 1\2, empty, f.plus(n)) { f.counter = f.counter + n; }
                }
                }
                par T1
                requires f.state(1\2, f.mult(n));
                ensures f.state(1\2, empty);
                {
                    atomic(lockinv) {
                        action(f, 1\2, empty, f.mult(n)) { f.counter = f.counter * n; }
                    }
                }
			}
		}
		
		f.merge(1\2, empty, 1\2, empty);
		f.destroy();
		
		return f.counter;
	}
}
