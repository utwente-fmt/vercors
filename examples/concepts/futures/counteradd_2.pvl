// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: case ConcurrentCounting
//:: verdict Pass
//:: tool silicon
//:: option --check-history

model Counter {
    int step;
	int counter;

	// Models a single atomic "decrease" operation.
	accessible step;
	modifies counter;
	ensures counter == \old(counter) - step;
	action decr();

	// Models a concurrent system with two "decrease" actions.
	accessible step;
	modifies counter;
	ensures counter == \old(counter) - 2 * step;
	process pardecr() = decr() || decr();
}

class Program {

	ensures \result == count - 4;
	int decrease(int count) {

		Counter f = new Counter();
		f.counter = count;
		f.step = 2;
		f.create(f.pardecr());
		f.split(1\2, f.decr(), 1\2, f.decr());

		invariant lockinv(HPerm(f.counter, write) ** HPerm(f.step, 1\2)) {
		    parallel {
                par T0
                requires f.state(1\2, f.decr());
                ensures f.state(1\2, empty);
                {
                    atomic(lockinv) {
                        action(f, 1\2, empty, f.decr()) { f.counter = f.counter - f.step; }
                    }
                }
                par T1
                requires f.state(1\2, f.decr());
                ensures f.state(1\2, empty);
                {
                    atomic(lockinv) {
                        action(f, 1\2, empty, f.decr()) { f.counter = f.counter - f.step; }
                    }
                }
            }
		}

		f.merge(1\2, empty, 1\2, empty);
		f.destroy();

		return f.counter;
	}
}
