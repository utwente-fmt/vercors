/*
The extract declaration may be placed directly in front of a statement that has a contract. You can also explicitly
specify a contract via the "frame" statement.

This can be a useful proof tool to e.g. verify that a loop invariant does not use any local knowledge, and as a speed-up
when the branching factor becomes high, e.g. when there are many if's and while's whose conditions are orthogonal.
*/

void test1() {
    // only read, information hidden
    int x = 3;
    extract frame {
        [/expect assertFailed:false]
        assert x == 3;
        [/end]
    }
}

void test2() {
    // only read, information required
    int x = 3;
    extract frame
    requires x == 3; {
        assert x == 3;
    }
}

void test3() {
    // only write, information hidden
    int x;
    extract frame {
        x = 3;
    }
    [/expect assertFailed:false]
    assert x == 3;
    [/end]
}

void test4() {
    // only write, information ensured
    int x;
    extract frame
    ensures x == 3; {
        x = 3;
    }
    assert x == 3;
}

void test5() {
    // read and write, information hidden
    int x = 2;
    extract frame {
        x = x * 2;
    }
    [/expect assertFailed:false]
    assert x == 4;
    [/end]
}

void test6() {
    // read and write, only requirement
    int x = 2;
    extract frame
    requires x == 2; {
        x = x * 2;
        assert x == 4;
    }
    [/expect assertFailed:false]
    assert x == 4;
    [/end]
}

void test7() {
    // read and write, only ensures
    int x = 2;
    extract frame
    ensures x == 4; {
        x = x * 2;
        [/expect assertFailed:false]
        assert x == 4;
        [/end]
    }
    assert x == 4;
}

void test8() {
    // read and write, properly framed
    int x = 2;
    extract frame
    requires x == 2;
    ensures x == 4; {
        x = x * 2;
        assert x == 4;
    }
    assert x == 4;
}

void test9() {
    // when not extracted, frames retain some local knowledge
    int x = 3;
    frame {
        assert x == 3;
    }
}

int test10() {
    // you can also extract loops
    int x = 2;
    extract while(true) {
        [/expect assertFailed:false]
        assert x == 2;
        [/end]
    }
}

int test11() {
    // if not extracted, loops have some local knowledge
    int x = 2;
    while(true) {
        assert x == 2;
    }
}