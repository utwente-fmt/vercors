// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases WaitNotify
lock_invariant Perm(used,1)**Perm(data,1);
class Queue {
  int data;
  boolean used;

  ensures committed(this);
  constructor(){
    data=37;
    used=false;
    commit this;
  }

  requires committed(this);
  void put(int x){
    lock this;
    loop_invariant Perm(used,1)**Perm(data,1)**held(this);
    while(used){
      wait this;
    }
    used=true;
    data=x;
    notify this;
    unlock this;
  }

  requires committed(this);
  int take(){
    int res;
    lock this;
    loop_invariant Perm(used,1)**Perm(data,1)**held(this);
    while(!used){
      wait this;
    }
    res=data;
    used=false;
    notify this;
    unlock this;
    return res;
  }
}
