// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases demo3c
//:: tools silicon
//:: verdict Pass

class Worker {
	Main main;
	int val;
	
	requires m != null;
	ensures Perm(main, 1) ** main != null ** main == m;
	ensures Perm(val, 1) ** val == v;
	ensures idle(this);
	constructor(Main m, int v) {
		this.main = m;
		this.val = v;
	}

	context Perm(main, 1\2) ** main != null;
	requires committed(main);
	context Perm(val, 1\2);
	run {
		lock main;
		main.sum = main.sum + val;
		unlock main;
	}
}

lock_invariant Perm(this.sum, 1);
class Main {
	int sum;

	ensures committed(this);
	constructor() {
	  commit this;
	}

	requires committed(this);
	void sum(seq<int> xs) {
		if (0 < |xs|) {
			Worker w = new Worker(this, xs.head);
			fork w;
			sum(xs.tail);
			join w;
		}
	}
}
