//:: case TestFuturePermsPass
//:: tool silicon
//:: option --check-history
//:: verdict Pass

class `Future` {
  int x;
  
  modifies x;
  ensures x==\old(x)+1;
  process step();
}

class Test {

  int y;

  requires Perm(f.x,1);
  void good1(`Future` f){
    f.x = 1;
  }
  
  requires APerm(f.x,1);
  void good2(`Future` f){
    f.x = 1;
  }
  
  requires Perm(f.x,1);
  requires t==f.x+1;
  ensures HPerm(f.x,1) ** Future(f,1,f.step()) ** AbstractState(f,x==t);
  static void start(`Future` f,int t){
    create f,f.step();
  }

  requires HPerm(f.x,1) ** Future(f,1,f.step());
  ensures  HPerm(f.x,1) ** Future(f,1,empty);
  static void work(`Future` f){
    action(f,1,empty,f.step(),x,write){
      f.x=f.x+1;
    }
  }

  requires HPerm(f.x,1) ** Future(f,1,empty) ** AbstractState(f,x==t);
  ensures Perm(f.x,1) ** f.x==t;
  static void stop(`Future` f,int t){
    destroy f;
  }
 
}


