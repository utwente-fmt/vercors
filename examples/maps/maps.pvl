// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: case MapsInPVL
//:: tools silicon
//:: verdict Pass

class MapsInPVL {
	void main() {
		map<int, boolean> m1 = map<int,boolean>{1 -> true, 2 -> true, 0 -> false};

		assert keysMap(m1) == keysMap(map<int,boolean>{1 -> true, 2 -> true, 0 -> false, 1 -> false, 1 -> true});
		assert m1 == map<int,boolean>{1 -> true, 2 -> true, 0 -> false, 1 -> false, 1 -> true};
		assert m1[1] && !m1[0];
		assert !isEmpty(m1);
		assert |m1 ++ (1, false)| == 3;
		assert getFromMap(m1, 1);
		assert |m1| == 3;
		assert getFromMap(map<int,boolean>{1 -> true, 2 -> true, 0 -> false}, 1);
		
		m1 = buildMap(m1, 1, true);
		assert !disjointMap(m1, map<int,boolean>{1 -> true});
		assert disjointMap(m1, map<int,boolean>{3 -> false, 4 -> true});
		
		set<tuple<int,boolean>> items = itemsMap(m1);
		assert tuple<int,boolean>{1, true} in items;
		
		
		map<int, boolean> m2 = map<int,boolean>{};
		m2 = buildMap(m2, 1, true);
		assert equalsMap(map<int,boolean> {1 -> true}, m2);
		
		assert removeFromMap(map<int, boolean> {0 -> true}, 0) == map<int,boolean>{};
		
		assert isEmpty(keysMap(map<int, boolean>{}));
		assert keysMap(map<int, boolean>{123 -> false}) == {123};
		assert valuesMap(map<int, boolean>{123 -> false}) == {false};
		
		assert valuesMap(map<int, boolean>{123 -> false, 2 -> false, 84368 -> true}) == {false, true};
		assert keysMap(map<int, boolean>{123 -> false, 2 -> false, 84368 -> true}) == {123, 2, 84368};
		
		
		map<int, boolean> m3 = map<int,boolean>{1 -> true, 2 -> true, 0 -> false};
		map<int, boolean> m4 = removeFromMap(m3, 1);
		
		assert m3[2];
		assert 0 in keysMap(m4);
		assert false in valuesMap(m4);
		assert m4[2];
		assert true in valuesMap(m4);
		assert removeFromMap(buildMap(map<int,boolean>{}, 0, true), 0) == map<int,boolean>{};
	}
}
