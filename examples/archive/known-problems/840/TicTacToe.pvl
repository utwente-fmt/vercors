// -*- tab-width:4 ; indent-tabs-mode:nil -*-
//:: cases TicTacToeInt
//:: verdict Pass

class SeqProgram {
	
	Player p1,p2;
	
	inline resource ticTacToeAnnotations() = 
	    p1.myToken == 0 ** p2.myToken == 1
	** p1.turn != p2.turn
	** p1.equalGrid(p2); 
	
	ensures (ticTacToeAnnotations());
	ensures idle(this);
	constructor() {
		p1 = new Player(0,true);
		p2 = new Player(1,false);	
	}
	
	context (ticTacToeAnnotations());		  
	ensures p1.gameFinished() && p2.gameFinished();
	run {
		loop_invariant (ticTacToeAnnotations());
		loop_invariant !p1.gameFinished() == !p2.gameFinished();
		while(!p1.gameFinished() && !p2.gameFinished()) {
			assert p1.turn == !p2.turn;
			if(p1.turn && !p2.turn) {
				p1.createNewMove();
				p2.move = p1.move.clone();
			} else {
				p2.createNewMove();
				p1.move = p2.move.clone();
			}
			p1.doMove();
			p2.doMove();
			p1.turn = !p1.turn;
			p2.turn = !p2.turn;
		}
	}
	
	void main() {
		SeqProgram m = new SeqProgram();
		fork m;
	}

}
