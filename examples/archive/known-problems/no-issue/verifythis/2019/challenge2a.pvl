// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases VerifyThis19TwoA
//:: tools silicon
//:: suite medium problem-fail
//:: verdict Pass

// ./unix/bin/vct --silicon --encoded ./examples/verifythis2019/challenge2.vpr ./examples/verifythis2019/challenge2.pvl 

class Challenge2 {
	
	/** * Auxiliary definitions */
	
  pure boolean distinct(seq<int> s) =
		(\forall int i; 0 <= i && i < s.size; (\forall int j; 0 <= j && j < s.size && s[i] == s[j]; i == j));
	
	inline pure int peek(seq<int> xs) = xs[|xs| - 1];
	
	requires 0 < |xs|;
	ensures |\result| == |xs| - 1;
	ensures (\forall int i; 0 <= i && i < |\result|; \result[i] == xs[i]);
	pure seq<int> pop(seq<int> xs) = 
		1 < |xs| ? [xs.head] + pop(xs.tail) : seq<int>{};
	
	
	/** * Implementation */
	
	ensures |\result| == |s|;
	ensures (\forall int i; 0 <= i && i < |\result|; -1 <= \result[i] && \result[i] < |s|);
	ensures (\forall int i; 0 <= i && i < |\result|; \result[i] < i); // task 1
	ensures (\forall int i; 0 <= i && i < |\result| && 0 <= \result[i]; s[\result[i]] < s[i]); // task 2
	ensures (\forall int i; 0 <= i && i < |\result|; (\forall int j; \result[i] < j && j <= i; s[j] >= s[i])); // task 3
	seq<int> parta(seq<int> s) {
		seq<int> stack = seq<int> { };
		seq<int> left = seq<int> { };
		int x = 0;

		loop_invariant 0 <= x && x <= |s|;
		loop_invariant (\forall int j; 0 <= j && j < |stack|; 0 <= stack[j] && stack[j] < |s|);
		loop_invariant |left| == x;
		loop_invariant (\forall int j; 0 <= j && j < |left|; -1 <= left[j] && left[j] < |s|);
		loop_invariant |stack| <= x;
		loop_invariant (\forall int j; 0 <= j && j < |stack|; 0 <= stack[j] && stack[j] < x);
		loop_invariant (\forall int j; 0 <= j && j < |left|; left[j] < j); 
		loop_invariant (\forall int j; 0 <= j && j < |left| && 0 <= left[j]; s[left[j]] < s[j]);
		loop_invariant (\forall int j; 0 <= j && j < |stack| - 1; stack[j] < stack[j + 1]);
		loop_invariant (\forall int j; 0 <= j && j < |stack| - 1; s[stack[j]] < s[stack[j + 1]]);
		loop_invariant 0 < |stack| ==> peek(stack) == x - 1;
		loop_invariant 0 == |stack| ==> x == 0;
		loop_invariant (\forall int j; 0 <= j && j < |stack| - 1; (\forall int k; stack[j] < k && k < stack[j + 1]; s[k] >= s[stack[j + 1]]));
		loop_invariant 0 < |stack| ==> (\forall int j; 0 <= j && j < stack.head; s[j] >= s[stack.head]);
		loop_invariant 0 == |stack| ==> (\forall int k; 0 <= k && k < x; s[k] >= s[x]);
		loop_invariant (\forall int j; 0 <= j && j < x; (\forall int k; left[j] < k && k <= j; s[k] >= s[j]));
		while (x < |s|) {

			loop_invariant 0 <= x && x <= |s|;
			loop_invariant (\forall int j; 0 <= j && j < |stack|; 0 <= stack[j] && stack[j] < |s|);
			loop_invariant |left| == x;
			loop_invariant (\forall int j; 0 <= j && j < |left|; -1 <= left[j] && left[j] < |s|);
			loop_invariant |stack| <= x;
			loop_invariant (\forall int j; 0 <= j && j < |stack|; 0 <= stack[j] && stack[j] < x);
			loop_invariant (\forall int j; 0 <= j && j < |left|; left[j] < j);
			loop_invariant (\forall int j; 0 <= j && j < |left| && 0 <= left[j]; s[left[j]] < s[j]);
			loop_invariant (\forall int j; 0 <= j && j < |stack| - 1; stack[j] < stack[j + 1]);
			loop_invariant (\forall int j; 0 <= j && j < |stack| - 1; s[stack[j]] < s[stack[j + 1]]);
			loop_invariant (\forall int j; 0 <= j && j < |stack| - 1; (\forall int k; stack[j] < k && k < stack[j + 1]; s[k] >= s[stack[j + 1]]));
			loop_invariant 0 < |stack| ==> (\forall int k; peek(stack) < k && k < x; s[k] >= s[x]);
			loop_invariant 0 < |stack| ==> (\forall int j; 0 <= j && j < stack.head; s[j] >= s[stack.head]);
			loop_invariant 0 == |stack| ==> (\forall int k; 0 <= k && k < x; s[k] >= s[x]);
			loop_invariant (\forall int j; 0 <= j && j < x; (\forall int k; left[j] < k && k <= j; s[k] >= s[j]));
			while (0 < |stack| && s[peek(stack)] >= s[x]) {
				stack = pop(stack);
			}

			if (|stack| == 0) {
				left = left + seq<int> { -1 };
			}
			else {
				left = left + seq<int> { peek(stack) };
			}

			stack = stack + seq<int> { x };
			
			x = x + 1;
		}
		
		return left;
	}
}
