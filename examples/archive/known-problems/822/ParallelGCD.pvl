// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: case ParallelGCD
//:: suite problem-fail
//:: tool silicon
//:: option --check-history
//begin(future)

requires a > 0 ** b > 0;
pure int gcd(int a, int b) = a==b ? a : (a > b ? gcd(a-b, b) : gcd(a, b-a));

model ParGCD {
  int x, y;

  accessible x;
  modifies y;
  requires x > 0 && y > x;  ensures  y == \old(y) - \old(x);
  action decr_y();

  modifies x;
  accessible y;
  requires x > y && y > 0;  ensures  x == \old(x) - \old(y);
  action decr_x();

  accessible x;
  accessible y;
  requires x==y;
  action done();

  requires x > 0 && y > 0;
  ensures  x==y && y == ParallelGCD.gcd(\old(x), \old(y));
  process gcd()=tx()||ty();

  process tx()=decr_x()*tx() + done();
  process ty()=decr_y()*ty() + done();
}

class ParallelGCD {
  requires x > 0 ** y > 0;
  ensures  \result == gcd(x,y);
  int gcd2(int x,int y) {
    ParGCD F = new ParGCD();
    F.x = x;
    F.y = y;
    F.create(F.gcd());
    F.split(1\2, F.tx(), 1\2, F.ty());

    invariant inv(HPerm(F.x,write) ** HPerm(F.y,write) ** F.x > 0 ** F.y > 0) {
      Parallel {
      par T0
      requires F.state(1\2, F.tx());
      ensures F.state(1\2, empty);
      {
        boolean run = true;
        loop_invariant run ? F.state(1\2, F.tx()) : F.state(1\2, empty);
        while(run){
          atomic(inv){
            if(F.x > F.y) {
              F.choose(1\2, F.tx(), F.decr_x()*F.tx());
              action(F,1\2, F.tx(), F.decr_x()) { F.x = F.x - F.y; }
            }
            if(F.x==F.y) {
              choose F, 1\2, F.tx(), F.done();
              action(F, 1\2, empty, F.done()) { run=false; }
            }
          }
        }
      }
      par T1
      requires F.state(1\2,F.ty());
      ensures F.state(1\2,empty);
      {
        boolean run = true;
        loop_invariant run?F.state(1\2,F.ty()):F.state(1\2,empty);
        while(run) {
          atomic(inv) {
            if(F.y > F.x)
            {
              F.choose(1\2, F.ty(), F.decr_y()*F.ty());
              action(F, 1\2, F.ty(), F.decr_y()){
                F.y = F.y - F.x;
              }
            }
            if(F.x == F.y){
              F.choose(1\2, F.ty(), F.done());
              action(F, 1\2, empty, F.done()) {
                run = false;
              }
            }
          }
        }
      }
      }
    }

    F.merge(1\2, empty, 1\2, empty);
    F.destroy();
    return F.x;
  }
}