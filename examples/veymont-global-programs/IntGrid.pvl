// -*- tab-width:4 ; indent-tabs-mode:nil -*-
//:: cases TicTacToeInt
//:: suite problem-fail

class Player {

	int c00, c01, c02, c10, c11, c12, c20, c21, c22;
	int myToken;
	Move move;
	boolean turn;
	
	inline resource gridWritePerm() = 
			Perm(c00, 1) ** Perm(c01, 1) ** Perm(c02, 1) ** 
			Perm(c10, 1) ** Perm(c11, 1) ** Perm(c12, 1) ** 
			Perm(c20, 1) ** Perm(c21, 1) ** Perm(c22, 1);
	
	requires tok == 0 || tok == 1;
	ensures Perm(c00, 1) ** Perm(c01, 1) ** Perm(c02, 1) ** 
			Perm(c10, 1) ** Perm(c11, 1) ** Perm(c12, 1) ** 
			Perm(c20, 1) ** Perm(c21, 1) ** Perm(c22, 1);
	ensures c00 == -1 && c01 == -1 && c02 == -1 && 
			c10 == -1 && c11 == -1 && c12 == -1 && 
			c20 == -1 && c21 == -1 && c22 == -1;
	ensures Perm(myToken,read);
	ensures Perm(move,1);
	ensures myToken == tok;
	ensures myToken == 0 || myToken == 1;
	ensures Perm(turn,1) ** turn == t;
	Player(int tok, boolean t) {
		c00 = -1;
		c01 = -1;
		c02 = -1;
		c10 = -1;
		c11 = -1;
		c12 = -1;
		c20 = -1;
		c21 = -1;
		c22 = -1;
		myToken = tok;
		turn = t;
	}
	
	context Perm(c00, 1) ** Perm(c01, 1) ** Perm(c02, 1) ** 
			Perm(c10, 1) ** Perm(c11, 1) ** Perm(c12, 1) ** 
			Perm(c20, 1) ** Perm(c21, 1) ** Perm(c22, 1);
	context Perm(move,1\2) ** Perm(move.i, read) ** Perm(move.j, read) ** Perm(move.token, read);
	context 0 <= move.i && move.i <= 2;
	context 0 <= move.j && move.j <= 2;
	requires move.token == 0 || move.token == 1;
	requires readMoveCell() == -1;
	ensures readMoveCell() == move.token;
	ensures move.i != 0 || move.j != 0 ==> \old(c00) == c00;
	ensures move.i != 0 || move.j != 1 ==> \old(c01) == c01;
	ensures move.i != 0 || move.j != 2 ==> \old(c02) == c02;
	ensures move.i != 1 || move.j != 0 ==> \old(c10) == c10;
	ensures move.i != 1 || move.j != 1 ==> \old(c11) == c11;
	ensures move.i != 1 || move.j != 2 ==> \old(c12) == c12;
	ensures move.i != 2 || move.j != 0 ==> \old(c20) == c20;
	ensures move.i != 2 || move.j != 1 ==> \old(c21) == c21;
	ensures move.i != 2 || move.j != 2 ==> \old(c22) == c22;			
	void doMove() {
		if(move.i == 0 && move.j == 0) {
			c00 = move.token;
		} else if(move.i == 0 && move.j == 1) {
			c01 = move.token;
		} else if(move.i == 0 && move.j == 2) {
			c02 = move.token;
		} else if(move.i == 1 && move.j == 0) {
			c10 = move.token;
		} else if(move.i == 1 && move.j == 1) {
			c11 = move.token;
		} else if(move.i == 1 && move.j == 2) {
			c12 = move.token;
		} else if(move.i == 2 && move.j == 0) {
			c20 = move.token;
		} else if(move.i == 2 && move.j == 1) {
			c21 = move.token;
		} else if(move.i == 2 && move.j == 2) {
			c22 = move.token;
		}
	}

	requires Perm(move,1\2) ** Perm(move.i,read) ** Perm(move.j,read);
	requires 0 <= move.i && move.i <= 2;
	requires 0 <= move.j && move.j <= 2;
	requires Perm(c00,1\2) ** Perm(c01,1\2) ** Perm(c02,1\2) ** 
		Perm(c10,1\2) ** Perm(c11,1\2) ** Perm(c12,1\2) **
		Perm(c20,1\2) ** Perm(c21,1\2) ** Perm(c22,1\2);
	pure int readMoveCell() =
		(move.i == 0 && move.j == 0) ? c00
		: (move.i == 0 && move.j == 1) ? c01
		: (move.i == 0 && move.j == 2) ? c02 
		: (move.i == 1 && move.j == 0) ? c10
		: (move.i == 1 && move.j == 1) ? c11
		: (move.i == 1 && move.j == 2) ? c12
		: (move.i == 2 && move.j == 0) ? c20
		: (move.i == 2 && move.j == 1) ? c21
		: c22;
		
	requires
		Perm(c00,1\2) ** Perm(c01,1\2) ** Perm(c02,1\2) ** 
		Perm(c10,1\2) ** Perm(c11,1\2) ** Perm(c12,1\2) **
		Perm(c20,1\2) ** Perm(c21,1\2) ** Perm(c22,1\2);
	pure boolean gridFull() =
		c00 != -1 && c01 != -1 && c02 != -1 && 
		c10 != -1 && c11 != -1 && c12 != -1 && 
		c20 != -1 && c21 != -1 && c22  != -1;
		
	requires
		Perm(c00,1\2) ** Perm(c01,1\2) ** Perm(c02,1\2) ** 
		Perm(c10,1\2) ** Perm(c11,1\2) ** Perm(c12,1\2) **
		Perm(c20,1\2) ** Perm(c21,1\2) ** Perm(c22,1\2);
	pure boolean gridWin() =
		c00 != -1 && c00 == c01 && c01 == c02 ||
		c10 != -1 && c10 == c11 && c11 == c12 ||
		c20 != -1 && c20 == c21 && c21 == c22 ||
		c00 != -1 && c00 == c10 && c10 == c20 ||
		c01 != -1 && c01 == c11 && c11 == c21 ||
		c02 != -1 && c02 == c12 && c12 == c22 ||
		c00 != -1 && c00 == c11 && c11 == c22 ||
		c02 != -1 && c02 == c11 && c11 == c20;
		
	requires
		Perm(c00,1\2) ** Perm(c01,1\2) ** Perm(c02,1\2) ** 
		Perm(c10,1\2) ** Perm(c11,1\2) ** Perm(c12,1\2) **
		Perm(c20,1\2) ** Perm(c21,1\2) ** Perm(c22,1\2);
	pure boolean gameFinished() = gridFull() || gridWin();
	
	requires
		Perm(c00,1\2) ** Perm(c01,1\2) ** Perm(c02,1\2) ** 
		Perm(c10,1\2) ** Perm(c11,1\2) ** Perm(c12,1\2) **
		Perm(c20,1\2) ** Perm(c21,1\2) ** Perm(c22,1\2);
	requires
		Perm(other.c00,1\2) ** Perm(other.c01,1\2) ** Perm(other.c02,1\2) ** 
		Perm(other.c10,1\2) ** Perm(other.c11,1\2) ** Perm(other.c12,1\2) **
		Perm(other.c20,1\2) ** Perm(other.c21,1\2) ** Perm(other.c22,1\2);
	pure boolean equalGrid(Player other) =
		c00 == other.c00 && c01 == other.c01 && c02 == other.c02 && 
		c10 == other.c10 && c11 == other.c11 && c12 == other.c12 && 
		c20 == other.c20 && c21 == other.c21 && c22 == other.c22;
			
	context Perm(move,1) ** Perm(myToken, read);
	context Perm(c00, 1\2) ** Perm(c01, 1\2) ** Perm(c02, 1\2) ** 
			Perm(c10, 1\2) ** Perm(c11, 1\2) ** Perm(c12, 1\2) ** 
			Perm(c20, 1\2) ** Perm(c21, 1\2) ** Perm(c22, 1\2);
	ensures Perm(move.i,read) ** Perm(move.j,read) ** Perm(move.token,read);
	ensures 0 <= move.i && move.i <= 2;
	ensures 0 <= move.j && move.j <= 2;
	requires myToken == 0 || myToken == 1;
	ensures move.token == myToken;
	ensures move.token == 0 || move.token == 1;
	ensures myToken == \old(myToken);
	requires !gridFull();
	ensures readMoveCell() == -1;
	void createNewMove();

}
