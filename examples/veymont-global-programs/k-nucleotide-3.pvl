class Main {
    FileReader fr;
    MapCreator m01, m02, m12, m03, m13, m23; // m04, m14, m24, m34 //m06 -- m1718
    StringBuilderRole sb;
    FrequencyWriter w1, w2;
    MapSum s;
    FrequencyCollector c;
    FrequencyCount f1, f2; //, f3, f4, f5;
    
    Main(seq<int> codes, seq<int> nucleotides) {
        // int[] fragmentLengths = { 1, 2, 3, 4, 6, 12, 18 };
        fr = new FileReader(codes);
        m01 = new MapCreator(0,1);
        m02 = new MapCreator(0,2);
        m12 = new MapCreator(1,2);
        m03 = new MapCreator(0,3);
        m13 = new MapCreator(1,3);
        m23 = new MapCreator(2,3);
        //m06 -- m1718
        sb = new StringBuilderRole();
        w1 = new FrequencyWriter(nucleotides);
        w2 = new FrequencyWriter(nucleotides);
        s = new MapSum();
        c = new FrequencyCollector();
        f1 = new FrequencyCount(codes, 0); // "GGT");
        f2 = new FrequencyCount(codes, 1); //"GGTA");
    /*    f3 = new FrequencyCount(codes, 2); // "GGTATT");
        f4 = new FrequencyCount(codes, 3); //"GGTATTTTAATT");
        f5 = new FrequencyCount(codes, 4); //"GGTATTTTAATTTATAGT"); */
    }
    
    void run() {
        fr.sequence = fr.readSystemIn();
        m01.sequence = fr.sequence;
        m02.sequence = fr.sequence;
        m12.sequence = fr.sequence;
        m03.sequence = fr.sequence;
        m13.sequence = fr.sequence;
        m23.sequence = fr.sequence;
        par
        {
            m01.result = m01.createFragmentMap(m01.sequence, m01.offset,m01.fragmentLength);            
        } and
        {
            m02.result = m02.createFragmentMap(m02.sequence, m02.offset,m02.fragmentLength);
        } and 
        {
            m12.result = m12.createFragmentMap(m12.sequence, m12.offset,m12.fragmentLength);
        } and 
        {
            m03.result = m03.createFragmentMap(m03.sequence, m03.offset,m03.fragmentLength);
        } and 
        {
            m13.result = m13.createFragmentMap(m13.sequence, m13.offset,m13.fragmentLength);
        } and 
        {
            m23.result = m23.createFragmentMap(m23.sequence, m23.offset,m23.fragmentLength);
        }
        w1.totalCount = fr.sequence.length;
        w1.frequencies = m01.result;
        w1.result = w1.writeFrequencies(w1.totalCount,w1.frequencies);
        sb.str = w1.result;
        sb.append();
        s.map1 = m02.result;
        s.map2 = m12.result;
        s.result = s.sumTwoMaps(s.map1,s.map2);
        w2.totalCount = fr.sequence.length - 1;
        w2.frequencies = s.result;
        w2.result = w2.writeFrequencies(w2.totalCount, w2.frequencies);
        sb.str = w2.result;
        sb.append();
        c.frequencies = m01.result;
        c.add();
        c.frequencies = m02.result;
        c.add();
        c.frequencies = m12.result;
        c.add();
        c.frequencies = m03.result;
        c.add();
        c.frequencies = m13.result;
        c.add();
        c.frequencies = m23.result;
        c.add();
        f1.futures = c.result;
        f1.result = f1.writeCount(f1.futures, f1.nucleotideFragment);
        sb.str = f1.result;
        sb.append();
        f2.futures = c.result;
        f2.result = f2.writeCount(f2.futures, f2.nucleotideFragment);
        sb.str = f2.result;
        sb.append();
   /*     f3.futures = c.result;
        f3.result = f3.writeCount(f3.futures, f3.nucleotideFragment);
        sb.str = f3.result;
        sb.append();
        f4.futures = c.result;
        f4.result = f4.writeCount(f4.futures, f4.nucleotideFragment);
        sb.str = f4.result;
        sb.append();
        f5.futures = c.result;
        f5.result = f5.writeCount(f5.futures, f5.nucleotideFragment);
        sb.str = f5.result;
        sb.append(); */
        sb.print();
    }
    
    void main() {
        Main m = new Main(seq<int> { -1, 0, -1, 1, 3, -1, -1, 2 }, seq<int> {0,1,2,3});
        m.run();
    }
    
}

class FileReader {
    seq<int> codes;
    int[] sequence;
    
    FileReader(seq<int> c) {
		codes = c;
   }
    
    int[] readSystemIn(); 
}

class Result {
    map<int,int> frequencies;
    int keyLength;
    
    Result(int kl);
}

class MapCreator {
    
    
    int[] sequence;
    int offset, fragmentLength;
    Result result;
    
    MapCreator(int offs, int fragL) {
        offset = offs;
        fragmentLength = fragL;
    }
    
    static Result createFragmentMap(int[] sequence, int offset, int fragmentLength);
}

class FrequencyWriter {
    
    Result frequencies;
    seq<int> nucleotides; // = { 'A', 'C', 'G', 'T' };
    boolean result;
    int totalCount;
    
    FrequencyWriter(seq<int> nu) {
        nucleotides = nu;
    }
    
    boolean writeFrequencies(int totalCount, Result frequencies);
    
}

class MapSum {
    
    Result map1, map2, result;
    
    static Result sumTwoMaps(Result map1, Result map2);
}

class StringBuilderRole {
    
    boolean str;
    
    StringBuilderRole() { }
    
    void append();
    
    void print();
}

class FrequencyCount {
    
    seq<int> codes;// = { -1, 0, -1, 1, 3, -1, -1, 2 };
    seq<Result> futures;
    int nucleotideFragment;
    boolean result;
    
    FrequencyCount(seq<int> c, int n) {
        codes = c;
        nucleotideFragment = n;
    }
    
    boolean writeCount(seq<Result> futures, int nucleotideFragment);
}

class FrequencyCollector {
    Result frequencies;
    seq<Result> result;
    
    FrequencyCollector() { }
    
    void add();
    
}
