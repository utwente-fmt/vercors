// -*- tab-width:2 ; indent-tabs-mode:nil -*-

domain VCTArray[CT] {
  function loc(a: VCTArray[CT], i: Int): CT
  function alen(a: VCTArray[CT]): Int
  function first(r: CT): VCTArray[CT]
  function second(r: CT): Int

  /* Missing in prelude_C, as in C pointers may overlap, whereas in the other
     languages arrays cannot overlap. */
  axiom all_diff {
    forall a: VCTArray[CT], i: Int :: { loc(a,i) }
      first(loc(a,i)) == a && second(loc(a,i)) == i
  }

  axiom len_nonneg {
    forall a: VCTArray[CT] :: { alen(a) }
      alen(a) >= 0
  }
}

domain VCTOption[T] {
  function VCTNone(): VCTOption[T]
  function VCTSome(t: T): VCTOption[T]
  function getVCTOption(o:VCTOption[T]) : T

  axiom not_equal_vct {
    forall x: T :: VCTNone() != VCTSome(x)
  }

  axiom get_axiom_vct {
    forall x: T :: getVCTOption(VCTSome(x)) == x
  }

  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: VCTSome(getVCTOption(x)) == x)
  }
}


domain MatrixIndex {
  function product(r:VectorIndex,c:VectorIndex):MatrixIndex
}

domain MatrixExpression[T] {
  function msum(is:MatrixIndex,xs: MatrixExpression[T]): T
  function mrep(t:T) : MatrixExpression[T]
  function mcmp(v1:MatrixExpression[T],v2:MatrixExpression[T]): MatrixExpression[Int]
  function mseq(m:Seq[Seq[T]]): MatrixExpression[T]
  function mdummy(v:Seq[Seq[Int]]):VectorExpression[T]
  function fmdummy(v:Seq[Seq[VCTFloat]]):VectorExpression[T]

  axiom msum_empty_f {
    forall i:Int, cols:VectorIndex , xs:MatrixExpression[VCTFloat] ::
      { msum(product(vrange(i,i),cols),xs) }
      msum(product(vrange(i,i),cols),xs) == zero()
  }

  axiom msum_empty_i {
    forall i:Int, cols:VectorIndex , xs:MatrixExpression[Int] ::
      { msum(product(vrange(i,i),cols),xs) }
      msum(product(vrange(i,i),cols),xs) == 0
  }

  axiom extend_msum_r {
    forall xs : Seq[Seq[T]], i:Int, j:Int, cols:VectorIndex ::
      { msum(product(vrange(i,j),cols),mseq(xs)) }
      msum(product(vrange(i,j+1),cols),mseq(xs))
      == vadd(msum(product(vrange(i,j),cols),mseq(xs)),vsum(cols,vseq(xs[i])))
  }


}


domain VectorIndex {
  function vrange(lo:Int,hi:Int): VectorIndex
}

domain VectorExpression[T] {
  function vrep(t:T):VectorExpression[T]
  function vseq(xs:Seq[T]):VectorExpression[T]
  function vcmp(v1:VectorExpression[T],v2:VectorExpression[T]): VectorExpression[Int]
  function vsum(is:VectorIndex,xs: VectorExpression[T]): T
  function vget(v:VectorExpression[T],i:Int):T
  function vadd(t1:T,t2:T):T

  function vdummy(v:Seq[Int]):VectorExpression[T]

  axiom vrep_idx {
    forall i:Int, t:T :: { vget(vrep(t),i) } vget(vrep(t),i) == t
  }

  axiom add_int {
    forall i:Int, j:Int :: { vadd(i,j) } vadd(i,j) == i + j
  }

  axiom vseq_get {
    forall i:Int, xs : Seq[T] :: { vget(vseq(xs),i) } vget(vseq(xs),i) == xs[i]
  }

  axiom vcmp_get {
    forall i:Int, xs : VectorExpression[T], ys : VectorExpression[T] ::
      { vget(vcmp(xs,ys),i) } vget(vcmp(xs,ys),i) == ((vget(xs,i)==vget(ys,i))?1:0)
  }

  axiom add_float {
    forall i:VCTFloat, j:VCTFloat :: { vadd(i,j) } vadd(i,j) == fadd(i,j)
  }

  axiom zero_vsum_f_r {
    forall xs : VectorExpression[VCTFloat], i:Int ::
      { vsum(vrange(i,i),xs) } vsum(vrange(i,i),xs) == zero()
  }

  axiom zero_vsum_i_r {
    forall xs : VectorExpression[Int], i:Int ::
      { vsum(vrange(i,i),xs) } vsum(vrange(i,i),xs) == 0
  }

  axiom extend_vsum_r {
    forall xs : VectorExpression[T], i:Int, j:Int ::
      { vsum(vrange(i,j),xs) } vsum(vrange(i,j+1),xs) == vadd(vsum(vrange(i,j),xs),vget(xs,j))
  }
}

domain VCTFloat {
  function zero() : VCTFloat
  function ffromint(i:Int) : VCTFloat
  function fadd(f1 : VCTFloat,f2:VCTFloat):VCTFloat

  axiom commutative_add {
    forall f1 : VCTFloat, f2 : VCTFloat :: fadd(f1,f2)==fadd(f2,f1)
  }

  axiom zero_int {
    ffromint(0)==zero()
  }

  axiom zero_add {
    forall f1 : VCTFloat :: fadd(f1,zero()) == f1
  }

}
