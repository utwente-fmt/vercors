// -*- tab-width:2 ; indent-tabs-mode:nil -*-

class summation {


    int i,j,v;
    seq<int> ar;
    int e1,e2,e3,e4,e5;
    
    
//    axiom deindex2 {
//      (\sum int i; e1 ; ar[ this.multidim_index_2(e2,e3,e4,e5) ])
//    ==
//      (\sum int i; e1 ; ar[ e4*e3 + e5 ])
//    }

    axiom sum1 {
        (\sum int i ; ( i \memberof [ e1 .. e2 )) ; ar[i])
          ==
        sum_array(e1,e1,e2,ar)
    }
    
    axiom sum2 {
        (\sum int i ; ( i \memberof [ e1 .. e2 )) ; (ar[i]==(v!i))?1:0)
          ==
        count_list(e1,e2,ar,v)
    }
    
    axiom sum2b {
        (\sum int i ; true ;
          (\sum int j ; ( i \memberof [ 0 .. e1 )) && (j \memberof [ 0 .. e2 )) ; (ar[i*e2 + j]==(v!i))?1:0))
          ==
        count_array(0,e1*e2,ar,v)
    }
    
    axiom sum2c {
        (\sum int i ; ( i \memberof [ 0 .. e1 )) ;
          (\sum int j ; ( j \memberof [ 0 .. e2 )) ; (ar[i*e2 + j]==(v!i))?1:0))
          ==
        count_array(0,e1*e2,ar,v)
    }

    axiom sum3b {
        (\sum int i ; true ;
          (\sum int j ; ( i \memberof [ 0 .. e1 )) && (j \memberof [ 0 .. e2 )) ; (ar[i*e3 + j]==(v!i))?1:0))
          ==
        count_square(0,0,e2,e3,0,e1*e3,ar,v)
    }
   
    axiom sum3c {
        (\sum int i ; ( i \memberof [ 0 .. e1 )) ;
          (\sum int j ; ( j \memberof [ 0 .. e2 )) ; (ar[i*e3 + j]==(v!i))?1:0))
          ==
        count_square(0,0,e2,e3,0,e1*e3,ar,v)
    }


  requires 0 <= i && i <= hi;
  requires hi <= |ar|;
  static int sum_list(int i,int hi,seq<int> ar) = (i < hi ? (ar[i] + sum_list(i+1,hi,ar)) : 0 );


  requires 0 <= lo && lo <= i && i <= hi && ar !=null;
  requires (\forall* int k ; lo <= k && k < hi ; Value(ar[k]));
  static int sum_array(int i,int lo,int hi,int ar[]) = (i < hi ? (ar[i] + sum_array(i+1,lo,hi,ar)) : 0 );

  requires 0 <= lo && lo <= hi && hi <= step && step > 0 && ar !=null;
  requires 0 <= min && min <= i && i <= max;
  requires (\forall* int k ; min <= k && k < max && lo <= (k % step) && (k % step) < hi ; Value(ar[k]));
  static int sum_square(int i,int lo,int hi,int step,int min,int max,int ar[])=
    (i < max ?  ( lo <= (i % step) && (i% step) < hi ? ar[i] : 0 ) + sum_square(i+1,lo,hi,step,min,max,ar) : 0 );

  requires 0 <= lo && lo <= hi && hi <= step && step > 0 && ar !=null;
  requires 0 <= min && min <= i && i <= max;
  requires (\forall* int k ; min <= k && k < max && lo <= (k % step) && (k % step) < hi ; Value(ar[k]));
  static int count_square(int i,int lo,int hi,int step,int min,int max,int ar[],int v)=
    (i < max ?  ( lo <= (i % step) && (i% step) < hi && ar[i] == v ? 1 : 0 ) + count_square(i+1,lo,hi,step,min,max,ar,v) : 0 );

  requires 0 <= i && i <= hi;
  requires hi <= |ar|;
  static int count_list(int i,int hi,seq<int> ar,int v) = (i < hi ? ((ar[i]==v?1:0) + count_list(i+1,hi,ar,v)) : 0 );
  
  requires 0 <= i && i <= hi && ar !=null;
  requires (\forall* int k ; 0 <= k && k < hi ; Value(ar[k]));
  static int count_array(int i,int hi,int ar[],int v) = (i < hi ? ((ar[i]==v?1:0) + count_array(i+1,hi,ar,v)) : 0 );

}


