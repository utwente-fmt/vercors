axiom add_zero { (∀rational i; i + 0 == i) }
axiom zero_add { (∀rational i; 0 + i == i) }

axiom mul_zero { (∀rational i; i * 0 == 0) }
axiom zero_mul { (∀rational i; 0 * i == 0) }

axiom mul_one { (∀rational i; i * 1 == i) }
axiom one_mul { (∀rational i; 1 * i == i) }

axiom mul_left_add_left { (∀rational a, rational b; a + a*b == a * (b+1)) }
axiom mul_left_add_right { (∀rational a, rational b; a*b + a == a * (b+1)) }
axiom mul_right_add_left { (∀rational a, rational b; b + a*b == (a+1) * b) }
axiom mul_right_add_right { (∀rational a, rational b; a*b + b == (a+1) * b) }

axiom sub_zero { (∀rational i; i - 0 == i) }
axiom zero_sub { (∀rational i; 0 - i == -i) }

axiom sub_self { (∀rational i; i - i == 0) }

axiom add_sub_cancel_1 { (∀rational i, rational j; i + j - j == i) }
axiom add_sub_cancel_2 { (∀rational i, rational j; i - j + j == i) }
axiom add_sub_cancel_3 { (∀rational i, rational j; j + i - j == i) }

axiom unitary_cancel { (∀rational i; -(-i) == i) }
axiom unitary_left_add { (∀rational a, rational b; (-a) + b == b - a) }
axiom unitary_right_add { (∀rational a, rational b; a + (-b) == a - b) }
axiom unitary_left_mul { (∀rational a, rational b; (-a) * b == -(a * b)) }
axiom unitary_right_mul { (∀rational a, rational b; a * (-b) == -(a * b)) }

/* PB: sebastiaan earlier remarked that these lemmas are true if division by zero is unspecified,
       but rather we can also take the interpretation that rewrite rules only work in contexts
       where division is checked (i.e. the right division must inherit the blame from the left
       division). We need machinery to do that. */
axiom inv_mul_left { (∀rational num, rational den; (1 \ den) * num == num \ den) }
axiom inv_mul_right { (∀rational num, rational den; num * (1 \ den) == num \ den) }

axiom div_one { (∀rational i; i \ 1 == i) }
axiom zero_div { (∀rational i; 0 \ i == (0 then 1 \ i;)) }
axiom div_self { (∀rational i; i \ i == (1 then 1 \ i;)) }

axiom mod_self { (∀int i; i % i == (0 then 1 % i;)) }
axiom mod_one { (∀int i; i % 1 == 0) }
axiom zero_mod { (∀int i; 0 % i == (0 then 1 % i;)) }

axiom mod_def { (∀int num, int denom; (num/denom)*denom + (num%denom) == (num then 1/denom;)) }

axiom mod_factor { (∀int num, int denom, int factor; (num+factor*denom) % denom == num%denom) }
axiom mod_factor { (∀int num, int denom, int factor; (num+denom*factor) % denom == num%denom) }
axiom mod_factor { (∀int num, int denom, int factor; (num-factor*denom) % denom == num%denom) }
axiom mod_factor { (∀int num, int denom, int factor; (num-denom*factor) % denom == num%denom) }

axiom not_true { !true == false }
axiom not_false { !false == true }

axiom true_and { (∀boolean b; (true && b) == b) }
axiom and_true { (∀boolean b; (b && true) == b) }
axiom false_and { (∀boolean b; (false && b) == false) }
axiom and_false { (∀boolean b; (b && false) == false) }

axiom true_star { (∀resource b; (true ** b) == b) }
axiom star_true { (∀resource b; (b ** true) == b) }
axiom false_star { (∀resource b; (false ** b) == false) }
axiom star_bool { (∀boolean a, boolean b; (a ** b) == (a && b)) }

axiom forall_nothing { (∀boolean b; (∀nothing n; (b!n)) == true) }
axiom starall_nothing { (∀resource r; (∀*nothing n; (r!n)) == true) }

axiom forall_true { (∀type<any> T; (∀T t; true) == true) }
axiom starall_true { (∀type<any> T; (∀*T t; true) == true) }
// T is non-empty, since nothing is the unique empty type, and {forall, starall}_nothing have priority.
axiom forall_false { (∀type<any> T; (∀T t; false) == false) }
axiom starall_false { (∀type<any> T; (∀*T t; false) == false) }

axiom scale_bool { (∀boolean b, rational s; ([s]b) == b) }
// PB: this is not well-formedness-preserving
// axiom scale_scale { (∀resource r, rational s1, rational s2; ([s1][s2]r) == ([s1*s2]r)) }
axiom scale_star { (∀resource r1, resource r2, rational s; ([s](r1 ** r2)) == (([s]r1) ** ([s]r2))) }
axiom scale_implies { (∀boolean cond, resource r, rational s; ([s](cond ==> r)) == (cond ==> ([s]r))) }
axiom scale_select {
  (∀boolean cond, resource r1, resource r2, rational s;
    ([s](cond ? r1 : r2)) == (cond ? ([s]r1) : ([s]r2)))
}
axiom scale_starall {
  (∀type<any> T, resource r, rational s;
    ([s](∀*T t; (r!t))) == (∀*T t; ([s](r!t))))
}

axiom true_or { (∀boolean b; (true || b) == true) }
axiom or_true { (∀boolean b; (b || true) == true) }
axiom false_or { (∀boolean b; (false || b) == b) }
axiom or_false { (∀boolean b; (b || false) == b) }

axiom true_implies { (∀resource b; (true ==> b) == b) }
axiom implies_true { (∀boolean b; (b ==> true) == true) }
axiom false_implies { (∀resource b; (false ==> b) == true) }
axiom implies_false { (∀boolean b; (b ==> false) == !b) }

axiom implies_self { (∀boolean b; (b ==> b) == true) }
axiom and_self { (∀boolean p; (p && p) == p) }
axiom cond_and_implies { (∀boolean a, boolean b; (a && (a ==> b)) == (a && b)) }
axiom cond_star_implies { (∀boolean a, resource b; (a ** (a ==> b)) == (a ** b)) }
axiom or_self { (∀boolean p; (p || p) == p) }

axiom collapse_nested_implies {
  (∀boolean a, boolean b, resource c;
    (a ==> b ==> c) == ((a && b) ==> c))
}

axiom push_implies_and { (∀boolean a, boolean b, boolean c; (a ==> b && c) == ((a ==> b) && (a ==> c))) }
axiom push_implies_star { (∀boolean a, resource b, resource c; (a ==> b ** c) == ((a ==> b) ** (a ==> c))) }

axiom select_def { (∀boolean cond; (cond ? true : false) == cond) }
axiom select_inv_def { (∀boolean cond; (cond ? false : true) == !cond) }
axiom select_eq { (∀boolean cond, any value; (cond ? value : value) == value) }

axiom lt_select {
  (∀boolean cond, rational l, rational r1, rational r2;
    (l < (cond ? r1 : r2)) == (cond ? l < r1 : l < r2))
}

axiom lte_select {
  (∀boolean cond, rational l, rational r1, rational r2;
    (l <= (cond ? r1 : r2)) == (cond ? l <= r1 : l <= r2))
}

axiom neg_cancel { (∀boolean b; !!b == b) }
axiom neg_or_left { (∀boolean a, boolean b; (!a || b) == (a ==> b)) }

axiom excluded_middle { (∀boolean p; (p || !p) == true) }
axiom excluded_middle_symm { (∀boolean p; (!p || p) == true) }
axiom not_excluded_middle { (∀boolean p; (!p && p) == false) }
axiom not_excluded_middle_symm { (∀boolean p; (p && !p) == false) }

axiom not_gt { (∀rational l, rational r; (!(l > r)) == (l <= r)) }
axiom not_gte { (∀rational l, rational r; (!(l >= r)) == (l < r)) }
axiom not_lt { (∀rational l, rational r; (!(l < r)) == (l >= r)) }
axiom not_lte { (∀rational l, rational r; (!(l <= r)) == (l > r)) }
axiom not_eq { (∀any l, any r; (!(l == r)) == (l != r)) }
axiom not_ne { (∀any l, any r; (!(l != r)) == (l == r)) }

axiom normalize_range_gte { (∀rational left, rational right; left >= right == right <= left) }
axiom normalize_range_gt { (∀rational left, rational right; left > right == right < left) }
axiom normalize_range_diff_zero_lt { (∀rational left, rational right; 0 < left - right == right < left) }
axiom normalize_range_diff_zero_lte { (∀rational left, rational right; 0 <= left - right == right <= left) }

axiom lt_self { (∀rational r; (r < r) == false) }
axiom lte_self { (∀rational r; (r <= r) == true) }
axiom cmp_const_1 { (0 < 1) == true }
axiom cmp_const_2 { (0 <= 1) == true }
axiom lt_shift_one_1 { (∀rational r; (r < r + 1) == true) }
axiom lt_shift_one_2 { (∀rational r; (r - 1 < r) == true) }
axiom lte_shift_one_1 { (∀rational r; (r <= r + 1) == true) }
axiom lte_shift_one_2 { (∀rational r; (r - 1 <= r) == true) }

axiom normalize_range_1 { (∀int i, int l, int r; (l <= i && i < r) == i \in {l..r}) }
axiom normalize_range_2 { (∀int i, int l, int r; (i < r && l <= i) == i \in {l..r}) }
axiom normalize_range_3 { (∀int i, int l, int r; (l < i && i < r) == i \in {l+1..r}) }
axiom normalize_range_4 { (∀int i, int l, int r; (i < r && l < i) == i \in {l+1..r}) }
axiom normalize_range_5 { (∀int i, int l, int r; (l <= i && i <= r) == i \in {l..r+1}) }
axiom normalize_range_6 { (∀int i, int l, int r; (i <= r && l <= i) == i \in {l..r+1}) }
axiom normalize_range_7 { (∀int i, int l, int r; (l < i && i <= r) == i \in {l+1..r+1}) }
axiom normalize_range_8 { (∀int i, int l, int r; (i <= r && l < i) == i \in {l+1..r+1}) }

axiom range_left_self { (∀int i, int r; (i \in {i..r}) == i < r) }
axiom range_left_self_inc { (∀int i, int r; (i \in {i+1..r}) == false) }

axiom specialize_range_right_1 {
  (∀int i, int l, int r1, int r2;
    (i \in {l..r1} && i < r2) == (i \in {l .. r1<r2 ? r1 : r2})) }
axiom specialize_range_right_2 {
  (∀int i, int l, int r1, int r2;
    (i \in {l..r1} && i <= r2) == (i \in {l .. r1<r2+1 ? r1 : r2+1})) }
axiom specialize_range_right_3 {
  (∀int i, int l1, int l2, int r;
    (i \in {l1..r} && l2 <= i) == (i \in {l2<l1 ? l1 : l2 .. r})) }
axiom specialize_range_right_4 {
  (∀int i, int l1, int l2, int r;
    (i \in {l1..r} && l2 < i) == (i \in {l2+1<l1 ? l1 : l2+1 .. r})) }
axiom specialize_range_right_5 {
  (∀int i, int l, int r, int v;
    (i \in {l..r} && i == v) == (i \in {l <= v && v < r ? v : 0 .. l <= v && v < r ? v+1 : 0}))
}

axiom starall_bool {
  (∀type<any> T, boolean body;
    (∀* T t; (body!t)) == (∀ T t; (body!t)))
}

axiom forall_and {
  (∀type<any> T, boolean b1, boolean b2;
    (∀T t; (b1!t) && (b2!t)) ==
    ((∀T t; (b1!t)) && (∀T t; (b2!t))))
}

axiom starall_star {
  (∀type<any> T, resource r1, resource r2;
    (∀* T t; (r1!t) ** (r2!t)) ==
    ((∀* T t; (r1!t)) ** (∀* T t; (r2!t))))
}

axiom starall_select {
  (∀type<any> X, boolean cond, resource t, resource f;
    (∀* X x; (cond!x) ? (t!x) : (f!x)) ==
    ((∀* X x; (cond!x) ==> (t!x)) ** (∀* X x; !(cond!x) ==> (f!x))))
}

axiom forall_indep_cond_left {
  (∀type<any> T, boolean cond1, boolean cond2, boolean body;
    (∀T binding; cond1 && (cond2!binding) ==> (body!binding)) ==
    (cond1 ==> (∀T binding; (cond2!binding) ==> (body!binding))))
}

axiom forall_indep_cond_right {
  (∀type<any> T, boolean cond1, boolean cond2, boolean body;
    (∀T binding; (cond1!binding) && cond2 ==> (body!binding)) ==
    (cond2 ==> (∀T binding; (cond1!binding) ==> (body!binding))))
}

axiom starall_indep_cond_left {
  (∀type<any> T, boolean cond1, boolean cond2, resource body;
    (∀*T binding; cond1 && (cond2!binding) ==> (body!binding)) ==
    (cond1 ==> (∀*T binding; (cond2!binding) ==> (body!binding))))
}

axiom starall_indep_cond_right {
  (∀type<any> T, boolean cond1, boolean cond2, resource body;
    (∀*T binding; (cond1!binding) && cond2 ==> (body!binding)) ==
    (cond2 ==> (∀*T binding; (cond1!binding) ==> (body!binding))))
}

axiom nested_forall_indep_cond {
  (∀type<any> T1, type<any> T2, boolean cond1, boolean indep, boolean cond2, boolean body;
    (∀T1 t1; (cond1!t1) ==> (∀T2 t2; ((indep!t1) && (cond2!t1,t2)) ==> (body!t1,t2))) ==
    (∀T1 t1; (cond1!t1) && (indep!t1) ==> (∀T2 t2; (cond2!t1,t2) ==> (body!t1,t2))))
}

axiom nested_starall_indep_cond {
  (∀type<any> T1, type<any> T2, boolean cond1, boolean indep, boolean cond2, resource body;
    (∀* T1 t1; (cond1!t1) ==> (∀* T2 t2; ((indep!t1) && (cond2!t1,t2)) ==> (body!t1,t2))) ==
    (∀* T1 t1; (cond1!t1) && (indep!t1) ==> (∀* T2 t2; (cond2!t1,t2) ==> (body!t1,t2))))
}

/* axiom implement_let_as_starall {
 *   (∀type<any> T; (∀T value, boolean guard, resource body;
 *     (∀* T binding; (guard && binding == (value!binding)) ==> body) ==
 *     (\let T binding = value; guard ==> body)))
 * }
 * PB: and similar for ∀, is that really useful?
 */

// TODO PB: something with starall read/Value? see e.g. A7

axiom forall_range_body_indep {
  (∀int l, int r, boolean body;
    (∀int binding; binding \in {l..r} ==> body) ==
      (l < r ==> body))
}

axiom forall_range_cond_body_indep {
  (∀int l, int r, boolean cond, boolean body;
    (∀int binding; binding \in {l..r} && cond ==> body) ==
      (l < r && cond ==> body))
}

axiom shift_range_perm_plus_right_indep {
  (∀type<any> T; (∀T[] ar, boolean cond, int shift, rational p;
    (∀* int i; (cond!i) ==> Perm(ar[i + shift], (p!i))) ==
    (∀* int i; (\let int i1 = i - shift; (cond!i1) ==> Perm(ar[i], (p!i1))))))
}

axiom shift_range_perm_plus_left_indep {
  (∀type<any> T; (∀T[] ar, boolean cond, int shift, rational p;
    (∀* int i; (cond!i) ==> Perm(ar[shift + i], (p!i))) ==
    (∀* int i; (\let int i1 = i - shift; (cond!i1) ==> Perm(ar[i], (p!i1))))))
}

axiom shift_range_perm_minus_right_indep {
  (∀type<any> T; (∀T[] ar, boolean cond, int shift, rational p;
    (∀* int i; (cond!i) ==> Perm(ar[i - shift], (p!i))) ==
    (∀* int i; (\let int i1 = i + shift; (cond!i1) ==> Perm(ar[i], (p!i1))))))
}

axiom shift_range_eq_plus_right_indep {
  (∀type<any> T; (∀T[] ar, T value, boolean cond, int shift;
    (∀ int i; (cond!i) ==> ar[i + shift] == (value!i)) ==
    (∀ int i; (\let int i1 = i - shift; (cond!i1) ==> ar[i] == (value!i1)))))
}

axiom shift_range_eq_plus_left_indep {
  (∀type<any> T; (∀T[] ar, T value, boolean cond, int shift;
    (∀ int i; (cond!i) ==> ar[shift + i] == (value!i)) ==
    (∀ int i; (\let int i1 = i - shift; (cond!i1) ==> ar[i] == (value!i1)))))
}

axiom shift_range_eq_minus_right_indep {
  (∀type<any> T; (∀T[] ar, T value, boolean cond, int shift;
    (∀ int i; (cond!i) ==> ar[i - shift] == (value!i)) ==
    (∀ int i; (\let int i1 = i + shift; (cond!i1) ==> ar[i] == (value!i1)))))
}

// PB: I don't see a common situation where the nested variant LEFTPLUS2 is relevant

axiom starall_perm_indep {
  (∀int l, int r, resource res;
    (∀* int i; i \in {l..r} ==> res) ==
    (l < r ==> [r-l]res))
}

axiom starall_nested_1_perm_indep {
  (∀int l, int r, boolean cond1, resource res;
    (∀* int i; i \in {l..r} ==> (∀* int j; (cond1!j) ==> (res!j))) ==
    (l < r ==> (∀* int j; (cond1!j) ==> [r-l](res!j))))
}

// PB: for now I will drop lemma's that translate nested indep foralls to NLA
// PB: nested_1 does not seem useful (?)
// PB: complimentary lemma's lin1, lin2 are then also skipped

axiom scale_range_perm_mul_right_indep {
  (∀type<any> T; (∀int l, int r, T[] ar, int factor, rational p;
    (∀* int i; i \in {l..r} ==> Perm(ar[i * factor], p)) ==
    (∀* int i; (i \in {l*factor..r*factor} && i % factor == 0) ==> Perm(ar[i], p))))
}

axiom scale_range_perm_mul_left_indep {
  (∀type<any> T; (∀int l, int r, T[] ar, int factor, rational p;
    (∀* int i; i \in {l..r} ==> Perm(ar[factor * i], p)) ==
    (∀* int i; (i \in {l*factor..r*factor} && i % factor == 0) ==> Perm(ar[i], p))))
}

// PB: TODO: summation.jspec & associated matrix and vector types

axiom scale_shift_range_perm_linear_indep {
  (∀type<any> T; (∀int l, int r, T[] ar, int factor, int shift, rational p;
    (∀* int i; i \in {l..r} ==> Perm(ar[i*factor + shift], p)) ==
    (∀* int i; (i \in {l*factor+shift..r*factor+shift} && (i-shift) % factor == 0) ==> Perm(ar[i], p))))
}